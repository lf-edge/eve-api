// Copyright(c) 2025 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: hardwareinventory/msg.proto

package hardwareinventory

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type USBBusDevnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// https://elixir.bootlin.com/linux/v6.16.9/source/include/linux/usb.h#L451
	Bus int64 `protobuf:"varint,1,opt,name=bus,proto3" json:"bus,omitempty"`
	// https://elixir.bootlin.com/linux/v6.16.9/source/include/linux/usb.h#L657
	Devnum int64 `protobuf:"varint,2,opt,name=devnum,proto3" json:"devnum,omitempty"`
}

func (x *USBBusDevnum) Reset() {
	*x = USBBusDevnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardwareinventory_msg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USBBusDevnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USBBusDevnum) ProtoMessage() {}

func (x *USBBusDevnum) ProtoReflect() protoreflect.Message {
	mi := &file_hardwareinventory_msg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USBBusDevnum.ProtoReflect.Descriptor instead.
func (*USBBusDevnum) Descriptor() ([]byte, []int) {
	return file_hardwareinventory_msg_proto_rawDescGZIP(), []int{0}
}

func (x *USBBusDevnum) GetBus() int64 {
	if x != nil {
		return x.Bus
	}
	return 0
}

func (x *USBBusDevnum) GetDevnum() int64 {
	if x != nil {
		return x.Devnum
	}
	return 0
}

type USBDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PciParent *PCIAddress   `protobuf:"bytes,1,opt,name=pci_parent,json=pciParent,proto3,oneof" json:"pci_parent,omitempty"`
	UsbParent *USBBusDevnum `protobuf:"bytes,2,opt,name=usb_parent,json=usbParent,proto3,oneof" json:"usb_parent,omitempty"`
	// these are uint16, protobuf only supports from uint32
	// https://elixir.bootlin.com/linux/v6.16.9/source/include/linux/usb.h#L984
	VendorId  uint32        `protobuf:"varint,3,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	ProductId uint32        `protobuf:"varint,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	BusDevnum *USBBusDevnum `protobuf:"bytes,5,opt,name=bus_devnum,json=busDevnum,proto3" json:"bus_devnum,omitempty"`
}

func (x *USBDevice) Reset() {
	*x = USBDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardwareinventory_msg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USBDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USBDevice) ProtoMessage() {}

func (x *USBDevice) ProtoReflect() protoreflect.Message {
	mi := &file_hardwareinventory_msg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USBDevice.ProtoReflect.Descriptor instead.
func (*USBDevice) Descriptor() ([]byte, []int) {
	return file_hardwareinventory_msg_proto_rawDescGZIP(), []int{1}
}

func (x *USBDevice) GetPciParent() *PCIAddress {
	if x != nil {
		return x.PciParent
	}
	return nil
}

func (x *USBDevice) GetUsbParent() *USBBusDevnum {
	if x != nil {
		return x.UsbParent
	}
	return nil
}

func (x *USBDevice) GetVendorId() uint32 {
	if x != nil {
		return x.VendorId
	}
	return 0
}

func (x *USBDevice) GetProductId() uint32 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *USBDevice) GetBusDevnum() *USBBusDevnum {
	if x != nil {
		return x.BusDevnum
	}
	return nil
}

type PCIAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// https://github.com/lyonel/lshw/blob/master/src/core/pci.cc#L224
	Bus      uint32 `protobuf:"varint,1,opt,name=bus,proto3" json:"bus,omitempty"`
	Device   uint32 `protobuf:"varint,2,opt,name=device,proto3" json:"device,omitempty"`
	Function uint32 `protobuf:"varint,3,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *PCIAddress) Reset() {
	*x = PCIAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardwareinventory_msg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCIAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCIAddress) ProtoMessage() {}

func (x *PCIAddress) ProtoReflect() protoreflect.Message {
	mi := &file_hardwareinventory_msg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCIAddress.ProtoReflect.Descriptor instead.
func (*PCIAddress) Descriptor() ([]byte, []int) {
	return file_hardwareinventory_msg_proto_rawDescGZIP(), []int{2}
}

func (x *PCIAddress) GetBus() uint32 {
	if x != nil {
		return x.Bus
	}
	return 0
}

func (x *PCIAddress) GetDevice() uint32 {
	if x != nil {
		return x.Device
	}
	return 0
}

func (x *PCIAddress) GetFunction() uint32 {
	if x != nil {
		return x.Function
	}
	return 0
}

type PCIDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentPciDeviceAddress *string     `protobuf:"bytes,1,opt,name=parent_pci_device_address,json=parentPciDeviceAddress,proto3,oneof" json:"parent_pci_device_address,omitempty"`
	Driver                 string      `protobuf:"bytes,2,opt,name=driver,proto3" json:"driver,omitempty"`
	Address                *PCIAddress `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// https://elixir.bootlin.com/linux/v6.16.9/source/include/linux/pci.h#L347
	VendorId    uint32 `protobuf:"varint,4,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	DeviceId    uint32 `protobuf:"varint,5,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Revision    uint32 `protobuf:"varint,6,opt,name=revision,proto3" json:"revision,omitempty"`
	SubsystemId uint32 `protobuf:"varint,7,opt,name=subsystem_id,json=subsystemId,proto3" json:"subsystem_id,omitempty"`
	ClassId     uint64 `protobuf:"varint,8,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	SubclassId  uint64 `protobuf:"varint,9,opt,name=subclass_id,json=subclassId,proto3" json:"subclass_id,omitempty"`
	// IOMMU group names apparently are strings: https://elixir.bootlin.com/linux/v6.16.9/source/drivers/iommu/iommu.c#L1101
	IommuGroup string `protobuf:"bytes,10,opt,name=iommu_group,json=iommuGroup,proto3" json:"iommu_group,omitempty"`
}

func (x *PCIDevice) Reset() {
	*x = PCIDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardwareinventory_msg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCIDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCIDevice) ProtoMessage() {}

func (x *PCIDevice) ProtoReflect() protoreflect.Message {
	mi := &file_hardwareinventory_msg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCIDevice.ProtoReflect.Descriptor instead.
func (*PCIDevice) Descriptor() ([]byte, []int) {
	return file_hardwareinventory_msg_proto_rawDescGZIP(), []int{3}
}

func (x *PCIDevice) GetParentPciDeviceAddress() string {
	if x != nil && x.ParentPciDeviceAddress != nil {
		return *x.ParentPciDeviceAddress
	}
	return ""
}

func (x *PCIDevice) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *PCIDevice) GetAddress() *PCIAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *PCIDevice) GetVendorId() uint32 {
	if x != nil {
		return x.VendorId
	}
	return 0
}

func (x *PCIDevice) GetDeviceId() uint32 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *PCIDevice) GetRevision() uint32 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *PCIDevice) GetSubsystemId() uint32 {
	if x != nil {
		return x.SubsystemId
	}
	return 0
}

func (x *PCIDevice) GetClassId() uint64 {
	if x != nil {
		return x.ClassId
	}
	return 0
}

func (x *PCIDevice) GetSubclassId() uint64 {
	if x != nil {
		return x.SubclassId
	}
	return 0
}

func (x *PCIDevice) GetIommuGroup() string {
	if x != nil {
		return x.IommuGroup
	}
	return ""
}

type SerialPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PciParent *PCIAddress   `protobuf:"bytes,1,opt,name=pci_parent,json=pciParent,proto3,oneof" json:"pci_parent,omitempty"`
	UsbParent *USBBusDevnum `protobuf:"bytes,2,opt,name=usb_parent,json=usbParent,proto3,oneof" json:"usb_parent,omitempty"`
	Ioports   string        `protobuf:"bytes,3,opt,name=ioports,proto3" json:"ioports,omitempty"`
	Irq       uint64        `protobuf:"varint,4,opt,name=irq,proto3" json:"irq,omitempty"`
	// f.e. /dev/ttyS0
	Devpath string `protobuf:"bytes,5,opt,name=devpath,proto3" json:"devpath,omitempty"`
}

func (x *SerialPort) Reset() {
	*x = SerialPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardwareinventory_msg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerialPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerialPort) ProtoMessage() {}

func (x *SerialPort) ProtoReflect() protoreflect.Message {
	mi := &file_hardwareinventory_msg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerialPort.ProtoReflect.Descriptor instead.
func (*SerialPort) Descriptor() ([]byte, []int) {
	return file_hardwareinventory_msg_proto_rawDescGZIP(), []int{4}
}

func (x *SerialPort) GetPciParent() *PCIAddress {
	if x != nil {
		return x.PciParent
	}
	return nil
}

func (x *SerialPort) GetUsbParent() *USBBusDevnum {
	if x != nil {
		return x.UsbParent
	}
	return nil
}

func (x *SerialPort) GetIoports() string {
	if x != nil {
		return x.Ioports
	}
	return ""
}

func (x *SerialPort) GetIrq() uint64 {
	if x != nil {
		return x.Irq
	}
	return 0
}

func (x *SerialPort) GetDevpath() string {
	if x != nil {
		return x.Devpath
	}
	return ""
}

type CANDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PciParent *PCIAddress   `protobuf:"bytes,1,opt,name=pci_parent,json=pciParent,proto3,oneof" json:"pci_parent,omitempty"`
	UsbParent *USBBusDevnum `protobuf:"bytes,2,opt,name=usb_parent,json=usbParent,proto3,oneof" json:"usb_parent,omitempty"`
	Ifname    string        `protobuf:"bytes,3,opt,name=ifname,proto3" json:"ifname,omitempty"`
}

func (x *CANDevice) Reset() {
	*x = CANDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardwareinventory_msg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CANDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CANDevice) ProtoMessage() {}

func (x *CANDevice) ProtoReflect() protoreflect.Message {
	mi := &file_hardwareinventory_msg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CANDevice.ProtoReflect.Descriptor instead.
func (*CANDevice) Descriptor() ([]byte, []int) {
	return file_hardwareinventory_msg_proto_rawDescGZIP(), []int{5}
}

func (x *CANDevice) GetPciParent() *PCIAddress {
	if x != nil {
		return x.PciParent
	}
	return nil
}

func (x *CANDevice) GetUsbParent() *USBBusDevnum {
	if x != nil {
		return x.UsbParent
	}
	return nil
}

func (x *CANDevice) GetIfname() string {
	if x != nil {
		return x.Ifname
	}
	return ""
}

type NetworkDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PciParent *PCIAddress   `protobuf:"bytes,1,opt,name=pci_parent,json=pciParent,proto3,oneof" json:"pci_parent,omitempty"`
	UsbParent *USBBusDevnum `protobuf:"bytes,2,opt,name=usb_parent,json=usbParent,proto3,oneof" json:"usb_parent,omitempty"`
	Ifname    string        `protobuf:"bytes,3,opt,name=ifname,proto3" json:"ifname,omitempty"`
	Wireless  bool          `protobuf:"varint,4,opt,name=wireless,proto3" json:"wireless,omitempty"`
}

func (x *NetworkDevice) Reset() {
	*x = NetworkDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardwareinventory_msg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkDevice) ProtoMessage() {}

func (x *NetworkDevice) ProtoReflect() protoreflect.Message {
	mi := &file_hardwareinventory_msg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkDevice.ProtoReflect.Descriptor instead.
func (*NetworkDevice) Descriptor() ([]byte, []int) {
	return file_hardwareinventory_msg_proto_rawDescGZIP(), []int{6}
}

func (x *NetworkDevice) GetPciParent() *PCIAddress {
	if x != nil {
		return x.PciParent
	}
	return nil
}

func (x *NetworkDevice) GetUsbParent() *USBBusDevnum {
	if x != nil {
		return x.UsbParent
	}
	return nil
}

func (x *NetworkDevice) GetIfname() string {
	if x != nil {
		return x.Ifname
	}
	return ""
}

func (x *NetworkDevice) GetWireless() bool {
	if x != nil {
		return x.Wireless
	}
	return false
}

// this message is POSTed to /inventory/{serial}/{softserial}
type InventoryMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EveVersion     string           `protobuf:"bytes,1,opt,name=eve_version,json=eveVersion,proto3" json:"eve_version,omitempty"`
	PciDevices     []*PCIDevice     `protobuf:"bytes,2,rep,name=pci_devices,json=pciDevices,proto3" json:"pci_devices,omitempty"`
	UsbDevices     []*USBDevice     `protobuf:"bytes,3,rep,name=usb_devices,json=usbDevices,proto3" json:"usb_devices,omitempty"`
	SerialDevices  []*SerialPort    `protobuf:"bytes,4,rep,name=serial_devices,json=serialDevices,proto3" json:"serial_devices,omitempty"`
	NetworkDevices []*NetworkDevice `protobuf:"bytes,5,rep,name=network_devices,json=networkDevices,proto3" json:"network_devices,omitempty"`
	CanDevices     []*CANDevice     `protobuf:"bytes,6,rep,name=can_devices,json=canDevices,proto3" json:"can_devices,omitempty"`
}

func (x *InventoryMsg) Reset() {
	*x = InventoryMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardwareinventory_msg_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryMsg) ProtoMessage() {}

func (x *InventoryMsg) ProtoReflect() protoreflect.Message {
	mi := &file_hardwareinventory_msg_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryMsg.ProtoReflect.Descriptor instead.
func (*InventoryMsg) Descriptor() ([]byte, []int) {
	return file_hardwareinventory_msg_proto_rawDescGZIP(), []int{7}
}

func (x *InventoryMsg) GetEveVersion() string {
	if x != nil {
		return x.EveVersion
	}
	return ""
}

func (x *InventoryMsg) GetPciDevices() []*PCIDevice {
	if x != nil {
		return x.PciDevices
	}
	return nil
}

func (x *InventoryMsg) GetUsbDevices() []*USBDevice {
	if x != nil {
		return x.UsbDevices
	}
	return nil
}

func (x *InventoryMsg) GetSerialDevices() []*SerialPort {
	if x != nil {
		return x.SerialDevices
	}
	return nil
}

func (x *InventoryMsg) GetNetworkDevices() []*NetworkDevice {
	if x != nil {
		return x.NetworkDevices
	}
	return nil
}

func (x *InventoryMsg) GetCanDevices() []*CANDevice {
	if x != nil {
		return x.CanDevices
	}
	return nil
}

var File_hardwareinventory_msg_proto protoreflect.FileDescriptor

var file_hardwareinventory_msg_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2f, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x6f,
	0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x22,
	0x38, 0x0a, 0x0c, 0x55, 0x53, 0x42, 0x42, 0x75, 0x73, 0x44, 0x65, 0x76, 0x6e, 0x75, 0x6d, 0x12,
	0x10, 0x0a, 0x03, 0x62, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x62, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x64, 0x65, 0x76, 0x6e, 0x75, 0x6d, 0x22, 0xda, 0x02, 0x0a, 0x09, 0x55, 0x53,
	0x42, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x70, 0x63, 0x69, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x50,
	0x43, 0x49, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x09, 0x70, 0x63, 0x69,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x0a, 0x75, 0x73, 0x62,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x55, 0x53, 0x42, 0x42, 0x75, 0x73, 0x44, 0x65, 0x76, 0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52,
	0x09, 0x75, 0x73, 0x62, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x62, 0x75, 0x73,
	0x5f, 0x64, 0x65, 0x76, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x55, 0x53, 0x42, 0x42, 0x75, 0x73, 0x44, 0x65, 0x76, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x62,
	0x75, 0x73, 0x44, 0x65, 0x76, 0x6e, 0x75, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x63, 0x69,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x62, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x0a, 0x50, 0x43, 0x49, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x62, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x03, 0x0a, 0x09, 0x50,
	0x43, 0x49, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x19, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x63, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x16, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x63, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x12, 0x46, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x50, 0x43, 0x49, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x75, 0x62, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6f, 0x6d, 0x6d, 0x75, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6f, 0x6d, 0x6d, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x1c,
	0x0a, 0x1a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x63, 0x69, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x96, 0x02, 0x0a,
	0x0a, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x50, 0x0a, 0x0a, 0x70,
	0x63, 0x69, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x50, 0x43, 0x49, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52,
	0x09, 0x70, 0x63, 0x69, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a,
	0x0a, 0x75, 0x73, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x53, 0x42, 0x42, 0x75, 0x73, 0x44, 0x65, 0x76, 0x6e, 0x75,
	0x6d, 0x48, 0x01, 0x52, 0x09, 0x75, 0x73, 0x62, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x69, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x72, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x72, 0x71, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x76, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x65, 0x76, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x63, 0x69, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x62, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x70, 0x63, 0x69, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x50, 0x43, 0x49, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x09, 0x70, 0x63, 0x69, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x0a, 0x75, 0x73, 0x62, 0x5f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x53, 0x42,
	0x42, 0x75, 0x73, 0x44, 0x65, 0x76, 0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52, 0x09, 0x75, 0x73, 0x62,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x66, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x66, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x63, 0x69, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22,
	0x87, 0x02, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x50, 0x0a, 0x0a, 0x70, 0x63, 0x69, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x50, 0x43, 0x49, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x09, 0x70, 0x63, 0x69, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x0a, 0x75, 0x73, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x53, 0x42, 0x42, 0x75,
	0x73, 0x44, 0x65, 0x76, 0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52, 0x09, 0x75, 0x73, 0x62, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x66, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x63, 0x69, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75,
	0x73, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xc8, 0x03, 0x0a, 0x0c, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x76,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x76, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0b, 0x70,
	0x63, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x50, 0x43, 0x49, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x70,
	0x63, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x75, 0x73, 0x62,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x55, 0x53, 0x42, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x75, 0x73, 0x62,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0d, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x0f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43,
	0x41, 0x4e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x42, 0x53, 0x0a, 0x20, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x66, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x65, 0x76, 0x65,
	0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_hardwareinventory_msg_proto_rawDescOnce sync.Once
	file_hardwareinventory_msg_proto_rawDescData = file_hardwareinventory_msg_proto_rawDesc
)

func file_hardwareinventory_msg_proto_rawDescGZIP() []byte {
	file_hardwareinventory_msg_proto_rawDescOnce.Do(func() {
		file_hardwareinventory_msg_proto_rawDescData = protoimpl.X.CompressGZIP(file_hardwareinventory_msg_proto_rawDescData)
	})
	return file_hardwareinventory_msg_proto_rawDescData
}

var file_hardwareinventory_msg_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_hardwareinventory_msg_proto_goTypes = []interface{}{
	(*USBBusDevnum)(nil),  // 0: org.lfedge.eve.hardwareinventory.USBBusDevnum
	(*USBDevice)(nil),     // 1: org.lfedge.eve.hardwareinventory.USBDevice
	(*PCIAddress)(nil),    // 2: org.lfedge.eve.hardwareinventory.PCIAddress
	(*PCIDevice)(nil),     // 3: org.lfedge.eve.hardwareinventory.PCIDevice
	(*SerialPort)(nil),    // 4: org.lfedge.eve.hardwareinventory.SerialPort
	(*CANDevice)(nil),     // 5: org.lfedge.eve.hardwareinventory.CANDevice
	(*NetworkDevice)(nil), // 6: org.lfedge.eve.hardwareinventory.NetworkDevice
	(*InventoryMsg)(nil),  // 7: org.lfedge.eve.hardwareinventory.InventoryMsg
}
var file_hardwareinventory_msg_proto_depIdxs = []int32{
	2,  // 0: org.lfedge.eve.hardwareinventory.USBDevice.pci_parent:type_name -> org.lfedge.eve.hardwareinventory.PCIAddress
	0,  // 1: org.lfedge.eve.hardwareinventory.USBDevice.usb_parent:type_name -> org.lfedge.eve.hardwareinventory.USBBusDevnum
	0,  // 2: org.lfedge.eve.hardwareinventory.USBDevice.bus_devnum:type_name -> org.lfedge.eve.hardwareinventory.USBBusDevnum
	2,  // 3: org.lfedge.eve.hardwareinventory.PCIDevice.address:type_name -> org.lfedge.eve.hardwareinventory.PCIAddress
	2,  // 4: org.lfedge.eve.hardwareinventory.SerialPort.pci_parent:type_name -> org.lfedge.eve.hardwareinventory.PCIAddress
	0,  // 5: org.lfedge.eve.hardwareinventory.SerialPort.usb_parent:type_name -> org.lfedge.eve.hardwareinventory.USBBusDevnum
	2,  // 6: org.lfedge.eve.hardwareinventory.CANDevice.pci_parent:type_name -> org.lfedge.eve.hardwareinventory.PCIAddress
	0,  // 7: org.lfedge.eve.hardwareinventory.CANDevice.usb_parent:type_name -> org.lfedge.eve.hardwareinventory.USBBusDevnum
	2,  // 8: org.lfedge.eve.hardwareinventory.NetworkDevice.pci_parent:type_name -> org.lfedge.eve.hardwareinventory.PCIAddress
	0,  // 9: org.lfedge.eve.hardwareinventory.NetworkDevice.usb_parent:type_name -> org.lfedge.eve.hardwareinventory.USBBusDevnum
	3,  // 10: org.lfedge.eve.hardwareinventory.InventoryMsg.pci_devices:type_name -> org.lfedge.eve.hardwareinventory.PCIDevice
	1,  // 11: org.lfedge.eve.hardwareinventory.InventoryMsg.usb_devices:type_name -> org.lfedge.eve.hardwareinventory.USBDevice
	4,  // 12: org.lfedge.eve.hardwareinventory.InventoryMsg.serial_devices:type_name -> org.lfedge.eve.hardwareinventory.SerialPort
	6,  // 13: org.lfedge.eve.hardwareinventory.InventoryMsg.network_devices:type_name -> org.lfedge.eve.hardwareinventory.NetworkDevice
	5,  // 14: org.lfedge.eve.hardwareinventory.InventoryMsg.can_devices:type_name -> org.lfedge.eve.hardwareinventory.CANDevice
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_hardwareinventory_msg_proto_init() }
func file_hardwareinventory_msg_proto_init() {
	if File_hardwareinventory_msg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hardwareinventory_msg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USBBusDevnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hardwareinventory_msg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USBDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hardwareinventory_msg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCIAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hardwareinventory_msg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCIDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hardwareinventory_msg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SerialPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hardwareinventory_msg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CANDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hardwareinventory_msg_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hardwareinventory_msg_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_hardwareinventory_msg_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_hardwareinventory_msg_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_hardwareinventory_msg_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_hardwareinventory_msg_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_hardwareinventory_msg_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hardwareinventory_msg_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hardwareinventory_msg_proto_goTypes,
		DependencyIndexes: file_hardwareinventory_msg_proto_depIdxs,
		MessageInfos:      file_hardwareinventory_msg_proto_msgTypes,
	}.Build()
	File_hardwareinventory_msg_proto = out.File
	file_hardwareinventory_msg_proto_rawDesc = nil
	file_hardwareinventory_msg_proto_goTypes = nil
	file_hardwareinventory_msg_proto_depIdxs = nil
}
