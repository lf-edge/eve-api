// Copyright(c) 2017-2018 Zededa, Inc.
// All rights reserved.

syntax = "proto3";

option go_package  = "github.com/lf-edge/eve/api/go/config";
option java_package = "com.zededa.cloud.uservice.proto";

//  PhysicalIO
//     Constitutes set of parameters that define the physical devices.
//     Mainly they describes all the I/O adapters that make up the device.
//
//
//  SystemAdapters:
//     Are the higher level contstucts these are IP-ready network end point
//     description.  SystemAdapters used by EVE device to connect
//     to controller, alternatively systemAdapters are used to share the
//     network connections for applications.
//
//     SystemAdapters, have proxy configuration, VLAN, Wifi credentials etc.
//     System adapter refers to PhysicalIO by name.
//
//   NetworkAdapters:
//     ** Not in this file**
//     Is used for the providing the direct attach information to application
//     Network adapter refers to PhysicalIO by name.
//

// Deprecate; replace by level 2 specification
enum sWAdapterType {
       IGNORE = 0;
       VLAN = 1;
       BOND = 2;
}

// Deprecate; replace by level 2 specification
message sWAdapterParams {
        sWAdapterType aType = 1;

        // vlan
       string underlayInterface = 8;
       uint32 vlanId = 9;

       // OR : repeated physical interfaces for bond0
       repeated string bondgroup = 10;
}

// systemAdapters, are the higher l2 concept built on physicalIOs.
// systemAdapters, gives all the required bits to turn the physical IOs
// into useful IP endpoints
// These endpoints can be further used to connect to controller or
// can be shared between workload/services running on the node.
message SystemAdapter {
        // name of the adapter; hardware-specific e.g., eth0
        string name = 1;

        // deprecated; need level 2 spec. sWAdapterParams allocDetails = 20;

        // this is part of the freelink group
        // deprecate: have a separate device policy object in the API
        bool freeUplink = 2;

        // this is part of the uplink group
        // deprecate: have a separate device policy object in the API
        bool uplink = 3;

        // attach this network config for this adapter
        string networkUUID = 4;

        // if its static network we need ip address
        string addr = 5;

        // alias/logical name which will be reported to zedcloud
        // and used for app instances
        string logicalName = 6;
}

enum PhyIoType {
        PhyIoNoop = 0;
        PhyIoNetEth = 1;
        PhyIoUSB = 2;
        PhyIoCOM = 3;
        PhyIoAudio = 4;
        PhyIoNetWLAN = 5;
        PhyIoNetWWAN = 6;
        PhyIoHDMI = 7;
        PhyIoOther = 255;
}

// How does EVE should use them, for what purpose it is for
enum PhyIoMemberUsage {
        PhyIoUsageNone      = 0;
        PhyIoUsageMgmt      = 1;
        PhyIoUsageShared    = 2;
        PhyIoUsageDedicated = 3;
        PhyIoUsageBlocked   = 4;
}

// Given additional details for EVE softwar to how to treat this
// interface. Example policies could be limit use of LTE interface
// or only use Eth1 only if Eth0 is not available etc
// XXX Note that this is the static information from the model.
// Current configuration is in systemAdapter
message PhyIOUsagePolicy {
        // Used only when one other normal uplinks are down
        bool freeUplink = 1;
}

// PhysicalIO:
//    Absolute low level description of physical buses and ports that are
//    available on given platfrom.
//    Collection of these IOs, connstitue what we would call as hardware
//    model. Each physical IO is manageable and visible to EVE software, and
//    it can be further configured to either provide IP connectivity or
//    directly be given to workloads
message PhysicalIO {
      PhyIoType ptype           = 1;

      // physical label typically printed on box.
      // Example Eth0, Eth1, Wifi0, ComA, ComB
      string phylabel           = 2;

      // The hardware bus address. The key to this map can be of the following
      // (case-insensitive) values:
      // "pcilong": the address is a PCI id of the form 0000:02:00.0
      // "ifname": the addresss is a string for a network interface like "eth1"
      // "serial": the address is a Linux serial port alias such as "/dev/ttyS2"
      // "irq": the address is a number such as "5". This can be a comma
      //    separated list of integers or even a range of integers. Hence using
      //    a string to address this.
      // "ioports": the address is a string such as "2f8-2ff"
      map <string, string> phyaddrs = 3;

      // provides the ability to model designer to rename the physicalIO
      // port to more understandable
      // For example Eth0->Mgmt0
      //  or USBA->ConfigDiskA etc
      string logicallabel       = 4;

      // Assignment Group, is unique label that is applied across PhysicalIOs
      // EntireGroup can be assigned to application or nothing at all
      string  assigngrp         = 5;

      // XXX Note that this is the static information from the model.
      // Current configuration is in systemAdapter
      PhyIoMemberUsage usage    = 6;
      PhyIOUsagePolicy usagePolicy    = 7;

      // physical and logical attributes
      //    For example in WWAN to which firmware version to laod etc
      map <string, string> cbattr = 8;
}
