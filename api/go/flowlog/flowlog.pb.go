// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flowlog.proto

package flowlog

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IpFlow struct {
	Src                  string   `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	SrcPort              int32    `protobuf:"varint,2,opt,name=srcPort,proto3" json:"srcPort,omitempty"`
	Dest                 string   `protobuf:"bytes,3,opt,name=dest,proto3" json:"dest,omitempty"`
	DestPort             string   `protobuf:"bytes,4,opt,name=destPort,proto3" json:"destPort,omitempty"`
	Protocol             int32    `protobuf:"varint,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpFlow) Reset()         { *m = IpFlow{} }
func (m *IpFlow) String() string { return proto.CompactTextString(m) }
func (*IpFlow) ProtoMessage()    {}
func (*IpFlow) Descriptor() ([]byte, []int) {
	return fileDescriptor_da9140283b83e97c, []int{0}
}

func (m *IpFlow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpFlow.Unmarshal(m, b)
}
func (m *IpFlow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpFlow.Marshal(b, m, deterministic)
}
func (m *IpFlow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpFlow.Merge(m, src)
}
func (m *IpFlow) XXX_Size() int {
	return xxx_messageInfo_IpFlow.Size(m)
}
func (m *IpFlow) XXX_DiscardUnknown() {
	xxx_messageInfo_IpFlow.DiscardUnknown(m)
}

var xxx_messageInfo_IpFlow proto.InternalMessageInfo

func (m *IpFlow) GetSrc() string {
	if m != nil {
		return m.Src
	}
	return ""
}

func (m *IpFlow) GetSrcPort() int32 {
	if m != nil {
		return m.SrcPort
	}
	return 0
}

func (m *IpFlow) GetDest() string {
	if m != nil {
		return m.Dest
	}
	return ""
}

func (m *IpFlow) GetDestPort() string {
	if m != nil {
		return m.DestPort
	}
	return ""
}

func (m *IpFlow) GetProtocol() int32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

type InstanceInfo struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Intf                 string   `protobuf:"bytes,2,opt,name=intf,proto3" json:"intf,omitempty"`
	LocalIntf            string   `protobuf:"bytes,3,opt,name=localIntf,proto3" json:"localIntf,omitempty"`
	NetInstUUID          string   `protobuf:"bytes,4,opt,name=netInstUUID,proto3" json:"netInstUUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstanceInfo) Reset()         { *m = InstanceInfo{} }
func (m *InstanceInfo) String() string { return proto.CompactTextString(m) }
func (*InstanceInfo) ProtoMessage()    {}
func (*InstanceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_da9140283b83e97c, []int{1}
}

func (m *InstanceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceInfo.Unmarshal(m, b)
}
func (m *InstanceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceInfo.Marshal(b, m, deterministic)
}
func (m *InstanceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceInfo.Merge(m, src)
}
func (m *InstanceInfo) XXX_Size() int {
	return xxx_messageInfo_InstanceInfo.Size(m)
}
func (m *InstanceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceInfo proto.InternalMessageInfo

func (m *InstanceInfo) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *InstanceInfo) GetIntf() string {
	if m != nil {
		return m.Intf
	}
	return ""
}

func (m *InstanceInfo) GetLocalIntf() string {
	if m != nil {
		return m.LocalIntf
	}
	return ""
}

func (m *InstanceInfo) GetNetInstUUID() string {
	if m != nil {
		return m.NetInstUUID
	}
	return ""
}

type FlowRecord struct {
	Flow                 *IpFlow              `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow,omitempty"`
	AclNum               int32                `protobuf:"varint,2,opt,name=aclNum,proto3" json:"aclNum,omitempty"`
	Action               string               `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	StartTime            *timestamp.Timestamp `protobuf:"bytes,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime              *timestamp.Timestamp `protobuf:"bytes,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
	TxBytes              int64                `protobuf:"varint,6,opt,name=txBytes,proto3" json:"txBytes,omitempty"`
	TxPkts               int64                `protobuf:"varint,7,opt,name=txPkts,proto3" json:"txPkts,omitempty"`
	RxBytes              int64                `protobuf:"varint,8,opt,name=rxBytes,proto3" json:"rxBytes,omitempty"`
	RxPkts               int64                `protobuf:"varint,9,opt,name=rxPkts,proto3" json:"rxPkts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *FlowRecord) Reset()         { *m = FlowRecord{} }
func (m *FlowRecord) String() string { return proto.CompactTextString(m) }
func (*FlowRecord) ProtoMessage()    {}
func (*FlowRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_da9140283b83e97c, []int{2}
}

func (m *FlowRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowRecord.Unmarshal(m, b)
}
func (m *FlowRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowRecord.Marshal(b, m, deterministic)
}
func (m *FlowRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowRecord.Merge(m, src)
}
func (m *FlowRecord) XXX_Size() int {
	return xxx_messageInfo_FlowRecord.Size(m)
}
func (m *FlowRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowRecord.DiscardUnknown(m)
}

var xxx_messageInfo_FlowRecord proto.InternalMessageInfo

func (m *FlowRecord) GetFlow() *IpFlow {
	if m != nil {
		return m.Flow
	}
	return nil
}

func (m *FlowRecord) GetAclNum() int32 {
	if m != nil {
		return m.AclNum
	}
	return 0
}

func (m *FlowRecord) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *FlowRecord) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *FlowRecord) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *FlowRecord) GetTxBytes() int64 {
	if m != nil {
		return m.TxBytes
	}
	return 0
}

func (m *FlowRecord) GetTxPkts() int64 {
	if m != nil {
		return m.TxPkts
	}
	return 0
}

func (m *FlowRecord) GetRxBytes() int64 {
	if m != nil {
		return m.RxBytes
	}
	return 0
}

func (m *FlowRecord) GetRxPkts() int64 {
	if m != nil {
		return m.RxPkts
	}
	return 0
}

type DnsRequest struct {
	HostName             string               `protobuf:"bytes,1,opt,name=hostName,proto3" json:"hostName,omitempty"`
	Addrs                []string             `protobuf:"bytes,2,rep,name=addrs,proto3" json:"addrs,omitempty"`
	RequestTime          *timestamp.Timestamp `protobuf:"bytes,3,opt,name=requestTime,proto3" json:"requestTime,omitempty"`
	AclNum               int32                `protobuf:"varint,4,opt,name=aclNum,proto3" json:"aclNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DnsRequest) Reset()         { *m = DnsRequest{} }
func (m *DnsRequest) String() string { return proto.CompactTextString(m) }
func (*DnsRequest) ProtoMessage()    {}
func (*DnsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da9140283b83e97c, []int{3}
}

func (m *DnsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DnsRequest.Unmarshal(m, b)
}
func (m *DnsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DnsRequest.Marshal(b, m, deterministic)
}
func (m *DnsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DnsRequest.Merge(m, src)
}
func (m *DnsRequest) XXX_Size() int {
	return xxx_messageInfo_DnsRequest.Size(m)
}
func (m *DnsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DnsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DnsRequest proto.InternalMessageInfo

func (m *DnsRequest) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *DnsRequest) GetAddrs() []string {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *DnsRequest) GetRequestTime() *timestamp.Timestamp {
	if m != nil {
		return m.RequestTime
	}
	return nil
}

func (m *DnsRequest) GetAclNum() int32 {
	if m != nil {
		return m.AclNum
	}
	return 0
}

type FlowMessage struct {
	DevId                string        `protobuf:"bytes,1,opt,name=devId,proto3" json:"devId,omitempty"`
	Instance             *InstanceInfo `protobuf:"bytes,2,opt,name=instance,proto3" json:"instance,omitempty"`
	Flows                []*FlowRecord `protobuf:"bytes,3,rep,name=flows,proto3" json:"flows,omitempty"`
	DnsReqs              []*DnsRequest `protobuf:"bytes,4,rep,name=dnsReqs,proto3" json:"dnsReqs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FlowMessage) Reset()         { *m = FlowMessage{} }
func (m *FlowMessage) String() string { return proto.CompactTextString(m) }
func (*FlowMessage) ProtoMessage()    {}
func (*FlowMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_da9140283b83e97c, []int{4}
}

func (m *FlowMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowMessage.Unmarshal(m, b)
}
func (m *FlowMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowMessage.Marshal(b, m, deterministic)
}
func (m *FlowMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowMessage.Merge(m, src)
}
func (m *FlowMessage) XXX_Size() int {
	return xxx_messageInfo_FlowMessage.Size(m)
}
func (m *FlowMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowMessage.DiscardUnknown(m)
}

var xxx_messageInfo_FlowMessage proto.InternalMessageInfo

func (m *FlowMessage) GetDevId() string {
	if m != nil {
		return m.DevId
	}
	return ""
}

func (m *FlowMessage) GetInstance() *InstanceInfo {
	if m != nil {
		return m.Instance
	}
	return nil
}

func (m *FlowMessage) GetFlows() []*FlowRecord {
	if m != nil {
		return m.Flows
	}
	return nil
}

func (m *FlowMessage) GetDnsReqs() []*DnsRequest {
	if m != nil {
		return m.DnsReqs
	}
	return nil
}

func init() {
	proto.RegisterType((*IpFlow)(nil), "IpFlow")
	proto.RegisterType((*InstanceInfo)(nil), "InstanceInfo")
	proto.RegisterType((*FlowRecord)(nil), "FlowRecord")
	proto.RegisterType((*DnsRequest)(nil), "DnsRequest")
	proto.RegisterType((*FlowMessage)(nil), "FlowMessage")
}

func init() { proto.RegisterFile("flowlog.proto", fileDescriptor_da9140283b83e97c) }

var fileDescriptor_da9140283b83e97c = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x4d, 0x6f, 0xd4, 0x30,
	0x10, 0x55, 0x36, 0xfb, 0x95, 0x09, 0x95, 0x90, 0x85, 0x50, 0xb4, 0x20, 0x35, 0xac, 0x54, 0x69,
	0x39, 0xe0, 0x48, 0x0b, 0x07, 0x0e, 0x9c, 0xaa, 0x0a, 0x91, 0x03, 0x55, 0x65, 0xb5, 0x17, 0x6e,
	0x59, 0xdb, 0x9b, 0x46, 0x38, 0xf1, 0x62, 0x3b, 0xdb, 0xc2, 0x89, 0x1f, 0xc1, 0x81, 0x3f, 0xc1,
	0x7f, 0x44, 0xfe, 0xc8, 0xee, 0xde, 0x7a, 0x8a, 0xdf, 0xcc, 0x7b, 0xf6, 0xcc, 0xbc, 0x09, 0x9c,
	0x6d, 0x85, 0x7c, 0x10, 0xb2, 0xc6, 0x3b, 0x25, 0x8d, 0x5c, 0x9c, 0xd7, 0x52, 0xd6, 0x82, 0x17,
	0x0e, 0x6d, 0xfa, 0x6d, 0x61, 0x9a, 0x96, 0x6b, 0x53, 0xb5, 0x3b, 0x4f, 0x58, 0xfe, 0x8e, 0x60,
	0x5a, 0xee, 0x3e, 0x0b, 0xf9, 0x80, 0x9e, 0x43, 0xac, 0x15, 0xcd, 0xa2, 0x3c, 0x5a, 0x25, 0xc4,
	0x1e, 0x51, 0x06, 0x33, 0xad, 0xe8, 0x8d, 0x54, 0x26, 0x1b, 0xe5, 0xd1, 0x6a, 0x42, 0x06, 0x88,
	0x10, 0x8c, 0x19, 0xd7, 0x26, 0x8b, 0x1d, 0xd9, 0x9d, 0xd1, 0x02, 0xe6, 0xf6, 0xeb, 0xe8, 0x63,
	0x17, 0x3f, 0x60, 0x9b, 0x73, 0xef, 0x51, 0x29, 0xb2, 0x89, 0xbb, 0xea, 0x80, 0x97, 0x7b, 0x78,
	0x56, 0x76, 0xda, 0x54, 0x1d, 0xe5, 0x65, 0xb7, 0x95, 0xf6, 0xee, 0xbe, 0x6f, 0x58, 0x28, 0xc4,
	0x9d, 0x6d, 0xac, 0xe9, 0xcc, 0xd6, 0x95, 0x91, 0x10, 0x77, 0x46, 0xaf, 0x21, 0x11, 0x92, 0x56,
	0xa2, 0xb4, 0x09, 0x5f, 0xc8, 0x31, 0x80, 0x72, 0x48, 0x3b, 0x6e, 0xec, 0xc5, 0x77, 0x77, 0xe5,
	0x55, 0x28, 0xe8, 0x34, 0xb4, 0xfc, 0x37, 0x02, 0xb0, 0x8d, 0x13, 0x4e, 0xa5, 0x62, 0xe8, 0x15,
	0x8c, 0xed, 0xec, 0xdc, 0xb3, 0xe9, 0x7a, 0x86, 0xfd, 0x54, 0x88, 0x0b, 0xa2, 0x97, 0x30, 0xad,
	0xa8, 0xb8, 0xee, 0xdb, 0x30, 0x88, 0x80, 0x7c, 0xdc, 0x34, 0xb2, 0x0b, 0x05, 0x04, 0x84, 0x3e,
	0x42, 0xa2, 0x4d, 0xa5, 0xcc, 0x6d, 0xd3, 0x72, 0xf7, 0x76, 0xba, 0x5e, 0x60, 0xef, 0x05, 0x1e,
	0xbc, 0xc0, 0xb7, 0x83, 0x17, 0xe4, 0x48, 0x46, 0x1f, 0x60, 0xc6, 0x3b, 0xe6, 0x74, 0x93, 0x27,
	0x75, 0x03, 0xd5, 0x3a, 0x65, 0x1e, 0x2f, 0x7f, 0x1a, 0xae, 0xb3, 0x69, 0x1e, 0xad, 0x62, 0x32,
	0x40, 0x5b, 0xa1, 0x79, 0xbc, 0xf9, 0x6e, 0x74, 0x36, 0x73, 0x89, 0x80, 0xac, 0x42, 0x05, 0xc5,
	0xdc, 0x2b, 0xd4, 0x51, 0xa1, 0xbc, 0x22, 0xf1, 0x0a, 0x8f, 0x96, 0x7f, 0x22, 0x80, 0xab, 0x4e,
	0x13, 0xfe, 0xa3, 0x0f, 0x76, 0xdf, 0x4b, 0x6d, 0xae, 0xab, 0x96, 0x07, 0xab, 0x0e, 0x18, 0xbd,
	0x80, 0x49, 0xc5, 0x98, 0xd2, 0xd9, 0x28, 0x8f, 0x57, 0x09, 0xf1, 0x00, 0x7d, 0x82, 0x54, 0x79,
	0xb1, 0x6b, 0x2f, 0x7e, 0xb2, 0xbd, 0x53, 0xfa, 0x89, 0x05, 0xe3, 0x53, 0x0b, 0x96, 0x7f, 0x23,
	0x48, 0xad, 0x53, 0x5f, 0xb9, 0xd6, 0x55, 0xed, 0xde, 0x66, 0x7c, 0x5f, 0x0e, 0xfb, 0xe3, 0x01,
	0x7a, 0x0b, 0xf3, 0x26, 0x2c, 0x99, 0xb3, 0x30, 0x5d, 0x9f, 0xe1, 0xd3, 0xad, 0x23, 0x87, 0x34,
	0x7a, 0x03, 0x13, 0xeb, 0xb9, 0xce, 0xe2, 0x3c, 0x5e, 0xa5, 0xeb, 0x14, 0x1f, 0x97, 0x84, 0xf8,
	0x0c, 0xba, 0x80, 0x19, 0x73, 0x93, 0xd0, 0xd9, 0x38, 0x90, 0x8e, 0x93, 0x21, 0x43, 0xee, 0xf2,
	0x0b, 0x9c, 0x53, 0xd9, 0xe2, 0x5f, 0x9c, 0x71, 0x56, 0x61, 0x2a, 0x64, 0xcf, 0x70, 0xaf, 0xb9,
	0xda, 0x37, 0x34, 0xf4, 0xfb, 0xed, 0xa2, 0x6e, 0xcc, 0x7d, 0xbf, 0xc1, 0x54, 0xb6, 0x85, 0xd8,
	0xbe, 0xe3, 0xac, 0xe6, 0x05, 0xdf, 0xf3, 0xa2, 0xda, 0x35, 0x45, 0x2d, 0x8b, 0xf0, 0x37, 0x6f,
	0xa6, 0x8e, 0xfd, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x2d, 0x7f, 0x83, 0xdf, 0x03,
	0x00, 0x00,
}
