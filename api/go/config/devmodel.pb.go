// Code generated by protoc-gen-go. DO NOT EDIT.
// source: devmodel.proto

package config

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// XXX duplicate of definition in zmet.proto with uniq names (ZCio vs Zio)
// Types of I/O adapters that can be assigned to applications
// Deprecate in future, as we would stop using the old style
//    definiations
type ZCioType int32

const (
	ZCioType_ZCioNop   ZCioType = 0
	ZCioType_ZCioEth   ZCioType = 1
	ZCioType_ZCioUSB   ZCioType = 2
	ZCioType_ZCioCOM   ZCioType = 3
	ZCioType_ZCioHDMI  ZCioType = 4
	ZCioType_ZCioOther ZCioType = 255
)

var ZCioType_name = map[int32]string{
	0:   "ZCioNop",
	1:   "ZCioEth",
	2:   "ZCioUSB",
	3:   "ZCioCOM",
	4:   "ZCioHDMI",
	255: "ZCioOther",
}

var ZCioType_value = map[string]int32{
	"ZCioNop":   0,
	"ZCioEth":   1,
	"ZCioUSB":   2,
	"ZCioCOM":   3,
	"ZCioHDMI":  4,
	"ZCioOther": 255,
}

func (x ZCioType) String() string {
	return proto.EnumName(ZCioType_name, int32(x))
}

func (ZCioType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9fb58492383773ea, []int{0}
}

type SWAdapterType int32

const (
	SWAdapterType_IGNORE SWAdapterType = 0
	SWAdapterType_VLAN   SWAdapterType = 1
	SWAdapterType_BOND   SWAdapterType = 2
)

var SWAdapterType_name = map[int32]string{
	0: "IGNORE",
	1: "VLAN",
	2: "BOND",
}

var SWAdapterType_value = map[string]int32{
	"IGNORE": 0,
	"VLAN":   1,
	"BOND":   2,
}

func (x SWAdapterType) String() string {
	return proto.EnumName(SWAdapterType_name, int32(x))
}

func (SWAdapterType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9fb58492383773ea, []int{1}
}

type PhyIoType int32

const (
	PhyIoType_PhyIoNoop  PhyIoType = 0
	PhyIoType_PhyIoEth   PhyIoType = 1
	PhyIoType_PhyIoUSB   PhyIoType = 2
	PhyIoType_PhyIoCOM   PhyIoType = 3
	PhyIoType_PhyIoAudio PhyIoType = 4
	PhyIoType_PhyIoWLAN  PhyIoType = 5
	PhyIoType_PhyIoWWAN  PhyIoType = 6
	PhyIoType_PhyIoHDMI  PhyIoType = 7
	PhyIoType_PhyIoOther PhyIoType = 255
)

var PhyIoType_name = map[int32]string{
	0:   "PhyIoNoop",
	1:   "PhyIoEth",
	2:   "PhyIoUSB",
	3:   "PhyIoCOM",
	4:   "PhyIoAudio",
	5:   "PhyIoWLAN",
	6:   "PhyIoWWAN",
	7:   "PhyIoHDMI",
	255: "PhyIoOther",
}

var PhyIoType_value = map[string]int32{
	"PhyIoNoop":  0,
	"PhyIoEth":   1,
	"PhyIoUSB":   2,
	"PhyIoCOM":   3,
	"PhyIoAudio": 4,
	"PhyIoWLAN":  5,
	"PhyIoWWAN":  6,
	"PhyIoHDMI":  7,
	"PhyIoOther": 255,
}

func (x PhyIoType) String() string {
	return proto.EnumName(PhyIoType_name, int32(x))
}

func (PhyIoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9fb58492383773ea, []int{2}
}

// How does EVE should use them, for what purpose it is for
type PhyIoMemberUsage int32

const (
	PhyIoMemberUsage_PhyIoUsageNone      PhyIoMemberUsage = 0
	PhyIoMemberUsage_PhyIoUsageMgmt      PhyIoMemberUsage = 1
	PhyIoMemberUsage_PhyIoUsageShared    PhyIoMemberUsage = 2
	PhyIoMemberUsage_PhyIoUsageDedicated PhyIoMemberUsage = 3
)

var PhyIoMemberUsage_name = map[int32]string{
	0: "PhyIoUsageNone",
	1: "PhyIoUsageMgmt",
	2: "PhyIoUsageShared",
	3: "PhyIoUsageDedicated",
}

var PhyIoMemberUsage_value = map[string]int32{
	"PhyIoUsageNone":      0,
	"PhyIoUsageMgmt":      1,
	"PhyIoUsageShared":    2,
	"PhyIoUsageDedicated": 3,
}

func (x PhyIoMemberUsage) String() string {
	return proto.EnumName(PhyIoMemberUsage_name, int32(x))
}

func (PhyIoMemberUsage) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9fb58492383773ea, []int{3}
}

type SWAdapterParams struct {
	AType SWAdapterType `protobuf:"varint,1,opt,name=aType,proto3,enum=SWAdapterType" json:"aType,omitempty"`
	// vlan
	UnderlayInterface string `protobuf:"bytes,8,opt,name=underlayInterface,proto3" json:"underlayInterface,omitempty"`
	VlanId            uint32 `protobuf:"varint,9,opt,name=vlanId,proto3" json:"vlanId,omitempty"`
	// OR : repeated physical interfaces for bond0
	Bondgroup            []string `protobuf:"bytes,10,rep,name=bondgroup,proto3" json:"bondgroup,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SWAdapterParams) Reset()         { *m = SWAdapterParams{} }
func (m *SWAdapterParams) String() string { return proto.CompactTextString(m) }
func (*SWAdapterParams) ProtoMessage()    {}
func (*SWAdapterParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fb58492383773ea, []int{0}
}

func (m *SWAdapterParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SWAdapterParams.Unmarshal(m, b)
}
func (m *SWAdapterParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SWAdapterParams.Marshal(b, m, deterministic)
}
func (m *SWAdapterParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SWAdapterParams.Merge(m, src)
}
func (m *SWAdapterParams) XXX_Size() int {
	return xxx_messageInfo_SWAdapterParams.Size(m)
}
func (m *SWAdapterParams) XXX_DiscardUnknown() {
	xxx_messageInfo_SWAdapterParams.DiscardUnknown(m)
}

var xxx_messageInfo_SWAdapterParams proto.InternalMessageInfo

func (m *SWAdapterParams) GetAType() SWAdapterType {
	if m != nil {
		return m.AType
	}
	return SWAdapterType_IGNORE
}

func (m *SWAdapterParams) GetUnderlayInterface() string {
	if m != nil {
		return m.UnderlayInterface
	}
	return ""
}

func (m *SWAdapterParams) GetVlanId() uint32 {
	if m != nil {
		return m.VlanId
	}
	return 0
}

func (m *SWAdapterParams) GetBondgroup() []string {
	if m != nil {
		return m.Bondgroup
	}
	return nil
}

// systemAdapters, are the higher l2 concept built on physicalIOs.
// systemAdapters, gives all the required bits to turn the physical IOs
// into useful IP endpoints
// These endpoints can be further used to connect to controller or
// can be shared between workload/services running on the node.
type SystemAdapter struct {
	// name of the adapter; hardware-specific e.g., eth0
	Name         string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AllocDetails *SWAdapterParams `protobuf:"bytes,20,opt,name=allocDetails,proto3" json:"allocDetails,omitempty"`
	// this is part of the freelink group
	// deprecate: look at PhysicalIO->Usage
	FreeUplink bool `protobuf:"varint,2,opt,name=freeUplink,proto3" json:"freeUplink,omitempty"`
	// this is part of the uplink group
	// deprecate: look at PhysicalIO->Usage
	Uplink bool `protobuf:"varint,3,opt,name=uplink,proto3" json:"uplink,omitempty"`
	// attach this network config for this adapter
	NetworkUUID string `protobuf:"bytes,4,opt,name=networkUUID,proto3" json:"networkUUID,omitempty"`
	// if its static network we need ip address
	Addr string `protobuf:"bytes,5,opt,name=addr,proto3" json:"addr,omitempty"`
	// alias/logical name which will be reported to zedcloud
	// and used for app instances
	LogicalName          string   `protobuf:"bytes,6,opt,name=logicalName,proto3" json:"logicalName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemAdapter) Reset()         { *m = SystemAdapter{} }
func (m *SystemAdapter) String() string { return proto.CompactTextString(m) }
func (*SystemAdapter) ProtoMessage()    {}
func (*SystemAdapter) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fb58492383773ea, []int{1}
}

func (m *SystemAdapter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemAdapter.Unmarshal(m, b)
}
func (m *SystemAdapter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemAdapter.Marshal(b, m, deterministic)
}
func (m *SystemAdapter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemAdapter.Merge(m, src)
}
func (m *SystemAdapter) XXX_Size() int {
	return xxx_messageInfo_SystemAdapter.Size(m)
}
func (m *SystemAdapter) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemAdapter.DiscardUnknown(m)
}

var xxx_messageInfo_SystemAdapter proto.InternalMessageInfo

func (m *SystemAdapter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SystemAdapter) GetAllocDetails() *SWAdapterParams {
	if m != nil {
		return m.AllocDetails
	}
	return nil
}

func (m *SystemAdapter) GetFreeUplink() bool {
	if m != nil {
		return m.FreeUplink
	}
	return false
}

func (m *SystemAdapter) GetUplink() bool {
	if m != nil {
		return m.Uplink
	}
	return false
}

func (m *SystemAdapter) GetNetworkUUID() string {
	if m != nil {
		return m.NetworkUUID
	}
	return ""
}

func (m *SystemAdapter) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *SystemAdapter) GetLogicalName() string {
	if m != nil {
		return m.LogicalName
	}
	return ""
}

// PhysicalIO:
//    Absolute low level description of physical buses and ports that are
//    available on given platfrom.
//    Collection of these IOs, connstitue what we would call as hardware
//    model. Each physical IO is manageable and visible to EVE software, and
//    it can be further configured to either provide IP connectivity or
//    directly be given to workloads
type PhysicalIO struct {
	Ptype PhyIoType `protobuf:"varint,1,opt,name=ptype,proto3,enum=PhyIoType" json:"ptype,omitempty"`
	// physical label typically printed on box.
	// Example Eth0, Eth1, Wifi0, ComA, ComB
	Phylabel string `protobuf:"bytes,2,opt,name=phylabel,proto3" json:"phylabel,omitempty"`
	// the hardware bus address
	Phyaddrs map[string]string `protobuf:"bytes,3,rep,name=phyaddrs,proto3" json:"phyaddrs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// provides the ability to model designer to rename the physicalIO
	// port to more understandable
	// For example Eth0->Mgmt0
	//      or USBA->ConfigDiskA etc
	Logicallabel string `protobuf:"bytes,4,opt,name=logicallabel,proto3" json:"logicallabel,omitempty"`
	// Assignment Group, is unique label that is applied across PhysicalIOs
	// EntireGroup can be assigned to application or nothing at all
	Assigngrp string           `protobuf:"bytes,5,opt,name=assigngrp,proto3" json:"assigngrp,omitempty"`
	Usage     PhyIoMemberUsage `protobuf:"varint,6,opt,name=usage,proto3,enum=PhyIoMemberUsage" json:"usage,omitempty"`
	// physical and logical attributes
	//    For example in WWAN to which firmware version to laod etc
	Cbattr               map[string]string `protobuf:"bytes,7,rep,name=cbattr,proto3" json:"cbattr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PhysicalIO) Reset()         { *m = PhysicalIO{} }
func (m *PhysicalIO) String() string { return proto.CompactTextString(m) }
func (*PhysicalIO) ProtoMessage()    {}
func (*PhysicalIO) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fb58492383773ea, []int{2}
}

func (m *PhysicalIO) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalIO.Unmarshal(m, b)
}
func (m *PhysicalIO) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalIO.Marshal(b, m, deterministic)
}
func (m *PhysicalIO) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalIO.Merge(m, src)
}
func (m *PhysicalIO) XXX_Size() int {
	return xxx_messageInfo_PhysicalIO.Size(m)
}
func (m *PhysicalIO) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalIO.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalIO proto.InternalMessageInfo

func (m *PhysicalIO) GetPtype() PhyIoType {
	if m != nil {
		return m.Ptype
	}
	return PhyIoType_PhyIoNoop
}

func (m *PhysicalIO) GetPhylabel() string {
	if m != nil {
		return m.Phylabel
	}
	return ""
}

func (m *PhysicalIO) GetPhyaddrs() map[string]string {
	if m != nil {
		return m.Phyaddrs
	}
	return nil
}

func (m *PhysicalIO) GetLogicallabel() string {
	if m != nil {
		return m.Logicallabel
	}
	return ""
}

func (m *PhysicalIO) GetAssigngrp() string {
	if m != nil {
		return m.Assigngrp
	}
	return ""
}

func (m *PhysicalIO) GetUsage() PhyIoMemberUsage {
	if m != nil {
		return m.Usage
	}
	return PhyIoMemberUsage_PhyIoUsageNone
}

func (m *PhysicalIO) GetCbattr() map[string]string {
	if m != nil {
		return m.Cbattr
	}
	return nil
}

func init() {
	proto.RegisterEnum("ZCioType", ZCioType_name, ZCioType_value)
	proto.RegisterEnum("SWAdapterType", SWAdapterType_name, SWAdapterType_value)
	proto.RegisterEnum("PhyIoType", PhyIoType_name, PhyIoType_value)
	proto.RegisterEnum("PhyIoMemberUsage", PhyIoMemberUsage_name, PhyIoMemberUsage_value)
	proto.RegisterType((*SWAdapterParams)(nil), "sWAdapterParams")
	proto.RegisterType((*SystemAdapter)(nil), "SystemAdapter")
	proto.RegisterType((*PhysicalIO)(nil), "PhysicalIO")
	proto.RegisterMapType((map[string]string)(nil), "PhysicalIO.CbattrEntry")
	proto.RegisterMapType((map[string]string)(nil), "PhysicalIO.PhyaddrsEntry")
}

func init() { proto.RegisterFile("devmodel.proto", fileDescriptor_9fb58492383773ea) }

var fileDescriptor_9fb58492383773ea = []byte{
	// 715 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x5f, 0x6f, 0xeb, 0x34,
	0x18, 0xc6, 0x97, 0xa6, 0xed, 0x9a, 0xb7, 0x6b, 0x8f, 0x8f, 0x99, 0x38, 0x61, 0x42, 0x10, 0x4d,
	0x47, 0xa2, 0x9a, 0x20, 0x95, 0x0a, 0x48, 0xfc, 0xb9, 0xea, 0xd6, 0xe9, 0x10, 0x89, 0xa6, 0x53,
	0x46, 0x99, 0x74, 0xc4, 0x8d, 0x1b, 0xbb, 0x69, 0xb4, 0x24, 0x8e, 0x9c, 0xa4, 0x28, 0x7c, 0x0c,
	0x24, 0xae, 0xf8, 0x84, 0x7c, 0x0a, 0x90, 0xed, 0xf4, 0xdf, 0xb8, 0x3a, 0x77, 0xef, 0xf3, 0x3c,
	0x7e, 0xed, 0xdf, 0x1b, 0xbb, 0x85, 0x21, 0x65, 0xdb, 0x94, 0x53, 0x96, 0xb8, 0xb9, 0xe0, 0x25,
	0xbf, 0xfe, 0xdb, 0x80, 0x57, 0xc5, 0xd3, 0x94, 0x92, 0xbc, 0x64, 0xe2, 0x81, 0x08, 0x92, 0x16,
	0xf8, 0x2d, 0x74, 0xc8, 0x2f, 0x75, 0xce, 0x6c, 0xc3, 0x31, 0x46, 0xc3, 0xc9, 0xd0, 0xdd, 0x2f,
	0x90, 0x6e, 0xa0, 0x43, 0xfc, 0x25, 0xbc, 0xae, 0x32, 0xca, 0x44, 0x42, 0x6a, 0x2f, 0x2b, 0x99,
	0x58, 0x93, 0x90, 0xd9, 0x3d, 0xc7, 0x18, 0x59, 0xc1, 0xff, 0x03, 0xfc, 0x31, 0x74, 0xb7, 0x09,
	0xc9, 0x3c, 0x6a, 0x5b, 0x8e, 0x31, 0x1a, 0x04, 0x8d, 0xc2, 0x9f, 0x82, 0xb5, 0xe2, 0x19, 0x8d,
	0x04, 0xaf, 0x72, 0x1b, 0x1c, 0x73, 0x64, 0x05, 0x07, 0xe3, 0xfa, 0x1f, 0x03, 0x06, 0x8f, 0x75,
	0x51, 0xb2, 0xb4, 0x01, 0xc0, 0x18, 0xda, 0x19, 0x49, 0x35, 0x9a, 0x15, 0xa8, 0x1a, 0x7f, 0x03,
	0x17, 0x24, 0x49, 0x78, 0x38, 0x63, 0x25, 0x89, 0x93, 0xc2, 0xbe, 0x74, 0x8c, 0x51, 0x7f, 0x82,
	0xdc, 0x17, 0x73, 0x05, 0x27, 0xab, 0xf0, 0x67, 0x00, 0x6b, 0xc1, 0xd8, 0x32, 0x4f, 0xe2, 0xec,
	0xd9, 0x6e, 0x39, 0xc6, 0xa8, 0x17, 0x1c, 0x39, 0x92, 0xb8, 0xd2, 0x99, 0xa9, 0xb2, 0x46, 0x61,
	0x07, 0xfa, 0x19, 0x2b, 0x7f, 0xe7, 0xe2, 0x79, 0xb9, 0xf4, 0x66, 0x76, 0x5b, 0x81, 0x1c, 0x5b,
	0x92, 0x91, 0x50, 0x2a, 0xec, 0x8e, 0x66, 0x94, 0xb5, 0xec, 0x4a, 0x78, 0x14, 0x87, 0x24, 0xf1,
	0x25, 0x7e, 0x57, 0x77, 0x1d, 0x59, 0xd7, 0x7f, 0x99, 0x00, 0x0f, 0x9b, 0xba, 0x90, 0x86, 0xb7,
	0xc0, 0x0e, 0x74, 0xf2, 0xf2, 0x70, 0x09, 0xe0, 0x3e, 0x6c, 0x6a, 0x8f, 0xeb, 0x0b, 0x50, 0x01,
	0xbe, 0x82, 0x5e, 0xbe, 0xa9, 0x13, 0xb2, 0x62, 0x89, 0xc2, 0xb7, 0x82, 0xbd, 0xc6, 0xdf, 0xaa,
	0x4c, 0x9e, 0x5c, 0xd8, 0xa6, 0x63, 0x8e, 0xfa, 0x93, 0x4f, 0xdc, 0xc3, 0xe6, 0xb2, 0x54, 0xd9,
	0x7d, 0x56, 0x8a, 0x3a, 0xd8, 0x2f, 0xc5, 0xd7, 0x70, 0xd1, 0x20, 0xe9, 0x6d, 0xf5, 0x70, 0x27,
	0x9e, 0xbc, 0x31, 0x52, 0x14, 0x71, 0x94, 0x45, 0x22, 0x6f, 0x46, 0x3c, 0x18, 0xf8, 0x0b, 0xe8,
	0x54, 0x05, 0x89, 0xf4, 0x84, 0xc3, 0xc9, 0x6b, 0x8d, 0x3d, 0x67, 0xe9, 0x8a, 0x89, 0xa5, 0x0c,
	0x02, 0x9d, 0xe3, 0x31, 0x74, 0xc3, 0x15, 0x29, 0x4b, 0x61, 0x9f, 0x2b, 0xbe, 0x37, 0xc7, 0x7c,
	0x77, 0x2a, 0xd1, 0x74, 0xcd, 0xb2, 0xab, 0x1f, 0x61, 0x70, 0x82, 0x8d, 0x11, 0x98, 0xcf, 0xac,
	0x6e, 0x5e, 0x82, 0x2c, 0xf1, 0x25, 0x74, 0xb6, 0x24, 0xa9, 0x58, 0xf3, 0x39, 0xb4, 0xf8, 0xa1,
	0xf5, 0x9d, 0x71, 0xf5, 0x3d, 0xf4, 0x8f, 0xf6, 0xfc, 0x90, 0xd6, 0x9b, 0xdf, 0xa0, 0xf7, 0xfe,
	0x2e, 0x56, 0x5f, 0x1e, 0xf7, 0xe1, 0x5c, 0xd6, 0x3e, 0xcf, 0xd1, 0xd9, 0x4e, 0xdc, 0x97, 0x1b,
	0x64, 0xec, 0xc4, 0xf2, 0xf1, 0x16, 0xb5, 0x76, 0xe2, 0x6e, 0x31, 0x47, 0x26, 0xbe, 0xd0, 0xfd,
	0x3f, 0xcd, 0xe6, 0x1e, 0x6a, 0xe3, 0x21, 0x58, 0x52, 0x2d, 0xca, 0x0d, 0x13, 0xe8, 0x5f, 0xe3,
	0x66, 0x0c, 0x83, 0x93, 0x5f, 0x17, 0x06, 0xe8, 0x7a, 0xef, 0xfc, 0x45, 0x70, 0x8f, 0xce, 0x70,
	0x0f, 0xda, 0xbf, 0xfe, 0x3c, 0xf5, 0x91, 0x21, 0xab, 0xdb, 0x85, 0x3f, 0x43, 0xad, 0x9b, 0x3f,
	0x0d, 0xb0, 0xf6, 0x4f, 0x01, 0x0f, 0x1a, 0xe1, 0x73, 0x85, 0x74, 0x01, 0x3d, 0x25, 0x35, 0xd3,
	0x4e, 0x69, 0xa8, 0x9d, 0xd2, 0x54, 0x43, 0xf5, 0xd8, 0x3c, 0x3e, 0xad, 0x68, 0xcc, 0x51, 0x7b,
	0xbf, 0xd1, 0x93, 0x3c, 0xaf, 0x73, 0x90, 0x4f, 0x53, 0x1f, 0x75, 0xf7, 0x52, 0x0d, 0x71, 0x8e,
	0x5f, 0x35, 0xcd, 0xfb, 0x29, 0x62, 0x40, 0x2f, 0xef, 0x19, 0x63, 0x18, 0xea, 0xd3, 0xa5, 0xf2,
	0x79, 0xc6, 0xd0, 0xd9, 0xa9, 0x37, 0x8f, 0xd2, 0x12, 0x19, 0xf8, 0xb2, 0xe9, 0x55, 0xde, 0xe3,
	0x86, 0x08, 0x46, 0x51, 0x0b, 0xbf, 0x81, 0x8f, 0x0e, 0xee, 0x8c, 0xd1, 0x38, 0x24, 0x25, 0xa3,
	0xc8, 0xbc, 0x7d, 0x07, 0x9f, 0x87, 0x3c, 0x75, 0xff, 0x60, 0x94, 0x51, 0xe2, 0x86, 0x09, 0xaf,
	0xa8, 0x5b, 0x15, 0x4c, 0x6c, 0xe3, 0x90, 0xe9, 0xff, 0xb4, 0xf7, 0x6f, 0xa3, 0xb8, 0xdc, 0x54,
	0x2b, 0x37, 0xe4, 0xe9, 0x38, 0x59, 0x7f, 0xc5, 0x68, 0xc4, 0xc6, 0x6c, 0xcb, 0xc6, 0x24, 0x8f,
	0xc7, 0x11, 0x1f, 0x87, 0x3c, 0x5b, 0xc7, 0xd1, 0xaa, 0xab, 0x16, 0x7f, 0xfd, 0x5f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xa0, 0x40, 0x99, 0x6e, 0x12, 0x05, 0x00, 0x00,
}
