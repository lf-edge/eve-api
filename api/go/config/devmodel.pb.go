// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config/devmodel.proto

package config

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/lf-edge/eve/api/go/common"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Deprecate; replace by level 2 specification
type SWAdapterType int32

const (
	SWAdapterType_IGNORE SWAdapterType = 0
	SWAdapterType_VLAN   SWAdapterType = 1
	SWAdapterType_BOND   SWAdapterType = 2
)

var SWAdapterType_name = map[int32]string{
	0: "IGNORE",
	1: "VLAN",
	2: "BOND",
}

var SWAdapterType_value = map[string]int32{
	"IGNORE": 0,
	"VLAN":   1,
	"BOND":   2,
}

func (x SWAdapterType) String() string {
	return proto.EnumName(SWAdapterType_name, int32(x))
}

func (SWAdapterType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ac2ef1f6bdd3fcc4, []int{0}
}

// Deprecate; replace by level 2 specification
type SWAdapterParams struct {
	AType SWAdapterType `protobuf:"varint,1,opt,name=aType,proto3,enum=SWAdapterType" json:"aType,omitempty"`
	// vlan
	UnderlayInterface string `protobuf:"bytes,8,opt,name=underlayInterface,proto3" json:"underlayInterface,omitempty"`
	VlanId            uint32 `protobuf:"varint,9,opt,name=vlanId,proto3" json:"vlanId,omitempty"`
	// OR : repeated physical interfaces for bond0
	Bondgroup            []string `protobuf:"bytes,10,rep,name=bondgroup,proto3" json:"bondgroup,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SWAdapterParams) Reset()         { *m = SWAdapterParams{} }
func (m *SWAdapterParams) String() string { return proto.CompactTextString(m) }
func (*SWAdapterParams) ProtoMessage()    {}
func (*SWAdapterParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac2ef1f6bdd3fcc4, []int{0}
}

func (m *SWAdapterParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SWAdapterParams.Unmarshal(m, b)
}
func (m *SWAdapterParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SWAdapterParams.Marshal(b, m, deterministic)
}
func (m *SWAdapterParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SWAdapterParams.Merge(m, src)
}
func (m *SWAdapterParams) XXX_Size() int {
	return xxx_messageInfo_SWAdapterParams.Size(m)
}
func (m *SWAdapterParams) XXX_DiscardUnknown() {
	xxx_messageInfo_SWAdapterParams.DiscardUnknown(m)
}

var xxx_messageInfo_SWAdapterParams proto.InternalMessageInfo

func (m *SWAdapterParams) GetAType() SWAdapterType {
	if m != nil {
		return m.AType
	}
	return SWAdapterType_IGNORE
}

func (m *SWAdapterParams) GetUnderlayInterface() string {
	if m != nil {
		return m.UnderlayInterface
	}
	return ""
}

func (m *SWAdapterParams) GetVlanId() uint32 {
	if m != nil {
		return m.VlanId
	}
	return 0
}

func (m *SWAdapterParams) GetBondgroup() []string {
	if m != nil {
		return m.Bondgroup
	}
	return nil
}

// systemAdapters, are the higher l2 concept built on physicalIOs.
// systemAdapters, gives all the required bits to turn the physical IOs
// into useful IP endpoints.
// These endpoints can be further used to connect to controller or
// can be shared between workload/services running on the node.
type SystemAdapter struct {
	// name - Name of the Network Interface. This is the Port Name
	//  used in Info / Metrics / flowlog etc. Name cannot be changed.
	// This will be the Network Port name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// deprecated; need level 2 spec. sWAdapterParams allocDetails = 20;
	// this is part of the freelink group
	// DEPRECATED by PhyIoAdapter.usagePolicy.
	FreeUplink bool `protobuf:"varint,2,opt,name=freeUplink,proto3" json:"freeUplink,omitempty"`
	// uplink - DEPRECATED by PhysicalIO.Usage / PhysicalIO.UsagePolicy
	// this is part of the uplink group
	// deprecate: have a separate device policy object in the API
	Uplink bool `protobuf:"varint,3,opt,name=uplink,proto3" json:"uplink,omitempty"`
	// networkUUID - attach this network config for this adapter
	// if not set, depending on Usage of Adapter, would be treated as
	// an L2 port
	NetworkUUID string `protobuf:"bytes,4,opt,name=networkUUID,proto3" json:"networkUUID,omitempty"`
	// addr - if its static network we need ip address
	// If this is specified, networkUUID must also be specified. addr
	// is expected to be in sync with the network object (same subnet etc ).
	Addr string `protobuf:"bytes,5,opt,name=addr,proto3" json:"addr,omitempty"`
	// alias - Device just reflects it back in status / Metrics back to
	// cloud.
	Alias string `protobuf:"bytes,7,opt,name=alias,proto3" json:"alias,omitempty"`
	// lowerLayerName - For example, if lower layer is PhysicalAdapter
	// ( physical interface), this should point to PhyLabel of the
	// physicalIO.
	LowerLayerName       string   `protobuf:"bytes,8,opt,name=lowerLayerName,proto3" json:"lowerLayerName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemAdapter) Reset()         { *m = SystemAdapter{} }
func (m *SystemAdapter) String() string { return proto.CompactTextString(m) }
func (*SystemAdapter) ProtoMessage()    {}
func (*SystemAdapter) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac2ef1f6bdd3fcc4, []int{1}
}

func (m *SystemAdapter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemAdapter.Unmarshal(m, b)
}
func (m *SystemAdapter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemAdapter.Marshal(b, m, deterministic)
}
func (m *SystemAdapter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemAdapter.Merge(m, src)
}
func (m *SystemAdapter) XXX_Size() int {
	return xxx_messageInfo_SystemAdapter.Size(m)
}
func (m *SystemAdapter) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemAdapter.DiscardUnknown(m)
}

var xxx_messageInfo_SystemAdapter proto.InternalMessageInfo

func (m *SystemAdapter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SystemAdapter) GetFreeUplink() bool {
	if m != nil {
		return m.FreeUplink
	}
	return false
}

func (m *SystemAdapter) GetUplink() bool {
	if m != nil {
		return m.Uplink
	}
	return false
}

func (m *SystemAdapter) GetNetworkUUID() string {
	if m != nil {
		return m.NetworkUUID
	}
	return ""
}

func (m *SystemAdapter) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *SystemAdapter) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *SystemAdapter) GetLowerLayerName() string {
	if m != nil {
		return m.LowerLayerName
	}
	return ""
}

// Given additional details for EVE softwar to how to treat this
// interface. Example policies could be limit use of LTE interface
// or only use Eth1 only if Eth0 is not available etc
// XXX Note that this is the static information from the model.
// Current configuration is in systemAdapter
type PhyIOUsagePolicy struct {
	// DEPRECATED - Used only when one other normal uplinks are down
	FreeUplink bool `protobuf:"varint,1,opt,name=freeUplink,proto3" json:"freeUplink,omitempty"`
	// fallBackPriority
	//  0 is the highest priority.
	//  Lower priority interfaces are used only when NONE of the higher
	//  priority interfaces are up.
	//  For example:
	//      First use all interfaces with priority 0
	//      if no priority 0 interfaces, use interfaces with priority 1
	//      if no priority 1 interfaces, use interfaces with priority 2
	//      and so on..
	FallBackPriority     uint32   `protobuf:"varint,2,opt,name=fallBackPriority,proto3" json:"fallBackPriority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PhyIOUsagePolicy) Reset()         { *m = PhyIOUsagePolicy{} }
func (m *PhyIOUsagePolicy) String() string { return proto.CompactTextString(m) }
func (*PhyIOUsagePolicy) ProtoMessage()    {}
func (*PhyIOUsagePolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac2ef1f6bdd3fcc4, []int{2}
}

func (m *PhyIOUsagePolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhyIOUsagePolicy.Unmarshal(m, b)
}
func (m *PhyIOUsagePolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhyIOUsagePolicy.Marshal(b, m, deterministic)
}
func (m *PhyIOUsagePolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhyIOUsagePolicy.Merge(m, src)
}
func (m *PhyIOUsagePolicy) XXX_Size() int {
	return xxx_messageInfo_PhyIOUsagePolicy.Size(m)
}
func (m *PhyIOUsagePolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_PhyIOUsagePolicy.DiscardUnknown(m)
}

var xxx_messageInfo_PhyIOUsagePolicy proto.InternalMessageInfo

func (m *PhyIOUsagePolicy) GetFreeUplink() bool {
	if m != nil {
		return m.FreeUplink
	}
	return false
}

func (m *PhyIOUsagePolicy) GetFallBackPriority() uint32 {
	if m != nil {
		return m.FallBackPriority
	}
	return 0
}

// PhysicalIO:
//    Absolute low level description of physical buses and ports that are
//    available on given platfrom.
//    Collection of these IOs, connstitue what we would call as hardware
//    model. Each physical IO is manageable and visible to EVE software, and
//    it can be further configured to either provide IP connectivity or
//    directly be given to workloads
type PhysicalIO struct {
	Ptype common.PhyIoType `protobuf:"varint,1,opt,name=ptype,proto3,enum=PhyIoType" json:"ptype,omitempty"`
	// physical label typically printed on box.
	// Example Eth0, Eth1, Wifi0, ComA, ComB
	Phylabel string `protobuf:"bytes,2,opt,name=phylabel,proto3" json:"phylabel,omitempty"`
	// The hardware bus address. The key to this map can be of the following
	// (case-insensitive) values:
	// "pcilong": the address is a PCI id of the form 0000:02:00.0
	// "ifname": the addresss is a string for a network interface like "eth1"
	// "serial": the address is a Linux serial port alias such as "/dev/ttyS2"
	// "irq": the address is a number such as "5". This can be a comma
	//    separated list of integers or even a range of integers. Hence using
	//    a string to address this.
	// "ioports": the address is a string such as "2f8-2ff"
	// If the type is PhyIoNet*, then there needs to be an "ifname" physaddr.
	Phyaddrs map[string]string `protobuf:"bytes,3,rep,name=phyaddrs,proto3" json:"phyaddrs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// logicallabel - provides the ability to model designer to refer
	//    the physicalIO port to using more friendly name
	// For example Eth0->Mgmt0
	//  or USBA->ConfigDiskA etc
	Logicallabel string `protobuf:"bytes,4,opt,name=logicallabel,proto3" json:"logicallabel,omitempty"`
	// assigngrp
	// Assignment Group, is unique label that is applied across PhysicalIOs
	// EntireGroup can be assigned to application or nothing at all
	//
	// This is the name used in AppInstanceConfig.adapters to assign an
	// adapter to an application.
	//
	// If assigngrp is not set, the Adapter cannot be assigned to any
	// application. One example is, when the adapter is on the same Pci
	// bus as another device required by Dom0.
	//
	// Even if there is only one device on the its PCIBus, the assignGrp Must
	// be set.
	Assigngrp string `protobuf:"bytes,5,opt,name=assigngrp,proto3" json:"assigngrp,omitempty"`
	// usage - indicates the role of adapter ( mgmt / blocked / app-direct
	//    etc. )
	Usage common.PhyIoMemberUsage `protobuf:"varint,6,opt,name=usage,proto3,enum=PhyIoMemberUsage" json:"usage,omitempty"`
	// usagePolicy - Policy Object used to further refine the usage.
	// For example, specify if this should be only used as fallback?
	//    Or used as the primary uplink? Allow App traffic? restrict
	//    app traffic?? etc..
	UsagePolicy *PhyIOUsagePolicy `protobuf:"bytes,7,opt,name=usagePolicy,proto3" json:"usagePolicy,omitempty"`
	// physical and logical attributes
	//    For example in WWAN to which firmware version to laod etc
	Cbattr               map[string]string `protobuf:"bytes,8,rep,name=cbattr,proto3" json:"cbattr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PhysicalIO) Reset()         { *m = PhysicalIO{} }
func (m *PhysicalIO) String() string { return proto.CompactTextString(m) }
func (*PhysicalIO) ProtoMessage()    {}
func (*PhysicalIO) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac2ef1f6bdd3fcc4, []int{3}
}

func (m *PhysicalIO) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalIO.Unmarshal(m, b)
}
func (m *PhysicalIO) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalIO.Marshal(b, m, deterministic)
}
func (m *PhysicalIO) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalIO.Merge(m, src)
}
func (m *PhysicalIO) XXX_Size() int {
	return xxx_messageInfo_PhysicalIO.Size(m)
}
func (m *PhysicalIO) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalIO.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalIO proto.InternalMessageInfo

func (m *PhysicalIO) GetPtype() common.PhyIoType {
	if m != nil {
		return m.Ptype
	}
	return common.PhyIoType_PhyIoNoop
}

func (m *PhysicalIO) GetPhylabel() string {
	if m != nil {
		return m.Phylabel
	}
	return ""
}

func (m *PhysicalIO) GetPhyaddrs() map[string]string {
	if m != nil {
		return m.Phyaddrs
	}
	return nil
}

func (m *PhysicalIO) GetLogicallabel() string {
	if m != nil {
		return m.Logicallabel
	}
	return ""
}

func (m *PhysicalIO) GetAssigngrp() string {
	if m != nil {
		return m.Assigngrp
	}
	return ""
}

func (m *PhysicalIO) GetUsage() common.PhyIoMemberUsage {
	if m != nil {
		return m.Usage
	}
	return common.PhyIoMemberUsage_PhyIoUsageNone
}

func (m *PhysicalIO) GetUsagePolicy() *PhyIOUsagePolicy {
	if m != nil {
		return m.UsagePolicy
	}
	return nil
}

func (m *PhysicalIO) GetCbattr() map[string]string {
	if m != nil {
		return m.Cbattr
	}
	return nil
}

func init() {
	proto.RegisterEnum("SWAdapterType", SWAdapterType_name, SWAdapterType_value)
	proto.RegisterType((*SWAdapterParams)(nil), "sWAdapterParams")
	proto.RegisterType((*SystemAdapter)(nil), "SystemAdapter")
	proto.RegisterType((*PhyIOUsagePolicy)(nil), "PhyIOUsagePolicy")
	proto.RegisterType((*PhysicalIO)(nil), "PhysicalIO")
	proto.RegisterMapType((map[string]string)(nil), "PhysicalIO.CbattrEntry")
	proto.RegisterMapType((map[string]string)(nil), "PhysicalIO.PhyaddrsEntry")
}

func init() {
	proto.RegisterFile("config/devmodel.proto", fileDescriptor_ac2ef1f6bdd3fcc4)
}

var fileDescriptor_ac2ef1f6bdd3fcc4 = []byte{
	// 614 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0x4d, 0x13, 0x92, 0x09, 0x29, 0xe9, 0x8a, 0x0f, 0x13, 0x10, 0x58, 0x51, 0x05, 0x51,
	0x05, 0xb6, 0xd4, 0x0a, 0x89, 0x8f, 0x53, 0x4b, 0xab, 0x2a, 0x52, 0x49, 0x22, 0x43, 0x40, 0xe2,
	0x80, 0xb4, 0xf1, 0x4e, 0x1c, 0x2b, 0x6b, 0xaf, 0xb5, 0xb6, 0x53, 0x99, 0xbf, 0xc2, 0x3f, 0xe2,
	0xc2, 0x5f, 0x42, 0xbb, 0x6b, 0x25, 0x69, 0x7b, 0xe2, 0x36, 0xf3, 0xde, 0x64, 0xe6, 0xcd, 0x1b,
	0x6f, 0xe0, 0x61, 0x20, 0x92, 0x79, 0x14, 0x7a, 0x0c, 0x57, 0xb1, 0x60, 0xc8, 0xdd, 0x54, 0x8a,
	0x5c, 0xf4, 0x9e, 0x06, 0x22, 0x8e, 0x45, 0xb2, 0x86, 0x4d, 0x6a, 0xc8, 0xfe, 0x6f, 0x0b, 0xee,
	0x67, 0xdf, 0x4f, 0x18, 0x4d, 0x73, 0x94, 0x13, 0x2a, 0x69, 0x9c, 0x91, 0x03, 0xa8, 0xd3, 0xaf,
	0x65, 0x8a, 0xb6, 0xe5, 0x58, 0x83, 0xbd, 0xa3, 0x3d, 0x77, 0x5d, 0xa0, 0x50, 0xdf, 0x90, 0xe4,
	0x35, 0xec, 0x17, 0x09, 0x43, 0xc9, 0x69, 0x39, 0x4c, 0x72, 0x94, 0x73, 0x1a, 0xa0, 0xdd, 0x74,
	0xac, 0x41, 0xcb, 0xbf, 0x4d, 0x90, 0x47, 0xd0, 0x58, 0x71, 0x9a, 0x0c, 0x99, 0xdd, 0x72, 0xac,
	0x41, 0xc7, 0xaf, 0x32, 0xf2, 0x0c, 0x5a, 0x33, 0x91, 0xb0, 0x50, 0x8a, 0x22, 0xb5, 0xc1, 0xa9,
	0x0d, 0x5a, 0xfe, 0x06, 0xe8, 0xff, 0xb5, 0xa0, 0xf3, 0xa5, 0xcc, 0x72, 0x8c, 0x2b, 0x01, 0x84,
	0xc0, 0x6e, 0x42, 0x63, 0x23, 0xad, 0xe5, 0xeb, 0x98, 0x3c, 0x07, 0x98, 0x4b, 0xc4, 0x69, 0xca,
	0xa3, 0x64, 0x69, 0xef, 0x38, 0xd6, 0xa0, 0xe9, 0x6f, 0x21, 0x6a, 0x76, 0x61, 0xb8, 0x9a, 0xe6,
	0xaa, 0x8c, 0x38, 0xd0, 0x4e, 0x30, 0xbf, 0x12, 0x72, 0x39, 0x9d, 0x0e, 0xcf, 0xec, 0x5d, 0xdd,
	0x72, 0x1b, 0x52, 0xd3, 0x28, 0x63, 0xd2, 0xae, 0x9b, 0x69, 0x2a, 0x26, 0x0f, 0xa0, 0x4e, 0x79,
	0x44, 0x33, 0xfb, 0xae, 0x06, 0x4d, 0x42, 0x5e, 0xc2, 0x1e, 0x17, 0x57, 0x28, 0x2f, 0x69, 0x89,
	0x72, 0xa4, 0x14, 0x1a, 0x2b, 0x6e, 0xa0, 0xfd, 0x9f, 0xd0, 0x9d, 0x2c, 0xca, 0xe1, 0x78, 0x9a,
	0xd1, 0x10, 0x27, 0x82, 0x47, 0x41, 0x79, 0x43, 0xbf, 0x75, 0x4b, 0xff, 0x21, 0x74, 0xe7, 0x94,
	0xf3, 0x53, 0x1a, 0x2c, 0x27, 0x32, 0x12, 0x32, 0xca, 0x4b, 0xbd, 0x65, 0xc7, 0xbf, 0x85, 0xf7,
	0xff, 0xd4, 0x00, 0x26, 0x8b, 0x32, 0x8b, 0x02, 0xca, 0x87, 0x63, 0xe2, 0x40, 0x3d, 0xcd, 0x37,
	0xa7, 0x04, 0x57, 0x0d, 0x17, 0xe6, 0x8c, 0x9a, 0x20, 0x3d, 0x68, 0xa6, 0x8b, 0x92, 0xd3, 0x19,
	0x72, 0xdd, 0xb4, 0xe5, 0xaf, 0x73, 0xf2, 0x56, 0x73, 0x6a, 0xeb, 0xcc, 0xae, 0x39, 0xb5, 0x41,
	0xfb, 0xe8, 0x89, 0xbb, 0x69, 0xae, 0x42, 0xcd, 0x9d, 0x27, 0xb9, 0x2c, 0xfd, 0x75, 0x29, 0xe9,
	0xc3, 0x3d, 0x2e, 0x42, 0x55, 0x64, 0xda, 0x1a, 0x63, 0xaf, 0x61, 0xea, 0xee, 0x34, 0xcb, 0xa2,
	0x30, 0x09, 0x65, 0x5a, 0xd9, 0xbb, 0x01, 0xc8, 0x2b, 0xa8, 0x17, 0xca, 0x20, 0xbb, 0xa1, 0x65,
	0xef, 0x1b, 0xd9, 0x9f, 0x31, 0x9e, 0xa1, 0xd4, 0xce, 0xf9, 0x86, 0x27, 0xc7, 0xd0, 0x2e, 0x36,
	0x4e, 0xea, 0x93, 0xb4, 0xab, 0xf2, 0x6d, 0x8b, 0xfd, 0xed, 0x2a, 0xe2, 0x41, 0x23, 0x98, 0xd1,
	0x3c, 0x97, 0x76, 0x53, 0x2f, 0xf5, 0x78, 0x7b, 0xa9, 0x4f, 0x9a, 0x31, 0x2b, 0x55, 0x65, 0xbd,
	0x8f, 0xd0, 0xb9, 0xb6, 0x2b, 0xe9, 0x42, 0x6d, 0x89, 0x65, 0xf5, 0x11, 0xaa, 0x50, 0x7d, 0x15,
	0x2b, 0xca, 0x0b, 0xac, 0x3c, 0x34, 0xc9, 0x87, 0x9d, 0x77, 0x56, 0xef, 0x3d, 0xb4, 0xb7, 0x7a,
	0xfe, 0xcf, 0x4f, 0x0f, 0x3d, 0xe8, 0x5c, 0x7b, 0x7a, 0x04, 0xa0, 0x31, 0xbc, 0x18, 0x8d, 0xfd,
	0xf3, 0xee, 0x1d, 0xd2, 0x84, 0xdd, 0x6f, 0x97, 0x27, 0xa3, 0xae, 0xa5, 0xa2, 0xd3, 0xf1, 0xe8,
	0xac, 0xbb, 0x73, 0x7a, 0x01, 0x2f, 0x02, 0x11, 0xbb, 0xbf, 0x90, 0x21, 0xa3, 0x6e, 0xc0, 0x45,
	0xc1, 0xdc, 0x22, 0x43, 0xb9, 0x8a, 0x02, 0x34, 0x0f, 0xfe, 0xc7, 0x41, 0x18, 0xe5, 0x8b, 0x62,
	0xe6, 0x06, 0x22, 0xf6, 0xf8, 0xfc, 0x0d, 0xb2, 0x10, 0x3d, 0x5c, 0xa1, 0x47, 0xd3, 0xc8, 0x0b,
	0x85, 0x67, 0xfe, 0x42, 0x66, 0x0d, 0x5d, 0x7c, 0xfc, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xa6,
	0x64, 0x0c, 0x53, 0x04, 0x00, 0x00,
}
