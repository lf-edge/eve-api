// Code generated by protoc-gen-go. DO NOT EDIT.
// source: netconfig.proto

package config

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NetworkConfig struct {
	Id   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type NetworkType `protobuf:"varint,5,opt,name=type,proto3,enum=NetworkType" json:"type,omitempty"`
	// network ip specification
	Ip  *Ipspec               `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
	Dns []*ZnetStaticDNSEntry `protobuf:"bytes,7,rep,name=dns,proto3" json:"dns,omitempty"`
	// enterprise proxy
	EntProxy             *ProxyConfig `protobuf:"bytes,8,opt,name=entProxy,proto3" json:"entProxy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *NetworkConfig) Reset()         { *m = NetworkConfig{} }
func (m *NetworkConfig) String() string { return proto.CompactTextString(m) }
func (*NetworkConfig) ProtoMessage()    {}
func (*NetworkConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_5aa19e8dfa9a5274, []int{0}
}

func (m *NetworkConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkConfig.Unmarshal(m, b)
}
func (m *NetworkConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkConfig.Marshal(b, m, deterministic)
}
func (m *NetworkConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkConfig.Merge(m, src)
}
func (m *NetworkConfig) XXX_Size() int {
	return xxx_messageInfo_NetworkConfig.Size(m)
}
func (m *NetworkConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkConfig.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkConfig proto.InternalMessageInfo

func (m *NetworkConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NetworkConfig) GetType() NetworkType {
	if m != nil {
		return m.Type
	}
	return NetworkType_NETWORKTYPENOOP
}

func (m *NetworkConfig) GetIp() *Ipspec {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *NetworkConfig) GetDns() []*ZnetStaticDNSEntry {
	if m != nil {
		return m.Dns
	}
	return nil
}

func (m *NetworkConfig) GetEntProxy() *ProxyConfig {
	if m != nil {
		return m.EntProxy
	}
	return nil
}

type NetworkAdapter struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NetworkId string `protobuf:"bytes,3,opt,name=networkId,proto3" json:"networkId,omitempty"`
	Addr      string `protobuf:"bytes,4,opt,name=addr,proto3" json:"addr,omitempty"`
	Hostname  string `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// more configuration for getting addr/EID
	CryptoEid     string `protobuf:"bytes,10,opt,name=cryptoEid,proto3" json:"cryptoEid,omitempty"`
	Lispsignature string `protobuf:"bytes,6,opt,name=lispsignature,proto3" json:"lispsignature,omitempty"`
	Pemcert       []byte `protobuf:"bytes,7,opt,name=pemcert,proto3" json:"pemcert,omitempty"`
	Pemprivatekey []byte `protobuf:"bytes,8,opt,name=pemprivatekey,proto3" json:"pemprivatekey,omitempty"`
	// Used in case of P2V, where we want to specify a macAddress
	// to vif, that is simulated towards app
	MacAddress string `protobuf:"bytes,9,opt,name=macAddress,proto3" json:"macAddress,omitempty"`
	// firewall
	Acls                 []*ACE   `protobuf:"bytes,40,rep,name=acls,proto3" json:"acls,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkAdapter) Reset()         { *m = NetworkAdapter{} }
func (m *NetworkAdapter) String() string { return proto.CompactTextString(m) }
func (*NetworkAdapter) ProtoMessage()    {}
func (*NetworkAdapter) Descriptor() ([]byte, []int) {
	return fileDescriptor_5aa19e8dfa9a5274, []int{1}
}

func (m *NetworkAdapter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkAdapter.Unmarshal(m, b)
}
func (m *NetworkAdapter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkAdapter.Marshal(b, m, deterministic)
}
func (m *NetworkAdapter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkAdapter.Merge(m, src)
}
func (m *NetworkAdapter) XXX_Size() int {
	return xxx_messageInfo_NetworkAdapter.Size(m)
}
func (m *NetworkAdapter) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkAdapter.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkAdapter proto.InternalMessageInfo

func (m *NetworkAdapter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkAdapter) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *NetworkAdapter) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *NetworkAdapter) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *NetworkAdapter) GetCryptoEid() string {
	if m != nil {
		return m.CryptoEid
	}
	return ""
}

func (m *NetworkAdapter) GetLispsignature() string {
	if m != nil {
		return m.Lispsignature
	}
	return ""
}

func (m *NetworkAdapter) GetPemcert() []byte {
	if m != nil {
		return m.Pemcert
	}
	return nil
}

func (m *NetworkAdapter) GetPemprivatekey() []byte {
	if m != nil {
		return m.Pemprivatekey
	}
	return nil
}

func (m *NetworkAdapter) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *NetworkAdapter) GetAcls() []*ACE {
	if m != nil {
		return m.Acls
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkConfig)(nil), "NetworkConfig")
	proto.RegisterType((*NetworkAdapter)(nil), "NetworkAdapter")
}

func init() { proto.RegisterFile("netconfig.proto", fileDescriptor_5aa19e8dfa9a5274) }

var fileDescriptor_5aa19e8dfa9a5274 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x52, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xd6, 0x6e, 0xb6, 0x4d, 0x32, 0xdd, 0x06, 0xc9, 0x1c, 0xb0, 0x2a, 0x04, 0xab, 0xaa, 0x48,
	0x7b, 0xc1, 0x2b, 0x85, 0x27, 0x08, 0x25, 0x42, 0x5c, 0x2a, 0xe4, 0x72, 0xea, 0xcd, 0xb5, 0x27,
	0x5b, 0xab, 0x59, 0xdb, 0xb2, 0x9d, 0x94, 0xe5, 0x95, 0xb8, 0xf0, 0x88, 0x68, 0xbd, 0x21, 0xb4,
	0xb7, 0xf9, 0x7e, 0xe6, 0x9b, 0xd1, 0x68, 0xe0, 0x95, 0xc1, 0x28, 0xad, 0xd9, 0xe8, 0x96, 0x39,
	0x6f, 0xa3, 0xbd, 0x98, 0x6d, 0x9e, 0x0e, 0x55, 0x39, 0x48, 0x9d, 0x19, 0xd1, 0xe5, 0xef, 0x0c,
	0xce, 0x6f, 0x30, 0x3e, 0x59, 0xff, 0x78, 0x9d, 0xfc, 0x64, 0x01, 0xb9, 0x56, 0x34, 0xab, 0xb2,
	0x7a, 0xce, 0x73, 0xad, 0x48, 0x05, 0x45, 0xec, 0x1d, 0xd2, 0x93, 0x2a, 0xab, 0x17, 0xcb, 0x92,
	0x1d, 0xdc, 0x3f, 0x7a, 0x87, 0x3c, 0x29, 0xe4, 0x0d, 0xe4, 0xda, 0xd1, 0xd3, 0x2a, 0xab, 0xcf,
	0x96, 0x53, 0xa6, 0x5d, 0x70, 0x28, 0x79, 0xae, 0x1d, 0xf9, 0x00, 0x13, 0x65, 0x02, 0x9d, 0x56,
	0x93, 0xfa, 0x6c, 0xf9, 0x9a, 0xdd, 0x19, 0x8c, 0xb7, 0x51, 0x44, 0x2d, 0xbf, 0xdc, 0xdc, 0xae,
	0x4d, 0xf4, 0x3d, 0x1f, 0x74, 0x52, 0xc3, 0x0c, 0x4d, 0xfc, 0xee, 0xed, 0xcf, 0x9e, 0xce, 0x52,
	0x4a, 0xc9, 0x12, 0x1a, 0x37, 0xe2, 0x47, 0xf5, 0xf2, 0x4f, 0x0e, 0x8b, 0xc3, 0xfc, 0x95, 0x12,
	0x2e, 0xa2, 0x27, 0x04, 0x0a, 0x23, 0x3a, 0x3c, 0x2c, 0x9c, 0x6a, 0xf2, 0x16, 0xe6, 0x66, 0x74,
	0x7d, 0x53, 0x74, 0x92, 0x84, 0xff, 0xc4, 0xd0, 0x21, 0x94, 0xf2, 0xb4, 0x18, 0x3b, 0x86, 0x9a,
	0x5c, 0xc0, 0xec, 0xc1, 0x86, 0x98, 0x92, 0x4e, 0x12, 0x7f, 0xc4, 0x43, 0x9a, 0xf4, 0xbd, 0x8b,
	0x76, 0xad, 0x15, 0x85, 0x31, 0xed, 0x48, 0x90, 0x2b, 0x38, 0xdf, 0xea, 0xe0, 0x82, 0x6e, 0x8d,
	0x88, 0x3b, 0x8f, 0xe9, 0x0e, 0x73, 0xfe, 0x92, 0x24, 0x14, 0xa6, 0x0e, 0x3b, 0x89, 0x3e, 0xd2,
	0x69, 0x95, 0xd5, 0x25, 0xff, 0x07, 0x87, 0x7e, 0x87, 0x9d, 0xf3, 0x7a, 0x2f, 0x22, 0x3e, 0xe2,
	0x78, 0x81, 0x92, 0xbf, 0x24, 0xc9, 0x3b, 0x80, 0x4e, 0xc8, 0x95, 0x52, 0x1e, 0x43, 0xa0, 0xf3,
	0x34, 0xe2, 0x19, 0x43, 0x28, 0x14, 0x42, 0x6e, 0x03, 0xad, 0xd3, 0xa9, 0x0b, 0xb6, 0xba, 0x5e,
	0xf3, 0xc4, 0x7c, 0xfe, 0x0a, 0xef, 0xa5, 0xed, 0xd8, 0x2f, 0x54, 0xa8, 0x04, 0x93, 0x5b, 0xbb,
	0x53, 0x6c, 0x17, 0xd0, 0xef, 0xb5, 0xc4, 0xf1, 0x07, 0xee, 0xae, 0x5a, 0x1d, 0x1f, 0x76, 0xf7,
	0x4c, 0xda, 0xae, 0xd9, 0x6e, 0x3e, 0xa2, 0x6a, 0xb1, 0xc1, 0x3d, 0x36, 0xc2, 0xe9, 0xa6, 0xb5,
	0xcd, 0xf8, 0x47, 0xf7, 0xa7, 0xc9, 0xfc, 0xe9, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x29,
	0x85, 0x93, 0x5b, 0x02, 0x00, 0x00,
}
