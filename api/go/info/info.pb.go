// Code generated by protoc-gen-go. DO NOT EDIT.
// source: info.proto

package info

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Remove Me
type DepMetricItemType int32

const (
	DepMetricItemType_DepMetricItemOther   DepMetricItemType = 0
	DepMetricItemType_DepMetricItemGauge   DepMetricItemType = 1
	DepMetricItemType_DepMetricItemCounter DepMetricItemType = 2
	DepMetricItemType_DepMetricItemState   DepMetricItemType = 3
)

var DepMetricItemType_name = map[int32]string{
	0: "DepMetricItemOther",
	1: "DepMetricItemGauge",
	2: "DepMetricItemCounter",
	3: "DepMetricItemState",
}

var DepMetricItemType_value = map[string]int32{
	"DepMetricItemOther":   0,
	"DepMetricItemGauge":   1,
	"DepMetricItemCounter": 2,
	"DepMetricItemState":   3,
}

func (x DepMetricItemType) String() string {
	return proto.EnumName(DepMetricItemType_name, int32(x))
}

func (DepMetricItemType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{0}
}

//
// Broadly there are two types
// Info : information that is discovered/rarely changes
// Metrics: information that gets updated periodically
// Protobuf definitions in this file follow the convention.
type ZInfoTypes int32

const (
	ZInfoTypes_ZiNop    ZInfoTypes = 0
	ZInfoTypes_ZiDevice ZInfoTypes = 1
	// ZiHypervisor = 2;	// Deprecated
	ZInfoTypes_ZiApp             ZInfoTypes = 3
	ZInfoTypes_ZiService         ZInfoTypes = 4
	ZInfoTypes_ZiNetworkObject   ZInfoTypes = 5
	ZInfoTypes_ZiNetworkInstance ZInfoTypes = 6
)

var ZInfoTypes_name = map[int32]string{
	0: "ZiNop",
	1: "ZiDevice",
	3: "ZiApp",
	4: "ZiService",
	5: "ZiNetworkObject",
	6: "ZiNetworkInstance",
}

var ZInfoTypes_value = map[string]int32{
	"ZiNop":             0,
	"ZiDevice":          1,
	"ZiApp":             3,
	"ZiService":         4,
	"ZiNetworkObject":   5,
	"ZiNetworkInstance": 6,
}

func (x ZInfoTypes) String() string {
	return proto.EnumName(ZInfoTypes_name, int32(x))
}

func (ZInfoTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{1}
}

// XXX duplicate of definition in appconfig.proto
// Types of I/O adapters that can be assigned to applications
type ZioType int32

const (
	ZioType_ZioNop   ZioType = 0
	ZioType_ZioEth   ZioType = 1
	ZioType_ZioUSB   ZioType = 2
	ZioType_ZioCOM   ZioType = 3
	ZioType_ZioOther ZioType = 255
)

var ZioType_name = map[int32]string{
	0:   "ZioNop",
	1:   "ZioEth",
	2:   "ZioUSB",
	3:   "ZioCOM",
	255: "ZioOther",
}

var ZioType_value = map[string]int32{
	"ZioNop":   0,
	"ZioEth":   1,
	"ZioUSB":   2,
	"ZioCOM":   3,
	"ZioOther": 255,
}

func (x ZioType) String() string {
	return proto.EnumName(ZioType_name, int32(x))
}

func (ZioType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{2}
}

// Deprecate since we can't determine it on the device
type ZPeripheralTypes int32

const (
	ZPeripheralTypes_ZpNone    ZPeripheralTypes = 0
	ZPeripheralTypes_ZpStorage ZPeripheralTypes = 1
	ZPeripheralTypes_ZpNetwork ZPeripheralTypes = 2
)

var ZPeripheralTypes_name = map[int32]string{
	0: "ZpNone",
	1: "ZpStorage",
	2: "ZpNetwork",
}

var ZPeripheralTypes_value = map[string]int32{
	"ZpNone":    0,
	"ZpStorage": 1,
	"ZpNetwork": 2,
}

func (x ZPeripheralTypes) String() string {
	return proto.EnumName(ZPeripheralTypes_name, int32(x))
}

func (ZPeripheralTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{3}
}

// Enum names from OMA-TS-LWM2M_SwMgmt-V1_0-20151201-C
type ZSwState int32

const (
	ZSwState_INVALID          ZSwState = 0
	ZSwState_INITIAL          ZSwState = 1
	ZSwState_DOWNLOAD_STARTED ZSwState = 2
	ZSwState_DOWNLOADED       ZSwState = 3
	ZSwState_DELIVERED        ZSwState = 4
	ZSwState_INSTALLED        ZSwState = 5
	ZSwState_BOOTING          ZSwState = 6
	ZSwState_RUNNING          ZSwState = 7
	ZSwState_HALTING          ZSwState = 8
	ZSwState_HALTED           ZSwState = 9
	ZSwState_RESTARTING       ZSwState = 10
	ZSwState_PURGING          ZSwState = 11
)

var ZSwState_name = map[int32]string{
	0:  "INVALID",
	1:  "INITIAL",
	2:  "DOWNLOAD_STARTED",
	3:  "DOWNLOADED",
	4:  "DELIVERED",
	5:  "INSTALLED",
	6:  "BOOTING",
	7:  "RUNNING",
	8:  "HALTING",
	9:  "HALTED",
	10: "RESTARTING",
	11: "PURGING",
}

var ZSwState_value = map[string]int32{
	"INVALID":          0,
	"INITIAL":          1,
	"DOWNLOAD_STARTED": 2,
	"DOWNLOADED":       3,
	"DELIVERED":        4,
	"INSTALLED":        5,
	"BOOTING":          6,
	"RUNNING":          7,
	"HALTING":          8,
	"HALTED":           9,
	"RESTARTING":       10,
	"PURGING":          11,
}

func (x ZSwState) String() string {
	return proto.EnumName(ZSwState_name, int32(x))
}

func (ZSwState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{4}
}

type HwSecurityModuleStatus int32

const (
	HwSecurityModuleStatus_UNKNOWN  HwSecurityModuleStatus = 0
	HwSecurityModuleStatus_NOTFOUND HwSecurityModuleStatus = 1
	HwSecurityModuleStatus_DISABLED HwSecurityModuleStatus = 2
	HwSecurityModuleStatus_ENABLED  HwSecurityModuleStatus = 3
)

var HwSecurityModuleStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "NOTFOUND",
	2: "DISABLED",
	3: "ENABLED",
}

var HwSecurityModuleStatus_value = map[string]int32{
	"UNKNOWN":  0,
	"NOTFOUND": 1,
	"DISABLED": 2,
	"ENABLED":  3,
}

func (x HwSecurityModuleStatus) String() string {
	return proto.EnumName(HwSecurityModuleStatus_name, int32(x))
}

func (HwSecurityModuleStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{5}
}

type BaseOsStatus int32

const (
	BaseOsStatus_NONE          BaseOsStatus = 0
	BaseOsStatus_DOWNLOADING   BaseOsStatus = 1
	BaseOsStatus_DOWNLOAD_DONE BaseOsStatus = 2
	BaseOsStatus_UPDATING      BaseOsStatus = 3
	// whether it is rebooting, or testing
	BaseOsStatus_UPDATED  BaseOsStatus = 4
	BaseOsStatus_FALLBACK BaseOsStatus = 5
	BaseOsStatus_FAILED   BaseOsStatus = 6
)

var BaseOsStatus_name = map[int32]string{
	0: "NONE",
	1: "DOWNLOADING",
	2: "DOWNLOAD_DONE",
	3: "UPDATING",
	4: "UPDATED",
	5: "FALLBACK",
	6: "FAILED",
}

var BaseOsStatus_value = map[string]int32{
	"NONE":          0,
	"DOWNLOADING":   1,
	"DOWNLOAD_DONE": 2,
	"UPDATING":      3,
	"UPDATED":       4,
	"FALLBACK":      5,
	"FAILED":        6,
}

func (x BaseOsStatus) String() string {
	return proto.EnumName(BaseOsStatus_name, int32(x))
}

func (BaseOsStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{6}
}

type BaseOsSubStatus int32

const (
	BaseOsSubStatus_NONE_SUBSTATUS           BaseOsSubStatus = 0
	BaseOsSubStatus_DOWNLOAD_INPROGRESS      BaseOsSubStatus = 1
	BaseOsSubStatus_VERIFY_INPROGRESS        BaseOsSubStatus = 2
	BaseOsSubStatus_UPDATE_INITIALIZING      BaseOsSubStatus = 3
	BaseOsSubStatus_UPDATE_REBOOTING         BaseOsSubStatus = 4
	BaseOsSubStatus_UPDATE_TESTING           BaseOsSubStatus = 5
	BaseOsSubStatus_UPDATE_NEED_TEST_CONFIRM BaseOsSubStatus = 6
)

var BaseOsSubStatus_name = map[int32]string{
	0: "NONE_SUBSTATUS",
	1: "DOWNLOAD_INPROGRESS",
	2: "VERIFY_INPROGRESS",
	3: "UPDATE_INITIALIZING",
	4: "UPDATE_REBOOTING",
	5: "UPDATE_TESTING",
	6: "UPDATE_NEED_TEST_CONFIRM",
}

var BaseOsSubStatus_value = map[string]int32{
	"NONE_SUBSTATUS":           0,
	"DOWNLOAD_INPROGRESS":      1,
	"VERIFY_INPROGRESS":        2,
	"UPDATE_INITIALIZING":      3,
	"UPDATE_REBOOTING":         4,
	"UPDATE_TESTING":           5,
	"UPDATE_NEED_TEST_CONFIRM": 6,
}

func (x BaseOsSubStatus) String() string {
	return proto.EnumName(BaseOsSubStatus_name, int32(x))
}

func (BaseOsSubStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{7}
}

// ipSec state information
type ZInfoVpnState int32

const (
	ZInfoVpnState_VPN_INVALID     ZInfoVpnState = 0
	ZInfoVpnState_VPN_INITIAL     ZInfoVpnState = 1
	ZInfoVpnState_VPN_CONNECTING  ZInfoVpnState = 2
	ZInfoVpnState_VPN_ESTABLISHED ZInfoVpnState = 3
	ZInfoVpnState_VPN_INSTALLED   ZInfoVpnState = 4
	ZInfoVpnState_VPN_REKEYED     ZInfoVpnState = 5
	ZInfoVpnState_VPN_DELETED     ZInfoVpnState = 10
)

var ZInfoVpnState_name = map[int32]string{
	0:  "VPN_INVALID",
	1:  "VPN_INITIAL",
	2:  "VPN_CONNECTING",
	3:  "VPN_ESTABLISHED",
	4:  "VPN_INSTALLED",
	5:  "VPN_REKEYED",
	10: "VPN_DELETED",
}

var ZInfoVpnState_value = map[string]int32{
	"VPN_INVALID":     0,
	"VPN_INITIAL":     1,
	"VPN_CONNECTING":  2,
	"VPN_ESTABLISHED": 3,
	"VPN_INSTALLED":   4,
	"VPN_REKEYED":     5,
	"VPN_DELETED":     10,
}

func (x ZInfoVpnState) String() string {
	return proto.EnumName(ZInfoVpnState_name, int32(x))
}

func (ZInfoVpnState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{8}
}

// Open-ended metrics from different part of the device such as LTE modem
// metrics.
type DeprecatedMetricItem struct {
	Key  string            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Type DepMetricItemType `protobuf:"varint,2,opt,name=type,proto3,enum=DepMetricItemType" json:"type,omitempty"`
	// Types that are valid to be assigned to MetricItemValue:
	//	*DeprecatedMetricItem_BoolValue
	//	*DeprecatedMetricItem_Uint32Value
	//	*DeprecatedMetricItem_Uint64Value
	//	*DeprecatedMetricItem_FloatValue
	//	*DeprecatedMetricItem_StringValue
	MetricItemValue      isDeprecatedMetricItem_MetricItemValue `protobuf_oneof:"metricItemValue"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *DeprecatedMetricItem) Reset()         { *m = DeprecatedMetricItem{} }
func (m *DeprecatedMetricItem) String() string { return proto.CompactTextString(m) }
func (*DeprecatedMetricItem) ProtoMessage()    {}
func (*DeprecatedMetricItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{0}
}

func (m *DeprecatedMetricItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeprecatedMetricItem.Unmarshal(m, b)
}
func (m *DeprecatedMetricItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeprecatedMetricItem.Marshal(b, m, deterministic)
}
func (m *DeprecatedMetricItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeprecatedMetricItem.Merge(m, src)
}
func (m *DeprecatedMetricItem) XXX_Size() int {
	return xxx_messageInfo_DeprecatedMetricItem.Size(m)
}
func (m *DeprecatedMetricItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DeprecatedMetricItem.DiscardUnknown(m)
}

var xxx_messageInfo_DeprecatedMetricItem proto.InternalMessageInfo

func (m *DeprecatedMetricItem) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DeprecatedMetricItem) GetType() DepMetricItemType {
	if m != nil {
		return m.Type
	}
	return DepMetricItemType_DepMetricItemOther
}

type isDeprecatedMetricItem_MetricItemValue interface {
	isDeprecatedMetricItem_MetricItemValue()
}

type DeprecatedMetricItem_BoolValue struct {
	BoolValue bool `protobuf:"varint,3,opt,name=boolValue,proto3,oneof"`
}

type DeprecatedMetricItem_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,4,opt,name=uint32Value,proto3,oneof"`
}

type DeprecatedMetricItem_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,5,opt,name=uint64Value,proto3,oneof"`
}

type DeprecatedMetricItem_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,6,opt,name=floatValue,proto3,oneof"`
}

type DeprecatedMetricItem_StringValue struct {
	StringValue string `protobuf:"bytes,7,opt,name=stringValue,proto3,oneof"`
}

func (*DeprecatedMetricItem_BoolValue) isDeprecatedMetricItem_MetricItemValue() {}

func (*DeprecatedMetricItem_Uint32Value) isDeprecatedMetricItem_MetricItemValue() {}

func (*DeprecatedMetricItem_Uint64Value) isDeprecatedMetricItem_MetricItemValue() {}

func (*DeprecatedMetricItem_FloatValue) isDeprecatedMetricItem_MetricItemValue() {}

func (*DeprecatedMetricItem_StringValue) isDeprecatedMetricItem_MetricItemValue() {}

func (m *DeprecatedMetricItem) GetMetricItemValue() isDeprecatedMetricItem_MetricItemValue {
	if m != nil {
		return m.MetricItemValue
	}
	return nil
}

func (m *DeprecatedMetricItem) GetBoolValue() bool {
	if x, ok := m.GetMetricItemValue().(*DeprecatedMetricItem_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *DeprecatedMetricItem) GetUint32Value() uint32 {
	if x, ok := m.GetMetricItemValue().(*DeprecatedMetricItem_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (m *DeprecatedMetricItem) GetUint64Value() uint64 {
	if x, ok := m.GetMetricItemValue().(*DeprecatedMetricItem_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (m *DeprecatedMetricItem) GetFloatValue() float32 {
	if x, ok := m.GetMetricItemValue().(*DeprecatedMetricItem_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (m *DeprecatedMetricItem) GetStringValue() string {
	if x, ok := m.GetMetricItemValue().(*DeprecatedMetricItem_StringValue); ok {
		return x.StringValue
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DeprecatedMetricItem) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DeprecatedMetricItem_BoolValue)(nil),
		(*DeprecatedMetricItem_Uint32Value)(nil),
		(*DeprecatedMetricItem_Uint64Value)(nil),
		(*DeprecatedMetricItem_FloatValue)(nil),
		(*DeprecatedMetricItem_StringValue)(nil),
	}
}

// Map from MAC to IP addresses
type ZmetIPAssignmentEntry struct {
	MacAddress           string   `protobuf:"bytes,1,opt,name=macAddress,proto3" json:"macAddress,omitempty"`
	IpAddress            []string `protobuf:"bytes,2,rep,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZmetIPAssignmentEntry) Reset()         { *m = ZmetIPAssignmentEntry{} }
func (m *ZmetIPAssignmentEntry) String() string { return proto.CompactTextString(m) }
func (*ZmetIPAssignmentEntry) ProtoMessage()    {}
func (*ZmetIPAssignmentEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{1}
}

func (m *ZmetIPAssignmentEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZmetIPAssignmentEntry.Unmarshal(m, b)
}
func (m *ZmetIPAssignmentEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZmetIPAssignmentEntry.Marshal(b, m, deterministic)
}
func (m *ZmetIPAssignmentEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZmetIPAssignmentEntry.Merge(m, src)
}
func (m *ZmetIPAssignmentEntry) XXX_Size() int {
	return xxx_messageInfo_ZmetIPAssignmentEntry.Size(m)
}
func (m *ZmetIPAssignmentEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ZmetIPAssignmentEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ZmetIPAssignmentEntry proto.InternalMessageInfo

func (m *ZmetIPAssignmentEntry) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *ZmetIPAssignmentEntry) GetIpAddress() []string {
	if m != nil {
		return m.IpAddress
	}
	return nil
}

// Map from vifname to other info
type ZmetVifInfo struct {
	VifName              string   `protobuf:"bytes,1,opt,name=vifName,proto3" json:"vifName,omitempty"`
	MacAddress           string   `protobuf:"bytes,2,opt,name=macAddress,proto3" json:"macAddress,omitempty"`
	AppID                string   `protobuf:"bytes,3,opt,name=appID,proto3" json:"appID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZmetVifInfo) Reset()         { *m = ZmetVifInfo{} }
func (m *ZmetVifInfo) String() string { return proto.CompactTextString(m) }
func (*ZmetVifInfo) ProtoMessage()    {}
func (*ZmetVifInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{2}
}

func (m *ZmetVifInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZmetVifInfo.Unmarshal(m, b)
}
func (m *ZmetVifInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZmetVifInfo.Marshal(b, m, deterministic)
}
func (m *ZmetVifInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZmetVifInfo.Merge(m, src)
}
func (m *ZmetVifInfo) XXX_Size() int {
	return xxx_messageInfo_ZmetVifInfo.Size(m)
}
func (m *ZmetVifInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ZmetVifInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ZmetVifInfo proto.InternalMessageInfo

func (m *ZmetVifInfo) GetVifName() string {
	if m != nil {
		return m.VifName
	}
	return ""
}

func (m *ZmetVifInfo) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *ZmetVifInfo) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

// Information about assignable I/O adapter bundles
type ZioBundle struct {
	Type                 ZioType  `protobuf:"varint,1,opt,name=type,proto3,enum=ZioType" json:"type,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Members              []string `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
	UsedByAppUUID        string   `protobuf:"bytes,4,opt,name=usedByAppUUID,proto3" json:"usedByAppUUID,omitempty"`
	UsedByBaseOS         bool     `protobuf:"varint,5,opt,name=usedByBaseOS,proto3" json:"usedByBaseOS,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZioBundle) Reset()         { *m = ZioBundle{} }
func (m *ZioBundle) String() string { return proto.CompactTextString(m) }
func (*ZioBundle) ProtoMessage()    {}
func (*ZioBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{3}
}

func (m *ZioBundle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZioBundle.Unmarshal(m, b)
}
func (m *ZioBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZioBundle.Marshal(b, m, deterministic)
}
func (m *ZioBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZioBundle.Merge(m, src)
}
func (m *ZioBundle) XXX_Size() int {
	return xxx_messageInfo_ZioBundle.Size(m)
}
func (m *ZioBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_ZioBundle.DiscardUnknown(m)
}

var xxx_messageInfo_ZioBundle proto.InternalMessageInfo

func (m *ZioBundle) GetType() ZioType {
	if m != nil {
		return m.Type
	}
	return ZioType_ZioNop
}

func (m *ZioBundle) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ZioBundle) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *ZioBundle) GetUsedByAppUUID() string {
	if m != nil {
		return m.UsedByAppUUID
	}
	return ""
}

func (m *ZioBundle) GetUsedByBaseOS() bool {
	if m != nil {
		return m.UsedByBaseOS
	}
	return false
}

// Manufacturing info, product name, model, version etc.
// From dmidecode/BIOS on Intel
type ZInfoManufacturer struct {
	Manufacturer         string   `protobuf:"bytes,1,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	ProductName          string   `protobuf:"bytes,2,opt,name=productName,proto3" json:"productName,omitempty"`
	Version              string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	SerialNumber         string   `protobuf:"bytes,4,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	UUID                 string   `protobuf:"bytes,5,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Compatible           string   `protobuf:"bytes,6,opt,name=compatible,proto3" json:"compatible,omitempty"`
	BiosVendor           string   `protobuf:"bytes,7,opt,name=biosVendor,proto3" json:"biosVendor,omitempty"`
	BiosVersion          string   `protobuf:"bytes,8,opt,name=biosVersion,proto3" json:"biosVersion,omitempty"`
	BiosReleaseDate      string   `protobuf:"bytes,9,opt,name=biosReleaseDate,proto3" json:"biosReleaseDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZInfoManufacturer) Reset()         { *m = ZInfoManufacturer{} }
func (m *ZInfoManufacturer) String() string { return proto.CompactTextString(m) }
func (*ZInfoManufacturer) ProtoMessage()    {}
func (*ZInfoManufacturer) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{4}
}

func (m *ZInfoManufacturer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZInfoManufacturer.Unmarshal(m, b)
}
func (m *ZInfoManufacturer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZInfoManufacturer.Marshal(b, m, deterministic)
}
func (m *ZInfoManufacturer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZInfoManufacturer.Merge(m, src)
}
func (m *ZInfoManufacturer) XXX_Size() int {
	return xxx_messageInfo_ZInfoManufacturer.Size(m)
}
func (m *ZInfoManufacturer) XXX_DiscardUnknown() {
	xxx_messageInfo_ZInfoManufacturer.DiscardUnknown(m)
}

var xxx_messageInfo_ZInfoManufacturer proto.InternalMessageInfo

func (m *ZInfoManufacturer) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *ZInfoManufacturer) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *ZInfoManufacturer) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ZInfoManufacturer) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *ZInfoManufacturer) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ZInfoManufacturer) GetCompatible() string {
	if m != nil {
		return m.Compatible
	}
	return ""
}

func (m *ZInfoManufacturer) GetBiosVendor() string {
	if m != nil {
		return m.BiosVendor
	}
	return ""
}

func (m *ZInfoManufacturer) GetBiosVersion() string {
	if m != nil {
		return m.BiosVersion
	}
	return ""
}

func (m *ZInfoManufacturer) GetBiosReleaseDate() string {
	if m != nil {
		return m.BiosReleaseDate
	}
	return ""
}

type ZInfoNetwork struct {
	// string IPAddr = 1; // Deprecated. Returning first address for now
	// string gwAddr = 2; // Deprecated; routing is richer than a single gateway
	MacAddr              string       `protobuf:"bytes,3,opt,name=macAddr,proto3" json:"macAddr,omitempty"`
	DevName              string       `protobuf:"bytes,4,opt,name=devName,proto3" json:"devName,omitempty"`
	IPAddrs              []string     `protobuf:"bytes,5,rep,name=IPAddrs,proto3" json:"IPAddrs,omitempty"`
	DefaultRouters       []string     `protobuf:"bytes,6,rep,name=defaultRouters,proto3" json:"defaultRouters,omitempty"`
	Dns                  *ZInfoDNS    `protobuf:"bytes,7,opt,name=dns,proto3" json:"dns,omitempty"`
	Up                   bool         `protobuf:"varint,8,opt,name=up,proto3" json:"up,omitempty"`
	Location             *GeoLoc      `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`
	Uplink               bool         `protobuf:"varint,10,opt,name=uplink,proto3" json:"uplink,omitempty"`
	NetworkErr           *ErrorInfo   `protobuf:"bytes,11,opt,name=networkErr,proto3" json:"networkErr,omitempty"`
	LocalName            string       `protobuf:"bytes,12,opt,name=localName,proto3" json:"localName,omitempty"`
	Proxy                *ProxyStatus `protobuf:"bytes,13,opt,name=proxy,proto3" json:"proxy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ZInfoNetwork) Reset()         { *m = ZInfoNetwork{} }
func (m *ZInfoNetwork) String() string { return proto.CompactTextString(m) }
func (*ZInfoNetwork) ProtoMessage()    {}
func (*ZInfoNetwork) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{5}
}

func (m *ZInfoNetwork) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZInfoNetwork.Unmarshal(m, b)
}
func (m *ZInfoNetwork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZInfoNetwork.Marshal(b, m, deterministic)
}
func (m *ZInfoNetwork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZInfoNetwork.Merge(m, src)
}
func (m *ZInfoNetwork) XXX_Size() int {
	return xxx_messageInfo_ZInfoNetwork.Size(m)
}
func (m *ZInfoNetwork) XXX_DiscardUnknown() {
	xxx_messageInfo_ZInfoNetwork.DiscardUnknown(m)
}

var xxx_messageInfo_ZInfoNetwork proto.InternalMessageInfo

func (m *ZInfoNetwork) GetMacAddr() string {
	if m != nil {
		return m.MacAddr
	}
	return ""
}

func (m *ZInfoNetwork) GetDevName() string {
	if m != nil {
		return m.DevName
	}
	return ""
}

func (m *ZInfoNetwork) GetIPAddrs() []string {
	if m != nil {
		return m.IPAddrs
	}
	return nil
}

func (m *ZInfoNetwork) GetDefaultRouters() []string {
	if m != nil {
		return m.DefaultRouters
	}
	return nil
}

func (m *ZInfoNetwork) GetDns() *ZInfoDNS {
	if m != nil {
		return m.Dns
	}
	return nil
}

func (m *ZInfoNetwork) GetUp() bool {
	if m != nil {
		return m.Up
	}
	return false
}

func (m *ZInfoNetwork) GetLocation() *GeoLoc {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *ZInfoNetwork) GetUplink() bool {
	if m != nil {
		return m.Uplink
	}
	return false
}

func (m *ZInfoNetwork) GetNetworkErr() *ErrorInfo {
	if m != nil {
		return m.NetworkErr
	}
	return nil
}

func (m *ZInfoNetwork) GetLocalName() string {
	if m != nil {
		return m.LocalName
	}
	return ""
}

func (m *ZInfoNetwork) GetProxy() *ProxyStatus {
	if m != nil {
		return m.Proxy
	}
	return nil
}

// From an IP address-based geolocation service
// XXX later define GPS coordinates from device
type GeoLoc struct {
	UnderlayIP           string   `protobuf:"bytes,1,opt,name=UnderlayIP,proto3" json:"UnderlayIP,omitempty"`
	Hostname             string   `protobuf:"bytes,2,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	City                 string   `protobuf:"bytes,3,opt,name=City,proto3" json:"City,omitempty"`
	Region               string   `protobuf:"bytes,4,opt,name=Region,proto3" json:"Region,omitempty"`
	Country              string   `protobuf:"bytes,5,opt,name=Country,proto3" json:"Country,omitempty"`
	Loc                  string   `protobuf:"bytes,6,opt,name=Loc,proto3" json:"Loc,omitempty"`
	Org                  string   `protobuf:"bytes,7,opt,name=Org,proto3" json:"Org,omitempty"`
	Postal               string   `protobuf:"bytes,8,opt,name=Postal,proto3" json:"Postal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeoLoc) Reset()         { *m = GeoLoc{} }
func (m *GeoLoc) String() string { return proto.CompactTextString(m) }
func (*GeoLoc) ProtoMessage()    {}
func (*GeoLoc) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{6}
}

func (m *GeoLoc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeoLoc.Unmarshal(m, b)
}
func (m *GeoLoc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeoLoc.Marshal(b, m, deterministic)
}
func (m *GeoLoc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoLoc.Merge(m, src)
}
func (m *GeoLoc) XXX_Size() int {
	return xxx_messageInfo_GeoLoc.Size(m)
}
func (m *GeoLoc) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoLoc.DiscardUnknown(m)
}

var xxx_messageInfo_GeoLoc proto.InternalMessageInfo

func (m *GeoLoc) GetUnderlayIP() string {
	if m != nil {
		return m.UnderlayIP
	}
	return ""
}

func (m *GeoLoc) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *GeoLoc) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *GeoLoc) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *GeoLoc) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *GeoLoc) GetLoc() string {
	if m != nil {
		return m.Loc
	}
	return ""
}

func (m *GeoLoc) GetOrg() string {
	if m != nil {
		return m.Org
	}
	return ""
}

func (m *GeoLoc) GetPostal() string {
	if m != nil {
		return m.Postal
	}
	return ""
}

// This is used both to represent the information we receive from DHCP
// for each interface, and the information the device is using
// (from /etc/resolv.conf). The latter could be different than what's received
// from DHCP on all the interfaces
type ZInfoDNS struct {
	DNSservers           []string `protobuf:"bytes,1,rep,name=DNSservers,proto3" json:"DNSservers,omitempty"`
	DNSdomain            string   `protobuf:"bytes,2,opt,name=DNSdomain,proto3" json:"DNSdomain,omitempty"`
	DNSsearch            []string `protobuf:"bytes,3,rep,name=DNSsearch,proto3" json:"DNSsearch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZInfoDNS) Reset()         { *m = ZInfoDNS{} }
func (m *ZInfoDNS) String() string { return proto.CompactTextString(m) }
func (*ZInfoDNS) ProtoMessage()    {}
func (*ZInfoDNS) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{7}
}

func (m *ZInfoDNS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZInfoDNS.Unmarshal(m, b)
}
func (m *ZInfoDNS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZInfoDNS.Marshal(b, m, deterministic)
}
func (m *ZInfoDNS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZInfoDNS.Merge(m, src)
}
func (m *ZInfoDNS) XXX_Size() int {
	return xxx_messageInfo_ZInfoDNS.Size(m)
}
func (m *ZInfoDNS) XXX_DiscardUnknown() {
	xxx_messageInfo_ZInfoDNS.DiscardUnknown(m)
}

var xxx_messageInfo_ZInfoDNS proto.InternalMessageInfo

func (m *ZInfoDNS) GetDNSservers() []string {
	if m != nil {
		return m.DNSservers
	}
	return nil
}

func (m *ZInfoDNS) GetDNSdomain() string {
	if m != nil {
		return m.DNSdomain
	}
	return ""
}

func (m *ZInfoDNS) GetDNSsearch() []string {
	if m != nil {
		return m.DNSsearch
	}
	return nil
}

// Deprecate since we can't determine it on the device
type ZinfoPeripheral struct {
	Ztype                ZPeripheralTypes   `protobuf:"varint,1,opt,name=ztype,proto3,enum=ZPeripheralTypes" json:"ztype,omitempty"`
	Pluggable            bool               `protobuf:"varint,2,opt,name=pluggable,proto3" json:"pluggable,omitempty"`
	Minfo                *ZInfoManufacturer `protobuf:"bytes,3,opt,name=minfo,proto3" json:"minfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ZinfoPeripheral) Reset()         { *m = ZinfoPeripheral{} }
func (m *ZinfoPeripheral) String() string { return proto.CompactTextString(m) }
func (*ZinfoPeripheral) ProtoMessage()    {}
func (*ZinfoPeripheral) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{8}
}

func (m *ZinfoPeripheral) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZinfoPeripheral.Unmarshal(m, b)
}
func (m *ZinfoPeripheral) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZinfoPeripheral.Marshal(b, m, deterministic)
}
func (m *ZinfoPeripheral) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZinfoPeripheral.Merge(m, src)
}
func (m *ZinfoPeripheral) XXX_Size() int {
	return xxx_messageInfo_ZinfoPeripheral.Size(m)
}
func (m *ZinfoPeripheral) XXX_DiscardUnknown() {
	xxx_messageInfo_ZinfoPeripheral.DiscardUnknown(m)
}

var xxx_messageInfo_ZinfoPeripheral proto.InternalMessageInfo

func (m *ZinfoPeripheral) GetZtype() ZPeripheralTypes {
	if m != nil {
		return m.Ztype
	}
	return ZPeripheralTypes_ZpNone
}

func (m *ZinfoPeripheral) GetPluggable() bool {
	if m != nil {
		return m.Pluggable
	}
	return false
}

func (m *ZinfoPeripheral) GetMinfo() *ZInfoManufacturer {
	if m != nil {
		return m.Minfo
	}
	return nil
}

//SW Info for Apps
type ZInfoSW struct {
	SwVersion            string   `protobuf:"bytes,2,opt,name=swVersion,proto3" json:"swVersion,omitempty"`
	SwHash               string   `protobuf:"bytes,3,opt,name=swHash,proto3" json:"swHash,omitempty"`
	State                ZSwState `protobuf:"varint,4,opt,name=state,proto3,enum=ZSwState" json:"state,omitempty"`
	Target               string   `protobuf:"bytes,6,opt,name=target,proto3" json:"target,omitempty"`
	Vdev                 string   `protobuf:"bytes,7,opt,name=vdev,proto3" json:"vdev,omitempty"`
	DownloadProgress     uint32   `protobuf:"varint,8,opt,name=downloadProgress,proto3" json:"downloadProgress,omitempty"`
	ImageName            string   `protobuf:"bytes,9,opt,name=imageName,proto3" json:"imageName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZInfoSW) Reset()         { *m = ZInfoSW{} }
func (m *ZInfoSW) String() string { return proto.CompactTextString(m) }
func (*ZInfoSW) ProtoMessage()    {}
func (*ZInfoSW) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{9}
}

func (m *ZInfoSW) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZInfoSW.Unmarshal(m, b)
}
func (m *ZInfoSW) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZInfoSW.Marshal(b, m, deterministic)
}
func (m *ZInfoSW) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZInfoSW.Merge(m, src)
}
func (m *ZInfoSW) XXX_Size() int {
	return xxx_messageInfo_ZInfoSW.Size(m)
}
func (m *ZInfoSW) XXX_DiscardUnknown() {
	xxx_messageInfo_ZInfoSW.DiscardUnknown(m)
}

var xxx_messageInfo_ZInfoSW proto.InternalMessageInfo

func (m *ZInfoSW) GetSwVersion() string {
	if m != nil {
		return m.SwVersion
	}
	return ""
}

func (m *ZInfoSW) GetSwHash() string {
	if m != nil {
		return m.SwHash
	}
	return ""
}

func (m *ZInfoSW) GetState() ZSwState {
	if m != nil {
		return m.State
	}
	return ZSwState_INVALID
}

func (m *ZInfoSW) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *ZInfoSW) GetVdev() string {
	if m != nil {
		return m.Vdev
	}
	return ""
}

func (m *ZInfoSW) GetDownloadProgress() uint32 {
	if m != nil {
		return m.DownloadProgress
	}
	return 0
}

func (m *ZInfoSW) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

// Errors in response to the applicatioan of configuration
type ErrorInfo struct {
	Description          string               `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ErrorInfo) Reset()         { *m = ErrorInfo{} }
func (m *ErrorInfo) String() string { return proto.CompactTextString(m) }
func (*ErrorInfo) ProtoMessage()    {}
func (*ErrorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{10}
}

func (m *ErrorInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ErrorInfo.Unmarshal(m, b)
}
func (m *ErrorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ErrorInfo.Marshal(b, m, deterministic)
}
func (m *ErrorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorInfo.Merge(m, src)
}
func (m *ErrorInfo) XXX_Size() int {
	return xxx_messageInfo_ErrorInfo.Size(m)
}
func (m *ErrorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorInfo proto.InternalMessageInfo

func (m *ErrorInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ErrorInfo) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// Base device info, as discovered by Xen (or OS on bare metal)
type ZInfoDevice struct {
	MachineArch          string                  `protobuf:"bytes,4,opt,name=machineArch,proto3" json:"machineArch,omitempty"`
	CpuArch              string                  `protobuf:"bytes,5,opt,name=cpuArch,proto3" json:"cpuArch,omitempty"`
	Platform             string                  `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	Ncpu                 uint32                  `protobuf:"varint,7,opt,name=ncpu,proto3" json:"ncpu,omitempty"`
	Memory               uint64                  `protobuf:"varint,8,opt,name=memory,proto3" json:"memory,omitempty"`
	Storage              uint64                  `protobuf:"varint,9,opt,name=storage,proto3" json:"storage,omitempty"`
	Minfo                *ZInfoManufacturer      `protobuf:"bytes,11,opt,name=minfo,proto3" json:"minfo,omitempty"`
	Network              []*ZInfoNetwork         `protobuf:"bytes,13,rep,name=network,proto3" json:"network,omitempty"`
	AssignableAdapters   []*ZioBundle            `protobuf:"bytes,15,rep,name=assignableAdapters,proto3" json:"assignableAdapters,omitempty"`
	Dns                  *ZInfoDNS               `protobuf:"bytes,16,opt,name=dns,proto3" json:"dns,omitempty"`
	StorageList          []*ZInfoStorage         `protobuf:"bytes,17,rep,name=storageList,proto3" json:"storageList,omitempty"`
	BootTime             *timestamp.Timestamp    `protobuf:"bytes,18,opt,name=bootTime,proto3" json:"bootTime,omitempty"`
	SwList               []*ZInfoDevSW           `protobuf:"bytes,19,rep,name=swList,proto3" json:"swList,omitempty"`
	HostName             string                  `protobuf:"bytes,20,opt,name=HostName,proto3" json:"HostName,omitempty"`
	MetricItems          []*DeprecatedMetricItem `protobuf:"bytes,21,rep,name=metricItems,proto3" json:"metricItems,omitempty"`
	LastRebootReason     string                  `protobuf:"bytes,22,opt,name=lastRebootReason,proto3" json:"lastRebootReason,omitempty"`
	LastRebootTime       *timestamp.Timestamp    `protobuf:"bytes,23,opt,name=lastRebootTime,proto3" json:"lastRebootTime,omitempty"`
	SystemAdapter        *SystemAdapterInfo      `protobuf:"bytes,24,opt,name=systemAdapter,proto3" json:"systemAdapter,omitempty"`
	RestartCounter       uint32                  `protobuf:"varint,25,opt,name=restartCounter,proto3" json:"restartCounter,omitempty"`
	HSMStatus            HwSecurityModuleStatus  `protobuf:"varint,26,opt,name=HSMStatus,proto3,enum=HwSecurityModuleStatus" json:"HSMStatus,omitempty"`
	HSMInfo              string                  `protobuf:"bytes,27,opt,name=HSMInfo,proto3" json:"HSMInfo,omitempty"`
	LastRebootStack      string                  `protobuf:"bytes,28,opt,name=lastRebootStack,proto3" json:"lastRebootStack,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ZInfoDevice) Reset()         { *m = ZInfoDevice{} }
func (m *ZInfoDevice) String() string { return proto.CompactTextString(m) }
func (*ZInfoDevice) ProtoMessage()    {}
func (*ZInfoDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{11}
}

func (m *ZInfoDevice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZInfoDevice.Unmarshal(m, b)
}
func (m *ZInfoDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZInfoDevice.Marshal(b, m, deterministic)
}
func (m *ZInfoDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZInfoDevice.Merge(m, src)
}
func (m *ZInfoDevice) XXX_Size() int {
	return xxx_messageInfo_ZInfoDevice.Size(m)
}
func (m *ZInfoDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_ZInfoDevice.DiscardUnknown(m)
}

var xxx_messageInfo_ZInfoDevice proto.InternalMessageInfo

func (m *ZInfoDevice) GetMachineArch() string {
	if m != nil {
		return m.MachineArch
	}
	return ""
}

func (m *ZInfoDevice) GetCpuArch() string {
	if m != nil {
		return m.CpuArch
	}
	return ""
}

func (m *ZInfoDevice) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *ZInfoDevice) GetNcpu() uint32 {
	if m != nil {
		return m.Ncpu
	}
	return 0
}

func (m *ZInfoDevice) GetMemory() uint64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *ZInfoDevice) GetStorage() uint64 {
	if m != nil {
		return m.Storage
	}
	return 0
}

func (m *ZInfoDevice) GetMinfo() *ZInfoManufacturer {
	if m != nil {
		return m.Minfo
	}
	return nil
}

func (m *ZInfoDevice) GetNetwork() []*ZInfoNetwork {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *ZInfoDevice) GetAssignableAdapters() []*ZioBundle {
	if m != nil {
		return m.AssignableAdapters
	}
	return nil
}

func (m *ZInfoDevice) GetDns() *ZInfoDNS {
	if m != nil {
		return m.Dns
	}
	return nil
}

func (m *ZInfoDevice) GetStorageList() []*ZInfoStorage {
	if m != nil {
		return m.StorageList
	}
	return nil
}

func (m *ZInfoDevice) GetBootTime() *timestamp.Timestamp {
	if m != nil {
		return m.BootTime
	}
	return nil
}

func (m *ZInfoDevice) GetSwList() []*ZInfoDevSW {
	if m != nil {
		return m.SwList
	}
	return nil
}

func (m *ZInfoDevice) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *ZInfoDevice) GetMetricItems() []*DeprecatedMetricItem {
	if m != nil {
		return m.MetricItems
	}
	return nil
}

func (m *ZInfoDevice) GetLastRebootReason() string {
	if m != nil {
		return m.LastRebootReason
	}
	return ""
}

func (m *ZInfoDevice) GetLastRebootTime() *timestamp.Timestamp {
	if m != nil {
		return m.LastRebootTime
	}
	return nil
}

func (m *ZInfoDevice) GetSystemAdapter() *SystemAdapterInfo {
	if m != nil {
		return m.SystemAdapter
	}
	return nil
}

func (m *ZInfoDevice) GetRestartCounter() uint32 {
	if m != nil {
		return m.RestartCounter
	}
	return 0
}

func (m *ZInfoDevice) GetHSMStatus() HwSecurityModuleStatus {
	if m != nil {
		return m.HSMStatus
	}
	return HwSecurityModuleStatus_UNKNOWN
}

func (m *ZInfoDevice) GetHSMInfo() string {
	if m != nil {
		return m.HSMInfo
	}
	return ""
}

func (m *ZInfoDevice) GetLastRebootStack() string {
	if m != nil {
		return m.LastRebootStack
	}
	return ""
}

// The current and fallback system adapter information
type SystemAdapterInfo struct {
	CurrentIndex         uint32              `protobuf:"varint,1,opt,name=currentIndex,proto3" json:"currentIndex,omitempty"`
	Status               []*DevicePortStatus `protobuf:"bytes,2,rep,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SystemAdapterInfo) Reset()         { *m = SystemAdapterInfo{} }
func (m *SystemAdapterInfo) String() string { return proto.CompactTextString(m) }
func (*SystemAdapterInfo) ProtoMessage()    {}
func (*SystemAdapterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{12}
}

func (m *SystemAdapterInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemAdapterInfo.Unmarshal(m, b)
}
func (m *SystemAdapterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemAdapterInfo.Marshal(b, m, deterministic)
}
func (m *SystemAdapterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemAdapterInfo.Merge(m, src)
}
func (m *SystemAdapterInfo) XXX_Size() int {
	return xxx_messageInfo_SystemAdapterInfo.Size(m)
}
func (m *SystemAdapterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemAdapterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SystemAdapterInfo proto.InternalMessageInfo

func (m *SystemAdapterInfo) GetCurrentIndex() uint32 {
	if m != nil {
		return m.CurrentIndex
	}
	return 0
}

func (m *SystemAdapterInfo) GetStatus() []*DevicePortStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type DevicePortStatus struct {
	Version              uint32               `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Key                  string               `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	TimePriority         *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timePriority,proto3" json:"timePriority,omitempty"`
	LastFailed           *timestamp.Timestamp `protobuf:"bytes,4,opt,name=lastFailed,proto3" json:"lastFailed,omitempty"`
	LastSucceeded        *timestamp.Timestamp `protobuf:"bytes,5,opt,name=lastSucceeded,proto3" json:"lastSucceeded,omitempty"`
	Ports                []*DevicePort        `protobuf:"bytes,6,rep,name=ports,proto3" json:"ports,omitempty"`
	LastError            string               `protobuf:"bytes,7,opt,name=lastError,proto3" json:"lastError,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DevicePortStatus) Reset()         { *m = DevicePortStatus{} }
func (m *DevicePortStatus) String() string { return proto.CompactTextString(m) }
func (*DevicePortStatus) ProtoMessage()    {}
func (*DevicePortStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{13}
}

func (m *DevicePortStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DevicePortStatus.Unmarshal(m, b)
}
func (m *DevicePortStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DevicePortStatus.Marshal(b, m, deterministic)
}
func (m *DevicePortStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevicePortStatus.Merge(m, src)
}
func (m *DevicePortStatus) XXX_Size() int {
	return xxx_messageInfo_DevicePortStatus.Size(m)
}
func (m *DevicePortStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DevicePortStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DevicePortStatus proto.InternalMessageInfo

func (m *DevicePortStatus) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *DevicePortStatus) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DevicePortStatus) GetTimePriority() *timestamp.Timestamp {
	if m != nil {
		return m.TimePriority
	}
	return nil
}

func (m *DevicePortStatus) GetLastFailed() *timestamp.Timestamp {
	if m != nil {
		return m.LastFailed
	}
	return nil
}

func (m *DevicePortStatus) GetLastSucceeded() *timestamp.Timestamp {
	if m != nil {
		return m.LastSucceeded
	}
	return nil
}

func (m *DevicePortStatus) GetPorts() []*DevicePort {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *DevicePortStatus) GetLastError() string {
	if m != nil {
		return m.LastError
	}
	return ""
}

type DevicePort struct {
	Ifname string `protobuf:"bytes,1,opt,name=ifname,proto3" json:"ifname,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsMgmt bool   `protobuf:"varint,3,opt,name=isMgmt,proto3" json:"isMgmt,omitempty"`
	Free   bool   `protobuf:"varint,4,opt,name=free,proto3" json:"free,omitempty"`
	// DhcpConfig
	DhcpType             uint32       `protobuf:"varint,11,opt,name=dhcpType,proto3" json:"dhcpType,omitempty"`
	Subnet               string       `protobuf:"bytes,12,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Gateway              string       `protobuf:"bytes,13,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Domainname           string       `protobuf:"bytes,14,opt,name=domainname,proto3" json:"domainname,omitempty"`
	NtpServer            string       `protobuf:"bytes,15,opt,name=ntpServer,proto3" json:"ntpServer,omitempty"`
	DnsServers           []string     `protobuf:"bytes,16,rep,name=dnsServers,proto3" json:"dnsServers,omitempty"`
	DhcpRangeLow         string       `protobuf:"bytes,17,opt,name=dhcpRangeLow,proto3" json:"dhcpRangeLow,omitempty"`
	DhcpRangeHigh        string       `protobuf:"bytes,18,opt,name=dhcpRangeHigh,proto3" json:"dhcpRangeHigh,omitempty"`
	Proxy                *ProxyStatus `protobuf:"bytes,21,opt,name=proxy,proto3" json:"proxy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DevicePort) Reset()         { *m = DevicePort{} }
func (m *DevicePort) String() string { return proto.CompactTextString(m) }
func (*DevicePort) ProtoMessage()    {}
func (*DevicePort) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{14}
}

func (m *DevicePort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DevicePort.Unmarshal(m, b)
}
func (m *DevicePort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DevicePort.Marshal(b, m, deterministic)
}
func (m *DevicePort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevicePort.Merge(m, src)
}
func (m *DevicePort) XXX_Size() int {
	return xxx_messageInfo_DevicePort.Size(m)
}
func (m *DevicePort) XXX_DiscardUnknown() {
	xxx_messageInfo_DevicePort.DiscardUnknown(m)
}

var xxx_messageInfo_DevicePort proto.InternalMessageInfo

func (m *DevicePort) GetIfname() string {
	if m != nil {
		return m.Ifname
	}
	return ""
}

func (m *DevicePort) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DevicePort) GetIsMgmt() bool {
	if m != nil {
		return m.IsMgmt
	}
	return false
}

func (m *DevicePort) GetFree() bool {
	if m != nil {
		return m.Free
	}
	return false
}

func (m *DevicePort) GetDhcpType() uint32 {
	if m != nil {
		return m.DhcpType
	}
	return 0
}

func (m *DevicePort) GetSubnet() string {
	if m != nil {
		return m.Subnet
	}
	return ""
}

func (m *DevicePort) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *DevicePort) GetDomainname() string {
	if m != nil {
		return m.Domainname
	}
	return ""
}

func (m *DevicePort) GetNtpServer() string {
	if m != nil {
		return m.NtpServer
	}
	return ""
}

func (m *DevicePort) GetDnsServers() []string {
	if m != nil {
		return m.DnsServers
	}
	return nil
}

func (m *DevicePort) GetDhcpRangeLow() string {
	if m != nil {
		return m.DhcpRangeLow
	}
	return ""
}

func (m *DevicePort) GetDhcpRangeHigh() string {
	if m != nil {
		return m.DhcpRangeHigh
	}
	return ""
}

func (m *DevicePort) GetProxy() *ProxyStatus {
	if m != nil {
		return m.Proxy
	}
	return nil
}

type ProxyStatus struct {
	Proxies              []*ProxyEntry `protobuf:"bytes,1,rep,name=proxies,proto3" json:"proxies,omitempty"`
	Exceptions           string        `protobuf:"bytes,2,opt,name=exceptions,proto3" json:"exceptions,omitempty"`
	Pacfile              string        `protobuf:"bytes,3,opt,name=pacfile,proto3" json:"pacfile,omitempty"`
	NetworkProxyEnable   bool          `protobuf:"varint,4,opt,name=networkProxyEnable,proto3" json:"networkProxyEnable,omitempty"`
	NetworkProxyURL      string        `protobuf:"bytes,5,opt,name=networkProxyURL,proto3" json:"networkProxyURL,omitempty"`
	WpadURL              string        `protobuf:"bytes,6,opt,name=wpadURL,proto3" json:"wpadURL,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ProxyStatus) Reset()         { *m = ProxyStatus{} }
func (m *ProxyStatus) String() string { return proto.CompactTextString(m) }
func (*ProxyStatus) ProtoMessage()    {}
func (*ProxyStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{15}
}

func (m *ProxyStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProxyStatus.Unmarshal(m, b)
}
func (m *ProxyStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProxyStatus.Marshal(b, m, deterministic)
}
func (m *ProxyStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyStatus.Merge(m, src)
}
func (m *ProxyStatus) XXX_Size() int {
	return xxx_messageInfo_ProxyStatus.Size(m)
}
func (m *ProxyStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyStatus proto.InternalMessageInfo

func (m *ProxyStatus) GetProxies() []*ProxyEntry {
	if m != nil {
		return m.Proxies
	}
	return nil
}

func (m *ProxyStatus) GetExceptions() string {
	if m != nil {
		return m.Exceptions
	}
	return ""
}

func (m *ProxyStatus) GetPacfile() string {
	if m != nil {
		return m.Pacfile
	}
	return ""
}

func (m *ProxyStatus) GetNetworkProxyEnable() bool {
	if m != nil {
		return m.NetworkProxyEnable
	}
	return false
}

func (m *ProxyStatus) GetNetworkProxyURL() string {
	if m != nil {
		return m.NetworkProxyURL
	}
	return ""
}

func (m *ProxyStatus) GetWpadURL() string {
	if m != nil {
		return m.WpadURL
	}
	return ""
}

type ProxyEntry struct {
	Type                 uint32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Server               string   `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
	Port                 uint32   `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProxyEntry) Reset()         { *m = ProxyEntry{} }
func (m *ProxyEntry) String() string { return proto.CompactTextString(m) }
func (*ProxyEntry) ProtoMessage()    {}
func (*ProxyEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{16}
}

func (m *ProxyEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProxyEntry.Unmarshal(m, b)
}
func (m *ProxyEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProxyEntry.Marshal(b, m, deterministic)
}
func (m *ProxyEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyEntry.Merge(m, src)
}
func (m *ProxyEntry) XXX_Size() int {
	return xxx_messageInfo_ProxyEntry.Size(m)
}
func (m *ProxyEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyEntry proto.InternalMessageInfo

func (m *ProxyEntry) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ProxyEntry) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *ProxyEntry) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// SW Info for the device base OS
// Many of these fields are for debug purposes. The ones intended
// for the UI/cli are userStatus, subStatus*, shortVersion, and swErr
type ZInfoDevSW struct {
	Activated            bool            `protobuf:"varint,2,opt,name=activated,proto3" json:"activated,omitempty"`
	PartitionLabel       string          `protobuf:"bytes,3,opt,name=partitionLabel,proto3" json:"partitionLabel,omitempty"`
	PartitionDevice      string          `protobuf:"bytes,4,opt,name=partitionDevice,proto3" json:"partitionDevice,omitempty"`
	PartitionState       string          `protobuf:"bytes,5,opt,name=partitionState,proto3" json:"partitionState,omitempty"`
	Status               ZSwState        `protobuf:"varint,6,opt,name=status,proto3,enum=ZSwState" json:"status,omitempty"`
	ShortVersion         string          `protobuf:"bytes,7,opt,name=shortVersion,proto3" json:"shortVersion,omitempty"`
	LongVersion          string          `protobuf:"bytes,8,opt,name=longVersion,proto3" json:"longVersion,omitempty"`
	SwErr                *ErrorInfo      `protobuf:"bytes,9,opt,name=swErr,proto3" json:"swErr,omitempty"`
	DownloadProgress     uint32          `protobuf:"varint,10,opt,name=downloadProgress,proto3" json:"downloadProgress,omitempty"`
	UserStatus           BaseOsStatus    `protobuf:"varint,11,opt,name=userStatus,proto3,enum=BaseOsStatus" json:"userStatus,omitempty"`
	SubStatusStr         string          `protobuf:"bytes,12,opt,name=subStatusStr,proto3" json:"subStatusStr,omitempty"`
	SubStatus            BaseOsSubStatus `protobuf:"varint,13,opt,name=subStatus,proto3,enum=BaseOsSubStatus" json:"subStatus,omitempty"`
	SubStatusProgress    uint32          `protobuf:"varint,14,opt,name=subStatusProgress,proto3" json:"subStatusProgress,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ZInfoDevSW) Reset()         { *m = ZInfoDevSW{} }
func (m *ZInfoDevSW) String() string { return proto.CompactTextString(m) }
func (*ZInfoDevSW) ProtoMessage()    {}
func (*ZInfoDevSW) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{17}
}

func (m *ZInfoDevSW) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZInfoDevSW.Unmarshal(m, b)
}
func (m *ZInfoDevSW) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZInfoDevSW.Marshal(b, m, deterministic)
}
func (m *ZInfoDevSW) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZInfoDevSW.Merge(m, src)
}
func (m *ZInfoDevSW) XXX_Size() int {
	return xxx_messageInfo_ZInfoDevSW.Size(m)
}
func (m *ZInfoDevSW) XXX_DiscardUnknown() {
	xxx_messageInfo_ZInfoDevSW.DiscardUnknown(m)
}

var xxx_messageInfo_ZInfoDevSW proto.InternalMessageInfo

func (m *ZInfoDevSW) GetActivated() bool {
	if m != nil {
		return m.Activated
	}
	return false
}

func (m *ZInfoDevSW) GetPartitionLabel() string {
	if m != nil {
		return m.PartitionLabel
	}
	return ""
}

func (m *ZInfoDevSW) GetPartitionDevice() string {
	if m != nil {
		return m.PartitionDevice
	}
	return ""
}

func (m *ZInfoDevSW) GetPartitionState() string {
	if m != nil {
		return m.PartitionState
	}
	return ""
}

func (m *ZInfoDevSW) GetStatus() ZSwState {
	if m != nil {
		return m.Status
	}
	return ZSwState_INVALID
}

func (m *ZInfoDevSW) GetShortVersion() string {
	if m != nil {
		return m.ShortVersion
	}
	return ""
}

func (m *ZInfoDevSW) GetLongVersion() string {
	if m != nil {
		return m.LongVersion
	}
	return ""
}

func (m *ZInfoDevSW) GetSwErr() *ErrorInfo {
	if m != nil {
		return m.SwErr
	}
	return nil
}

func (m *ZInfoDevSW) GetDownloadProgress() uint32 {
	if m != nil {
		return m.DownloadProgress
	}
	return 0
}

func (m *ZInfoDevSW) GetUserStatus() BaseOsStatus {
	if m != nil {
		return m.UserStatus
	}
	return BaseOsStatus_NONE
}

func (m *ZInfoDevSW) GetSubStatusStr() string {
	if m != nil {
		return m.SubStatusStr
	}
	return ""
}

func (m *ZInfoDevSW) GetSubStatus() BaseOsSubStatus {
	if m != nil {
		return m.SubStatus
	}
	return BaseOsSubStatus_NONE_SUBSTATUS
}

func (m *ZInfoDevSW) GetSubStatusProgress() uint32 {
	if m != nil {
		return m.SubStatusProgress
	}
	return 0
}

// Per filesystem/partition information
type ZInfoStorage struct {
	Device               string   `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	MountPath            string   `protobuf:"bytes,2,opt,name=mountPath,proto3" json:"mountPath,omitempty"`
	Total                uint64   `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	StorageLocation      bool     `protobuf:"varint,4,opt,name=storageLocation,proto3" json:"storageLocation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZInfoStorage) Reset()         { *m = ZInfoStorage{} }
func (m *ZInfoStorage) String() string { return proto.CompactTextString(m) }
func (*ZInfoStorage) ProtoMessage()    {}
func (*ZInfoStorage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{18}
}

func (m *ZInfoStorage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZInfoStorage.Unmarshal(m, b)
}
func (m *ZInfoStorage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZInfoStorage.Marshal(b, m, deterministic)
}
func (m *ZInfoStorage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZInfoStorage.Merge(m, src)
}
func (m *ZInfoStorage) XXX_Size() int {
	return xxx_messageInfo_ZInfoStorage.Size(m)
}
func (m *ZInfoStorage) XXX_DiscardUnknown() {
	xxx_messageInfo_ZInfoStorage.DiscardUnknown(m)
}

var xxx_messageInfo_ZInfoStorage proto.InternalMessageInfo

func (m *ZInfoStorage) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *ZInfoStorage) GetMountPath() string {
	if m != nil {
		return m.MountPath
	}
	return ""
}

func (m *ZInfoStorage) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ZInfoStorage) GetStorageLocation() bool {
	if m != nil {
		return m.StorageLocation
	}
	return false
}

type ZInfoApp struct {
	AppID                string               `protobuf:"bytes,1,opt,name=AppID,proto3" json:"AppID,omitempty"`
	AppVersion           string               `protobuf:"bytes,2,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
	SystemApp            bool                 `protobuf:"varint,6,opt,name=systemApp,proto3" json:"systemApp,omitempty"`
	AppName              string               `protobuf:"bytes,7,opt,name=AppName,proto3" json:"AppName,omitempty"`
	SoftwareList         []*ZInfoSW           `protobuf:"bytes,8,rep,name=softwareList,proto3" json:"softwareList,omitempty"`
	BootTime             *timestamp.Timestamp `protobuf:"bytes,12,opt,name=bootTime,proto3" json:"bootTime,omitempty"`
	AssignedAdapters     []*ZioBundle         `protobuf:"bytes,13,rep,name=assignedAdapters,proto3" json:"assignedAdapters,omitempty"`
	AppErr               []*ErrorInfo         `protobuf:"bytes,14,rep,name=appErr,proto3" json:"appErr,omitempty"`
	State                ZSwState             `protobuf:"varint,15,opt,name=state,proto3,enum=ZSwState" json:"state,omitempty"`
	Network              []*ZInfoNetwork      `protobuf:"bytes,16,rep,name=network,proto3" json:"network,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ZInfoApp) Reset()         { *m = ZInfoApp{} }
func (m *ZInfoApp) String() string { return proto.CompactTextString(m) }
func (*ZInfoApp) ProtoMessage()    {}
func (*ZInfoApp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{19}
}

func (m *ZInfoApp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZInfoApp.Unmarshal(m, b)
}
func (m *ZInfoApp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZInfoApp.Marshal(b, m, deterministic)
}
func (m *ZInfoApp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZInfoApp.Merge(m, src)
}
func (m *ZInfoApp) XXX_Size() int {
	return xxx_messageInfo_ZInfoApp.Size(m)
}
func (m *ZInfoApp) XXX_DiscardUnknown() {
	xxx_messageInfo_ZInfoApp.DiscardUnknown(m)
}

var xxx_messageInfo_ZInfoApp proto.InternalMessageInfo

func (m *ZInfoApp) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *ZInfoApp) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

func (m *ZInfoApp) GetSystemApp() bool {
	if m != nil {
		return m.SystemApp
	}
	return false
}

func (m *ZInfoApp) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *ZInfoApp) GetSoftwareList() []*ZInfoSW {
	if m != nil {
		return m.SoftwareList
	}
	return nil
}

func (m *ZInfoApp) GetBootTime() *timestamp.Timestamp {
	if m != nil {
		return m.BootTime
	}
	return nil
}

func (m *ZInfoApp) GetAssignedAdapters() []*ZioBundle {
	if m != nil {
		return m.AssignedAdapters
	}
	return nil
}

func (m *ZInfoApp) GetAppErr() []*ErrorInfo {
	if m != nil {
		return m.AppErr
	}
	return nil
}

func (m *ZInfoApp) GetState() ZSwState {
	if m != nil {
		return m.State
	}
	return ZSwState_INVALID
}

func (m *ZInfoApp) GetNetwork() []*ZInfoNetwork {
	if m != nil {
		return m.Network
	}
	return nil
}

// tunnel link details
type ZInfoVpnLinkInfo struct {
	SpiId                string   `protobuf:"bytes,1,opt,name=spiId,proto3" json:"spiId,omitempty"`
	SubNet               string   `protobuf:"bytes,2,opt,name=subNet,proto3" json:"subNet,omitempty"`
	Direction            bool     `protobuf:"varint,3,opt,name=direction,proto3" json:"direction,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZInfoVpnLinkInfo) Reset()         { *m = ZInfoVpnLinkInfo{} }
func (m *ZInfoVpnLinkInfo) String() string { return proto.CompactTextString(m) }
func (*ZInfoVpnLinkInfo) ProtoMessage()    {}
func (*ZInfoVpnLinkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{20}
}

func (m *ZInfoVpnLinkInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZInfoVpnLinkInfo.Unmarshal(m, b)
}
func (m *ZInfoVpnLinkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZInfoVpnLinkInfo.Marshal(b, m, deterministic)
}
func (m *ZInfoVpnLinkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZInfoVpnLinkInfo.Merge(m, src)
}
func (m *ZInfoVpnLinkInfo) XXX_Size() int {
	return xxx_messageInfo_ZInfoVpnLinkInfo.Size(m)
}
func (m *ZInfoVpnLinkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ZInfoVpnLinkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ZInfoVpnLinkInfo proto.InternalMessageInfo

func (m *ZInfoVpnLinkInfo) GetSpiId() string {
	if m != nil {
		return m.SpiId
	}
	return ""
}

func (m *ZInfoVpnLinkInfo) GetSubNet() string {
	if m != nil {
		return m.SubNet
	}
	return ""
}

func (m *ZInfoVpnLinkInfo) GetDirection() bool {
	if m != nil {
		return m.Direction
	}
	return false
}

// Esp details
type ZInfoVpnLink struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ReqId                string            `protobuf:"bytes,3,opt,name=reqId,proto3" json:"reqId,omitempty"`
	InstTime             uint64            `protobuf:"varint,4,opt,name=instTime,proto3" json:"instTime,omitempty"`
	EspInfo              string            `protobuf:"bytes,5,opt,name=espInfo,proto3" json:"espInfo,omitempty"`
	State                ZInfoVpnState     `protobuf:"varint,6,opt,name=state,proto3,enum=ZInfoVpnState" json:"state,omitempty"`
	LInfo                *ZInfoVpnLinkInfo `protobuf:"bytes,10,opt,name=lInfo,proto3" json:"lInfo,omitempty"`
	RInfo                *ZInfoVpnLinkInfo `protobuf:"bytes,11,opt,name=rInfo,proto3" json:"rInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ZInfoVpnLink) Reset()         { *m = ZInfoVpnLink{} }
func (m *ZInfoVpnLink) String() string { return proto.CompactTextString(m) }
func (*ZInfoVpnLink) ProtoMessage()    {}
func (*ZInfoVpnLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{21}
}

func (m *ZInfoVpnLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZInfoVpnLink.Unmarshal(m, b)
}
func (m *ZInfoVpnLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZInfoVpnLink.Marshal(b, m, deterministic)
}
func (m *ZInfoVpnLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZInfoVpnLink.Merge(m, src)
}
func (m *ZInfoVpnLink) XXX_Size() int {
	return xxx_messageInfo_ZInfoVpnLink.Size(m)
}
func (m *ZInfoVpnLink) XXX_DiscardUnknown() {
	xxx_messageInfo_ZInfoVpnLink.DiscardUnknown(m)
}

var xxx_messageInfo_ZInfoVpnLink proto.InternalMessageInfo

func (m *ZInfoVpnLink) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ZInfoVpnLink) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ZInfoVpnLink) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *ZInfoVpnLink) GetInstTime() uint64 {
	if m != nil {
		return m.InstTime
	}
	return 0
}

func (m *ZInfoVpnLink) GetEspInfo() string {
	if m != nil {
		return m.EspInfo
	}
	return ""
}

func (m *ZInfoVpnLink) GetState() ZInfoVpnState {
	if m != nil {
		return m.State
	}
	return ZInfoVpnState_VPN_INVALID
}

func (m *ZInfoVpnLink) GetLInfo() *ZInfoVpnLinkInfo {
	if m != nil {
		return m.LInfo
	}
	return nil
}

func (m *ZInfoVpnLink) GetRInfo() *ZInfoVpnLinkInfo {
	if m != nil {
		return m.RInfo
	}
	return nil
}

// ipsec left/right end-point info
type ZInfoVpnEndPoint struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IpAddr               string   `protobuf:"bytes,2,opt,name=ipAddr,proto3" json:"ipAddr,omitempty"`
	Port                 uint32   `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZInfoVpnEndPoint) Reset()         { *m = ZInfoVpnEndPoint{} }
func (m *ZInfoVpnEndPoint) String() string { return proto.CompactTextString(m) }
func (*ZInfoVpnEndPoint) ProtoMessage()    {}
func (*ZInfoVpnEndPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{22}
}

func (m *ZInfoVpnEndPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZInfoVpnEndPoint.Unmarshal(m, b)
}
func (m *ZInfoVpnEndPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZInfoVpnEndPoint.Marshal(b, m, deterministic)
}
func (m *ZInfoVpnEndPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZInfoVpnEndPoint.Merge(m, src)
}
func (m *ZInfoVpnEndPoint) XXX_Size() int {
	return xxx_messageInfo_ZInfoVpnEndPoint.Size(m)
}
func (m *ZInfoVpnEndPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_ZInfoVpnEndPoint.DiscardUnknown(m)
}

var xxx_messageInfo_ZInfoVpnEndPoint proto.InternalMessageInfo

func (m *ZInfoVpnEndPoint) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ZInfoVpnEndPoint) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

func (m *ZInfoVpnEndPoint) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// Ike details
type ZInfoVpnConn struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version              string            `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	EstTime              uint64            `protobuf:"varint,4,opt,name=estTime,proto3" json:"estTime,omitempty"`
	Ikes                 string            `protobuf:"bytes,5,opt,name=ikes,proto3" json:"ikes,omitempty"`
	State                ZInfoVpnState     `protobuf:"varint,6,opt,name=state,proto3,enum=ZInfoVpnState" json:"state,omitempty"`
	LInfo                *ZInfoVpnEndPoint `protobuf:"bytes,7,opt,name=lInfo,proto3" json:"lInfo,omitempty"`
	RInfo                *ZInfoVpnEndPoint `protobuf:"bytes,8,opt,name=rInfo,proto3" json:"rInfo,omitempty"`
	Links                []*ZInfoVpnLink   `protobuf:"bytes,10,rep,name=links,proto3" json:"links,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ZInfoVpnConn) Reset()         { *m = ZInfoVpnConn{} }
func (m *ZInfoVpnConn) String() string { return proto.CompactTextString(m) }
func (*ZInfoVpnConn) ProtoMessage()    {}
func (*ZInfoVpnConn) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{23}
}

func (m *ZInfoVpnConn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZInfoVpnConn.Unmarshal(m, b)
}
func (m *ZInfoVpnConn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZInfoVpnConn.Marshal(b, m, deterministic)
}
func (m *ZInfoVpnConn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZInfoVpnConn.Merge(m, src)
}
func (m *ZInfoVpnConn) XXX_Size() int {
	return xxx_messageInfo_ZInfoVpnConn.Size(m)
}
func (m *ZInfoVpnConn) XXX_DiscardUnknown() {
	xxx_messageInfo_ZInfoVpnConn.DiscardUnknown(m)
}

var xxx_messageInfo_ZInfoVpnConn proto.InternalMessageInfo

func (m *ZInfoVpnConn) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ZInfoVpnConn) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ZInfoVpnConn) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ZInfoVpnConn) GetEstTime() uint64 {
	if m != nil {
		return m.EstTime
	}
	return 0
}

func (m *ZInfoVpnConn) GetIkes() string {
	if m != nil {
		return m.Ikes
	}
	return ""
}

func (m *ZInfoVpnConn) GetState() ZInfoVpnState {
	if m != nil {
		return m.State
	}
	return ZInfoVpnState_VPN_INVALID
}

func (m *ZInfoVpnConn) GetLInfo() *ZInfoVpnEndPoint {
	if m != nil {
		return m.LInfo
	}
	return nil
}

func (m *ZInfoVpnConn) GetRInfo() *ZInfoVpnEndPoint {
	if m != nil {
		return m.RInfo
	}
	return nil
}

func (m *ZInfoVpnConn) GetLinks() []*ZInfoVpnLink {
	if m != nil {
		return m.Links
	}
	return nil
}

// ipsec level information
type ZInfoVpn struct {
	UpTime               uint64          `protobuf:"varint,1,opt,name=upTime,proto3" json:"upTime,omitempty"`
	PolicyBased          bool            `protobuf:"varint,2,opt,name=policyBased,proto3" json:"policyBased,omitempty"`
	ListeningIpAddrs     []string        `protobuf:"bytes,3,rep,name=listeningIpAddrs,proto3" json:"listeningIpAddrs,omitempty"`
	Conn                 []*ZInfoVpnConn `protobuf:"bytes,10,rep,name=conn,proto3" json:"conn,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ZInfoVpn) Reset()         { *m = ZInfoVpn{} }
func (m *ZInfoVpn) String() string { return proto.CompactTextString(m) }
func (*ZInfoVpn) ProtoMessage()    {}
func (*ZInfoVpn) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{24}
}

func (m *ZInfoVpn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZInfoVpn.Unmarshal(m, b)
}
func (m *ZInfoVpn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZInfoVpn.Marshal(b, m, deterministic)
}
func (m *ZInfoVpn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZInfoVpn.Merge(m, src)
}
func (m *ZInfoVpn) XXX_Size() int {
	return xxx_messageInfo_ZInfoVpn.Size(m)
}
func (m *ZInfoVpn) XXX_DiscardUnknown() {
	xxx_messageInfo_ZInfoVpn.DiscardUnknown(m)
}

var xxx_messageInfo_ZInfoVpn proto.InternalMessageInfo

func (m *ZInfoVpn) GetUpTime() uint64 {
	if m != nil {
		return m.UpTime
	}
	return 0
}

func (m *ZInfoVpn) GetPolicyBased() bool {
	if m != nil {
		return m.PolicyBased
	}
	return false
}

func (m *ZInfoVpn) GetListeningIpAddrs() []string {
	if m != nil {
		return m.ListeningIpAddrs
	}
	return nil
}

func (m *ZInfoVpn) GetConn() []*ZInfoVpnConn {
	if m != nil {
		return m.Conn
	}
	return nil
}

// Lisp state information
type RlocState struct {
	Rloc                 string   `protobuf:"bytes,1,opt,name=Rloc,proto3" json:"Rloc,omitempty"`
	Reachable            bool     `protobuf:"varint,2,opt,name=Reachable,proto3" json:"Reachable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RlocState) Reset()         { *m = RlocState{} }
func (m *RlocState) String() string { return proto.CompactTextString(m) }
func (*RlocState) ProtoMessage()    {}
func (*RlocState) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{25}
}

func (m *RlocState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RlocState.Unmarshal(m, b)
}
func (m *RlocState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RlocState.Marshal(b, m, deterministic)
}
func (m *RlocState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RlocState.Merge(m, src)
}
func (m *RlocState) XXX_Size() int {
	return xxx_messageInfo_RlocState.Size(m)
}
func (m *RlocState) XXX_DiscardUnknown() {
	xxx_messageInfo_RlocState.DiscardUnknown(m)
}

var xxx_messageInfo_RlocState proto.InternalMessageInfo

func (m *RlocState) GetRloc() string {
	if m != nil {
		return m.Rloc
	}
	return ""
}

func (m *RlocState) GetReachable() bool {
	if m != nil {
		return m.Reachable
	}
	return false
}

type MapCacheEntry struct {
	EID                  string       `protobuf:"bytes,1,opt,name=EID,proto3" json:"EID,omitempty"`
	Rlocs                []*RlocState `protobuf:"bytes,2,rep,name=Rlocs,proto3" json:"Rlocs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MapCacheEntry) Reset()         { *m = MapCacheEntry{} }
func (m *MapCacheEntry) String() string { return proto.CompactTextString(m) }
func (*MapCacheEntry) ProtoMessage()    {}
func (*MapCacheEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{26}
}

func (m *MapCacheEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapCacheEntry.Unmarshal(m, b)
}
func (m *MapCacheEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapCacheEntry.Marshal(b, m, deterministic)
}
func (m *MapCacheEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapCacheEntry.Merge(m, src)
}
func (m *MapCacheEntry) XXX_Size() int {
	return xxx_messageInfo_MapCacheEntry.Size(m)
}
func (m *MapCacheEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_MapCacheEntry.DiscardUnknown(m)
}

var xxx_messageInfo_MapCacheEntry proto.InternalMessageInfo

func (m *MapCacheEntry) GetEID() string {
	if m != nil {
		return m.EID
	}
	return ""
}

func (m *MapCacheEntry) GetRlocs() []*RlocState {
	if m != nil {
		return m.Rlocs
	}
	return nil
}

type DatabaseMap struct {
	IID                  uint64           `protobuf:"varint,1,opt,name=IID,proto3" json:"IID,omitempty"`
	MapCacheEntries      []*MapCacheEntry `protobuf:"bytes,2,rep,name=MapCacheEntries,proto3" json:"MapCacheEntries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DatabaseMap) Reset()         { *m = DatabaseMap{} }
func (m *DatabaseMap) String() string { return proto.CompactTextString(m) }
func (*DatabaseMap) ProtoMessage()    {}
func (*DatabaseMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{27}
}

func (m *DatabaseMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DatabaseMap.Unmarshal(m, b)
}
func (m *DatabaseMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DatabaseMap.Marshal(b, m, deterministic)
}
func (m *DatabaseMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatabaseMap.Merge(m, src)
}
func (m *DatabaseMap) XXX_Size() int {
	return xxx_messageInfo_DatabaseMap.Size(m)
}
func (m *DatabaseMap) XXX_DiscardUnknown() {
	xxx_messageInfo_DatabaseMap.DiscardUnknown(m)
}

var xxx_messageInfo_DatabaseMap proto.InternalMessageInfo

func (m *DatabaseMap) GetIID() uint64 {
	if m != nil {
		return m.IID
	}
	return 0
}

func (m *DatabaseMap) GetMapCacheEntries() []*MapCacheEntry {
	if m != nil {
		return m.MapCacheEntries
	}
	return nil
}

type DecapKey struct {
	Rloc                 string   `protobuf:"bytes,1,opt,name=Rloc,proto3" json:"Rloc,omitempty"`
	Port                 uint64   `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	KeyCount             uint64   `protobuf:"varint,3,opt,name=KeyCount,proto3" json:"KeyCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DecapKey) Reset()         { *m = DecapKey{} }
func (m *DecapKey) String() string { return proto.CompactTextString(m) }
func (*DecapKey) ProtoMessage()    {}
func (*DecapKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{28}
}

func (m *DecapKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DecapKey.Unmarshal(m, b)
}
func (m *DecapKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DecapKey.Marshal(b, m, deterministic)
}
func (m *DecapKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecapKey.Merge(m, src)
}
func (m *DecapKey) XXX_Size() int {
	return xxx_messageInfo_DecapKey.Size(m)
}
func (m *DecapKey) XXX_DiscardUnknown() {
	xxx_messageInfo_DecapKey.DiscardUnknown(m)
}

var xxx_messageInfo_DecapKey proto.InternalMessageInfo

func (m *DecapKey) GetRloc() string {
	if m != nil {
		return m.Rloc
	}
	return ""
}

func (m *DecapKey) GetPort() uint64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *DecapKey) GetKeyCount() uint64 {
	if m != nil {
		return m.KeyCount
	}
	return 0
}

type ZInfoLisp struct {
	ItrCryptoPort        uint64         `protobuf:"varint,1,opt,name=ItrCryptoPort,proto3" json:"ItrCryptoPort,omitempty"`
	EtrNatPort           uint64         `protobuf:"varint,2,opt,name=EtrNatPort,proto3" json:"EtrNatPort,omitempty"`
	Interfaces           []string       `protobuf:"bytes,3,rep,name=Interfaces,proto3" json:"Interfaces,omitempty"`
	DatabaseMaps         []*DatabaseMap `protobuf:"bytes,4,rep,name=DatabaseMaps,proto3" json:"DatabaseMaps,omitempty"`
	DecapKeys            []*DecapKey    `protobuf:"bytes,5,rep,name=DecapKeys,proto3" json:"DecapKeys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ZInfoLisp) Reset()         { *m = ZInfoLisp{} }
func (m *ZInfoLisp) String() string { return proto.CompactTextString(m) }
func (*ZInfoLisp) ProtoMessage()    {}
func (*ZInfoLisp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{29}
}

func (m *ZInfoLisp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZInfoLisp.Unmarshal(m, b)
}
func (m *ZInfoLisp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZInfoLisp.Marshal(b, m, deterministic)
}
func (m *ZInfoLisp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZInfoLisp.Merge(m, src)
}
func (m *ZInfoLisp) XXX_Size() int {
	return xxx_messageInfo_ZInfoLisp.Size(m)
}
func (m *ZInfoLisp) XXX_DiscardUnknown() {
	xxx_messageInfo_ZInfoLisp.DiscardUnknown(m)
}

var xxx_messageInfo_ZInfoLisp proto.InternalMessageInfo

func (m *ZInfoLisp) GetItrCryptoPort() uint64 {
	if m != nil {
		return m.ItrCryptoPort
	}
	return 0
}

func (m *ZInfoLisp) GetEtrNatPort() uint64 {
	if m != nil {
		return m.EtrNatPort
	}
	return 0
}

func (m *ZInfoLisp) GetInterfaces() []string {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *ZInfoLisp) GetDatabaseMaps() []*DatabaseMap {
	if m != nil {
		return m.DatabaseMaps
	}
	return nil
}

func (m *ZInfoLisp) GetDecapKeys() []*DecapKey {
	if m != nil {
		return m.DecapKeys
	}
	return nil
}

// Service instance state information XXX to be deprecated
type ZInfoService struct {
	ServiceID        string               `protobuf:"bytes,1,opt,name=serviceID,proto3" json:"serviceID,omitempty"`
	ServiceName      string               `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ServiceType      uint32               `protobuf:"varint,3,opt,name=serviceType,proto3" json:"serviceType,omitempty"`
	SoftwareList     *ZInfoSW             `protobuf:"bytes,4,opt,name=softwareList,proto3" json:"softwareList,omitempty"`
	Activated        bool                 `protobuf:"varint,5,opt,name=activated,proto3" json:"activated,omitempty"`
	UpTimeStamp      *timestamp.Timestamp `protobuf:"bytes,6,opt,name=upTimeStamp,proto3" json:"upTimeStamp,omitempty"`
	AssignedAdapters []*ZioBundle         `protobuf:"bytes,7,rep,name=assignedAdapters,proto3" json:"assignedAdapters,omitempty"`
	SvcErr           []*ErrorInfo         `protobuf:"bytes,8,rep,name=svcErr,proto3" json:"svcErr,omitempty"`
	Network          []*ZInfoNetwork      `protobuf:"bytes,9,rep,name=network,proto3" json:"network,omitempty"`
	// Types that are valid to be assigned to InfoContent:
	//	*ZInfoService_Vinfo
	//	*ZInfoService_Linfo
	InfoContent          isZInfoService_InfoContent `protobuf_oneof:"InfoContent"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ZInfoService) Reset()         { *m = ZInfoService{} }
func (m *ZInfoService) String() string { return proto.CompactTextString(m) }
func (*ZInfoService) ProtoMessage()    {}
func (*ZInfoService) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{30}
}

func (m *ZInfoService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZInfoService.Unmarshal(m, b)
}
func (m *ZInfoService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZInfoService.Marshal(b, m, deterministic)
}
func (m *ZInfoService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZInfoService.Merge(m, src)
}
func (m *ZInfoService) XXX_Size() int {
	return xxx_messageInfo_ZInfoService.Size(m)
}
func (m *ZInfoService) XXX_DiscardUnknown() {
	xxx_messageInfo_ZInfoService.DiscardUnknown(m)
}

var xxx_messageInfo_ZInfoService proto.InternalMessageInfo

func (m *ZInfoService) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

func (m *ZInfoService) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ZInfoService) GetServiceType() uint32 {
	if m != nil {
		return m.ServiceType
	}
	return 0
}

func (m *ZInfoService) GetSoftwareList() *ZInfoSW {
	if m != nil {
		return m.SoftwareList
	}
	return nil
}

func (m *ZInfoService) GetActivated() bool {
	if m != nil {
		return m.Activated
	}
	return false
}

func (m *ZInfoService) GetUpTimeStamp() *timestamp.Timestamp {
	if m != nil {
		return m.UpTimeStamp
	}
	return nil
}

func (m *ZInfoService) GetAssignedAdapters() []*ZioBundle {
	if m != nil {
		return m.AssignedAdapters
	}
	return nil
}

func (m *ZInfoService) GetSvcErr() []*ErrorInfo {
	if m != nil {
		return m.SvcErr
	}
	return nil
}

func (m *ZInfoService) GetNetwork() []*ZInfoNetwork {
	if m != nil {
		return m.Network
	}
	return nil
}

type isZInfoService_InfoContent interface {
	isZInfoService_InfoContent()
}

type ZInfoService_Vinfo struct {
	Vinfo *ZInfoVpn `protobuf:"bytes,20,opt,name=vinfo,proto3,oneof"`
}

type ZInfoService_Linfo struct {
	Linfo *ZInfoLisp `protobuf:"bytes,21,opt,name=linfo,proto3,oneof"`
}

func (*ZInfoService_Vinfo) isZInfoService_InfoContent() {}

func (*ZInfoService_Linfo) isZInfoService_InfoContent() {}

func (m *ZInfoService) GetInfoContent() isZInfoService_InfoContent {
	if m != nil {
		return m.InfoContent
	}
	return nil
}

func (m *ZInfoService) GetVinfo() *ZInfoVpn {
	if x, ok := m.GetInfoContent().(*ZInfoService_Vinfo); ok {
		return x.Vinfo
	}
	return nil
}

func (m *ZInfoService) GetLinfo() *ZInfoLisp {
	if x, ok := m.GetInfoContent().(*ZInfoService_Linfo); ok {
		return x.Linfo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ZInfoService) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ZInfoService_Vinfo)(nil),
		(*ZInfoService_Linfo)(nil),
	}
}

// Network Object information XXX to be deprecated
type ZInfoNetworkObject struct {
	NetworkID string `protobuf:"bytes,1,opt,name=networkID,proto3" json:"networkID,omitempty"`
	// From NetworkObjectConfig; do we need to include all of these?
	NetworkType   uint32   `protobuf:"varint,2,opt,name=networkType,proto3" json:"networkType,omitempty"`
	DhcpType      uint32   `protobuf:"varint,3,opt,name=dhcpType,proto3" json:"dhcpType,omitempty"`
	Subnet        string   `protobuf:"bytes,4,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Gateway       string   `protobuf:"bytes,5,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Domainname    string   `protobuf:"bytes,6,opt,name=domainname,proto3" json:"domainname,omitempty"`
	NtpServer     string   `protobuf:"bytes,7,opt,name=ntpServer,proto3" json:"ntpServer,omitempty"`
	DnsServers    []string `protobuf:"bytes,8,rep,name=dnsServers,proto3" json:"dnsServers,omitempty"`
	DhcpRangeLow  string   `protobuf:"bytes,9,opt,name=dhcpRangeLow,proto3" json:"dhcpRangeLow,omitempty"`
	DhcpRangeHigh string   `protobuf:"bytes,10,opt,name=dhcpRangeHigh,proto3" json:"dhcpRangeHigh,omitempty"`
	// From NetworkObjectStatus
	BridgeNum            uint32                   `protobuf:"varint,12,opt,name=bridgeNum,proto3" json:"bridgeNum,omitempty"`
	BridgeName           string                   `protobuf:"bytes,13,opt,name=bridgeName,proto3" json:"bridgeName,omitempty"`
	BridgeIPAddr         string                   `protobuf:"bytes,14,opt,name=bridgeIPAddr,proto3" json:"bridgeIPAddr,omitempty"`
	IpAssignments        []*ZmetIPAssignmentEntry `protobuf:"bytes,15,rep,name=ipAssignments,proto3" json:"ipAssignments,omitempty"`
	BridgeIPSets         []string                 `protobuf:"bytes,16,rep,name=bridgeIPSets,proto3" json:"bridgeIPSets,omitempty"`
	VifNames             []string                 `protobuf:"bytes,17,rep,name=vifNames,proto3" json:"vifNames,omitempty"`
	Ipv4Eid              bool                     `protobuf:"varint,18,opt,name=ipv4Eid,proto3" json:"ipv4Eid,omitempty"`
	NetworkErr           []*ErrorInfo             `protobuf:"bytes,19,rep,name=networkErr,proto3" json:"networkErr,omitempty"`
	Vifs                 []*ZmetVifInfo           `protobuf:"bytes,25,rep,name=vifs,proto3" json:"vifs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ZInfoNetworkObject) Reset()         { *m = ZInfoNetworkObject{} }
func (m *ZInfoNetworkObject) String() string { return proto.CompactTextString(m) }
func (*ZInfoNetworkObject) ProtoMessage()    {}
func (*ZInfoNetworkObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{31}
}

func (m *ZInfoNetworkObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZInfoNetworkObject.Unmarshal(m, b)
}
func (m *ZInfoNetworkObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZInfoNetworkObject.Marshal(b, m, deterministic)
}
func (m *ZInfoNetworkObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZInfoNetworkObject.Merge(m, src)
}
func (m *ZInfoNetworkObject) XXX_Size() int {
	return xxx_messageInfo_ZInfoNetworkObject.Size(m)
}
func (m *ZInfoNetworkObject) XXX_DiscardUnknown() {
	xxx_messageInfo_ZInfoNetworkObject.DiscardUnknown(m)
}

var xxx_messageInfo_ZInfoNetworkObject proto.InternalMessageInfo

func (m *ZInfoNetworkObject) GetNetworkID() string {
	if m != nil {
		return m.NetworkID
	}
	return ""
}

func (m *ZInfoNetworkObject) GetNetworkType() uint32 {
	if m != nil {
		return m.NetworkType
	}
	return 0
}

func (m *ZInfoNetworkObject) GetDhcpType() uint32 {
	if m != nil {
		return m.DhcpType
	}
	return 0
}

func (m *ZInfoNetworkObject) GetSubnet() string {
	if m != nil {
		return m.Subnet
	}
	return ""
}

func (m *ZInfoNetworkObject) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *ZInfoNetworkObject) GetDomainname() string {
	if m != nil {
		return m.Domainname
	}
	return ""
}

func (m *ZInfoNetworkObject) GetNtpServer() string {
	if m != nil {
		return m.NtpServer
	}
	return ""
}

func (m *ZInfoNetworkObject) GetDnsServers() []string {
	if m != nil {
		return m.DnsServers
	}
	return nil
}

func (m *ZInfoNetworkObject) GetDhcpRangeLow() string {
	if m != nil {
		return m.DhcpRangeLow
	}
	return ""
}

func (m *ZInfoNetworkObject) GetDhcpRangeHigh() string {
	if m != nil {
		return m.DhcpRangeHigh
	}
	return ""
}

func (m *ZInfoNetworkObject) GetBridgeNum() uint32 {
	if m != nil {
		return m.BridgeNum
	}
	return 0
}

func (m *ZInfoNetworkObject) GetBridgeName() string {
	if m != nil {
		return m.BridgeName
	}
	return ""
}

func (m *ZInfoNetworkObject) GetBridgeIPAddr() string {
	if m != nil {
		return m.BridgeIPAddr
	}
	return ""
}

func (m *ZInfoNetworkObject) GetIpAssignments() []*ZmetIPAssignmentEntry {
	if m != nil {
		return m.IpAssignments
	}
	return nil
}

func (m *ZInfoNetworkObject) GetBridgeIPSets() []string {
	if m != nil {
		return m.BridgeIPSets
	}
	return nil
}

func (m *ZInfoNetworkObject) GetVifNames() []string {
	if m != nil {
		return m.VifNames
	}
	return nil
}

func (m *ZInfoNetworkObject) GetIpv4Eid() bool {
	if m != nil {
		return m.Ipv4Eid
	}
	return false
}

func (m *ZInfoNetworkObject) GetNetworkErr() []*ErrorInfo {
	if m != nil {
		return m.NetworkErr
	}
	return nil
}

func (m *ZInfoNetworkObject) GetVifs() []*ZmetVifInfo {
	if m != nil {
		return m.Vifs
	}
	return nil
}

// Network Instance information
type ZInfoNetworkInstance struct {
	NetworkID        string                   `protobuf:"bytes,2,opt,name=networkID,proto3" json:"networkID,omitempty"`
	NetworkVersion   string                   `protobuf:"bytes,3,opt,name=networkVersion,proto3" json:"networkVersion,omitempty"`
	InstType         uint32                   `protobuf:"varint,5,opt,name=instType,proto3" json:"instType,omitempty"`
	Displayname      string                   `protobuf:"bytes,6,opt,name=displayname,proto3" json:"displayname,omitempty"`
	Activated        bool                     `protobuf:"varint,7,opt,name=activated,proto3" json:"activated,omitempty"`
	UpTimeStamp      *timestamp.Timestamp     `protobuf:"bytes,8,opt,name=upTimeStamp,proto3" json:"upTimeStamp,omitempty"`
	SoftwareList     *ZInfoSW                 `protobuf:"bytes,9,opt,name=softwareList,proto3" json:"softwareList,omitempty"`
	BridgeNum        uint32                   `protobuf:"varint,20,opt,name=bridgeNum,proto3" json:"bridgeNum,omitempty"`
	BridgeName       string                   `protobuf:"bytes,21,opt,name=bridgeName,proto3" json:"bridgeName,omitempty"`
	BridgeIPAddr     string                   `protobuf:"bytes,22,opt,name=bridgeIPAddr,proto3" json:"bridgeIPAddr,omitempty"`
	IpAssignments    []*ZmetIPAssignmentEntry `protobuf:"bytes,23,rep,name=ipAssignments,proto3" json:"ipAssignments,omitempty"`
	BridgeIPSets     []string                 `protobuf:"bytes,24,rep,name=bridgeIPSets,proto3" json:"bridgeIPSets,omitempty"`
	Vifs             []*ZmetVifInfo           `protobuf:"bytes,25,rep,name=vifs,proto3" json:"vifs,omitempty"`
	Ipv4Eid          bool                     `protobuf:"varint,26,opt,name=ipv4Eid,proto3" json:"ipv4Eid,omitempty"`
	AssignedAdapters []*ZioBundle             `protobuf:"bytes,30,rep,name=assignedAdapters,proto3" json:"assignedAdapters,omitempty"`
	// Types that are valid to be assigned to InfoContent:
	//	*ZInfoNetworkInstance_Vinfo
	//	*ZInfoNetworkInstance_Linfo
	InfoContent          isZInfoNetworkInstance_InfoContent `protobuf_oneof:"InfoContent"`
	NetworkErr           []*ErrorInfo                       `protobuf:"bytes,40,rep,name=networkErr,proto3" json:"networkErr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *ZInfoNetworkInstance) Reset()         { *m = ZInfoNetworkInstance{} }
func (m *ZInfoNetworkInstance) String() string { return proto.CompactTextString(m) }
func (*ZInfoNetworkInstance) ProtoMessage()    {}
func (*ZInfoNetworkInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{32}
}

func (m *ZInfoNetworkInstance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZInfoNetworkInstance.Unmarshal(m, b)
}
func (m *ZInfoNetworkInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZInfoNetworkInstance.Marshal(b, m, deterministic)
}
func (m *ZInfoNetworkInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZInfoNetworkInstance.Merge(m, src)
}
func (m *ZInfoNetworkInstance) XXX_Size() int {
	return xxx_messageInfo_ZInfoNetworkInstance.Size(m)
}
func (m *ZInfoNetworkInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_ZInfoNetworkInstance.DiscardUnknown(m)
}

var xxx_messageInfo_ZInfoNetworkInstance proto.InternalMessageInfo

func (m *ZInfoNetworkInstance) GetNetworkID() string {
	if m != nil {
		return m.NetworkID
	}
	return ""
}

func (m *ZInfoNetworkInstance) GetNetworkVersion() string {
	if m != nil {
		return m.NetworkVersion
	}
	return ""
}

func (m *ZInfoNetworkInstance) GetInstType() uint32 {
	if m != nil {
		return m.InstType
	}
	return 0
}

func (m *ZInfoNetworkInstance) GetDisplayname() string {
	if m != nil {
		return m.Displayname
	}
	return ""
}

func (m *ZInfoNetworkInstance) GetActivated() bool {
	if m != nil {
		return m.Activated
	}
	return false
}

func (m *ZInfoNetworkInstance) GetUpTimeStamp() *timestamp.Timestamp {
	if m != nil {
		return m.UpTimeStamp
	}
	return nil
}

func (m *ZInfoNetworkInstance) GetSoftwareList() *ZInfoSW {
	if m != nil {
		return m.SoftwareList
	}
	return nil
}

func (m *ZInfoNetworkInstance) GetBridgeNum() uint32 {
	if m != nil {
		return m.BridgeNum
	}
	return 0
}

func (m *ZInfoNetworkInstance) GetBridgeName() string {
	if m != nil {
		return m.BridgeName
	}
	return ""
}

func (m *ZInfoNetworkInstance) GetBridgeIPAddr() string {
	if m != nil {
		return m.BridgeIPAddr
	}
	return ""
}

func (m *ZInfoNetworkInstance) GetIpAssignments() []*ZmetIPAssignmentEntry {
	if m != nil {
		return m.IpAssignments
	}
	return nil
}

func (m *ZInfoNetworkInstance) GetBridgeIPSets() []string {
	if m != nil {
		return m.BridgeIPSets
	}
	return nil
}

func (m *ZInfoNetworkInstance) GetVifs() []*ZmetVifInfo {
	if m != nil {
		return m.Vifs
	}
	return nil
}

func (m *ZInfoNetworkInstance) GetIpv4Eid() bool {
	if m != nil {
		return m.Ipv4Eid
	}
	return false
}

func (m *ZInfoNetworkInstance) GetAssignedAdapters() []*ZioBundle {
	if m != nil {
		return m.AssignedAdapters
	}
	return nil
}

type isZInfoNetworkInstance_InfoContent interface {
	isZInfoNetworkInstance_InfoContent()
}

type ZInfoNetworkInstance_Vinfo struct {
	Vinfo *ZInfoVpn `protobuf:"bytes,31,opt,name=vinfo,proto3,oneof"`
}

type ZInfoNetworkInstance_Linfo struct {
	Linfo *ZInfoLisp `protobuf:"bytes,32,opt,name=linfo,proto3,oneof"`
}

func (*ZInfoNetworkInstance_Vinfo) isZInfoNetworkInstance_InfoContent() {}

func (*ZInfoNetworkInstance_Linfo) isZInfoNetworkInstance_InfoContent() {}

func (m *ZInfoNetworkInstance) GetInfoContent() isZInfoNetworkInstance_InfoContent {
	if m != nil {
		return m.InfoContent
	}
	return nil
}

func (m *ZInfoNetworkInstance) GetVinfo() *ZInfoVpn {
	if x, ok := m.GetInfoContent().(*ZInfoNetworkInstance_Vinfo); ok {
		return x.Vinfo
	}
	return nil
}

func (m *ZInfoNetworkInstance) GetLinfo() *ZInfoLisp {
	if x, ok := m.GetInfoContent().(*ZInfoNetworkInstance_Linfo); ok {
		return x.Linfo
	}
	return nil
}

func (m *ZInfoNetworkInstance) GetNetworkErr() []*ErrorInfo {
	if m != nil {
		return m.NetworkErr
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ZInfoNetworkInstance) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ZInfoNetworkInstance_Vinfo)(nil),
		(*ZInfoNetworkInstance_Linfo)(nil),
	}
}

type ZInfoMsg struct {
	Ztype ZInfoTypes `protobuf:"varint,1,opt,name=ztype,proto3,enum=ZInfoTypes" json:"ztype,omitempty"`
	DevId string     `protobuf:"bytes,2,opt,name=devId,proto3" json:"devId,omitempty"`
	// Types that are valid to be assigned to InfoContent:
	//	*ZInfoMsg_Dinfo
	//	*ZInfoMsg_Ainfo
	//	*ZInfoMsg_Sinfo
	//	*ZInfoMsg_Ninfo
	//	*ZInfoMsg_Niinfo
	InfoContent          isZInfoMsg_InfoContent `protobuf_oneof:"InfoContent"`
	AtTimeStamp          *timestamp.Timestamp   `protobuf:"bytes,6,opt,name=atTimeStamp,proto3" json:"atTimeStamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ZInfoMsg) Reset()         { *m = ZInfoMsg{} }
func (m *ZInfoMsg) String() string { return proto.CompactTextString(m) }
func (*ZInfoMsg) ProtoMessage()    {}
func (*ZInfoMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{33}
}

func (m *ZInfoMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZInfoMsg.Unmarshal(m, b)
}
func (m *ZInfoMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZInfoMsg.Marshal(b, m, deterministic)
}
func (m *ZInfoMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZInfoMsg.Merge(m, src)
}
func (m *ZInfoMsg) XXX_Size() int {
	return xxx_messageInfo_ZInfoMsg.Size(m)
}
func (m *ZInfoMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ZInfoMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ZInfoMsg proto.InternalMessageInfo

func (m *ZInfoMsg) GetZtype() ZInfoTypes {
	if m != nil {
		return m.Ztype
	}
	return ZInfoTypes_ZiNop
}

func (m *ZInfoMsg) GetDevId() string {
	if m != nil {
		return m.DevId
	}
	return ""
}

type isZInfoMsg_InfoContent interface {
	isZInfoMsg_InfoContent()
}

type ZInfoMsg_Dinfo struct {
	Dinfo *ZInfoDevice `protobuf:"bytes,3,opt,name=dinfo,proto3,oneof"`
}

type ZInfoMsg_Ainfo struct {
	Ainfo *ZInfoApp `protobuf:"bytes,5,opt,name=ainfo,proto3,oneof"`
}

type ZInfoMsg_Sinfo struct {
	Sinfo *ZInfoService `protobuf:"bytes,10,opt,name=sinfo,proto3,oneof"`
}

type ZInfoMsg_Ninfo struct {
	Ninfo *ZInfoNetworkObject `protobuf:"bytes,11,opt,name=ninfo,proto3,oneof"`
}

type ZInfoMsg_Niinfo struct {
	Niinfo *ZInfoNetworkInstance `protobuf:"bytes,12,opt,name=niinfo,proto3,oneof"`
}

func (*ZInfoMsg_Dinfo) isZInfoMsg_InfoContent() {}

func (*ZInfoMsg_Ainfo) isZInfoMsg_InfoContent() {}

func (*ZInfoMsg_Sinfo) isZInfoMsg_InfoContent() {}

func (*ZInfoMsg_Ninfo) isZInfoMsg_InfoContent() {}

func (*ZInfoMsg_Niinfo) isZInfoMsg_InfoContent() {}

func (m *ZInfoMsg) GetInfoContent() isZInfoMsg_InfoContent {
	if m != nil {
		return m.InfoContent
	}
	return nil
}

func (m *ZInfoMsg) GetDinfo() *ZInfoDevice {
	if x, ok := m.GetInfoContent().(*ZInfoMsg_Dinfo); ok {
		return x.Dinfo
	}
	return nil
}

func (m *ZInfoMsg) GetAinfo() *ZInfoApp {
	if x, ok := m.GetInfoContent().(*ZInfoMsg_Ainfo); ok {
		return x.Ainfo
	}
	return nil
}

func (m *ZInfoMsg) GetSinfo() *ZInfoService {
	if x, ok := m.GetInfoContent().(*ZInfoMsg_Sinfo); ok {
		return x.Sinfo
	}
	return nil
}

func (m *ZInfoMsg) GetNinfo() *ZInfoNetworkObject {
	if x, ok := m.GetInfoContent().(*ZInfoMsg_Ninfo); ok {
		return x.Ninfo
	}
	return nil
}

func (m *ZInfoMsg) GetNiinfo() *ZInfoNetworkInstance {
	if x, ok := m.GetInfoContent().(*ZInfoMsg_Niinfo); ok {
		return x.Niinfo
	}
	return nil
}

func (m *ZInfoMsg) GetAtTimeStamp() *timestamp.Timestamp {
	if m != nil {
		return m.AtTimeStamp
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ZInfoMsg) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ZInfoMsg_Dinfo)(nil),
		(*ZInfoMsg_Ainfo)(nil),
		(*ZInfoMsg_Sinfo)(nil),
		(*ZInfoMsg_Ninfo)(nil),
		(*ZInfoMsg_Niinfo)(nil),
	}
}

func init() {
	proto.RegisterEnum("DepMetricItemType", DepMetricItemType_name, DepMetricItemType_value)
	proto.RegisterEnum("ZInfoTypes", ZInfoTypes_name, ZInfoTypes_value)
	proto.RegisterEnum("ZioType", ZioType_name, ZioType_value)
	proto.RegisterEnum("ZPeripheralTypes", ZPeripheralTypes_name, ZPeripheralTypes_value)
	proto.RegisterEnum("ZSwState", ZSwState_name, ZSwState_value)
	proto.RegisterEnum("HwSecurityModuleStatus", HwSecurityModuleStatus_name, HwSecurityModuleStatus_value)
	proto.RegisterEnum("BaseOsStatus", BaseOsStatus_name, BaseOsStatus_value)
	proto.RegisterEnum("BaseOsSubStatus", BaseOsSubStatus_name, BaseOsSubStatus_value)
	proto.RegisterEnum("ZInfoVpnState", ZInfoVpnState_name, ZInfoVpnState_value)
	proto.RegisterType((*DeprecatedMetricItem)(nil), "deprecatedMetricItem")
	proto.RegisterType((*ZmetIPAssignmentEntry)(nil), "ZmetIPAssignmentEntry")
	proto.RegisterType((*ZmetVifInfo)(nil), "ZmetVifInfo")
	proto.RegisterType((*ZioBundle)(nil), "ZioBundle")
	proto.RegisterType((*ZInfoManufacturer)(nil), "ZInfoManufacturer")
	proto.RegisterType((*ZInfoNetwork)(nil), "ZInfoNetwork")
	proto.RegisterType((*GeoLoc)(nil), "GeoLoc")
	proto.RegisterType((*ZInfoDNS)(nil), "ZInfoDNS")
	proto.RegisterType((*ZinfoPeripheral)(nil), "ZinfoPeripheral")
	proto.RegisterType((*ZInfoSW)(nil), "ZInfoSW")
	proto.RegisterType((*ErrorInfo)(nil), "ErrorInfo")
	proto.RegisterType((*ZInfoDevice)(nil), "ZInfoDevice")
	proto.RegisterType((*SystemAdapterInfo)(nil), "SystemAdapterInfo")
	proto.RegisterType((*DevicePortStatus)(nil), "DevicePortStatus")
	proto.RegisterType((*DevicePort)(nil), "DevicePort")
	proto.RegisterType((*ProxyStatus)(nil), "ProxyStatus")
	proto.RegisterType((*ProxyEntry)(nil), "ProxyEntry")
	proto.RegisterType((*ZInfoDevSW)(nil), "ZInfoDevSW")
	proto.RegisterType((*ZInfoStorage)(nil), "ZInfoStorage")
	proto.RegisterType((*ZInfoApp)(nil), "ZInfoApp")
	proto.RegisterType((*ZInfoVpnLinkInfo)(nil), "ZInfoVpnLinkInfo")
	proto.RegisterType((*ZInfoVpnLink)(nil), "ZInfoVpnLink")
	proto.RegisterType((*ZInfoVpnEndPoint)(nil), "ZInfoVpnEndPoint")
	proto.RegisterType((*ZInfoVpnConn)(nil), "ZInfoVpnConn")
	proto.RegisterType((*ZInfoVpn)(nil), "ZInfoVpn")
	proto.RegisterType((*RlocState)(nil), "RlocState")
	proto.RegisterType((*MapCacheEntry)(nil), "MapCacheEntry")
	proto.RegisterType((*DatabaseMap)(nil), "DatabaseMap")
	proto.RegisterType((*DecapKey)(nil), "DecapKey")
	proto.RegisterType((*ZInfoLisp)(nil), "ZInfoLisp")
	proto.RegisterType((*ZInfoService)(nil), "ZInfoService")
	proto.RegisterType((*ZInfoNetworkObject)(nil), "ZInfoNetworkObject")
	proto.RegisterType((*ZInfoNetworkInstance)(nil), "ZInfoNetworkInstance")
	proto.RegisterType((*ZInfoMsg)(nil), "ZInfoMsg")
}

func init() { proto.RegisterFile("info.proto", fileDescriptor_f140d5b28dddb141) }

var fileDescriptor_f140d5b28dddb141 = []byte{
	// 3733 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x5a, 0x4b, 0x6f, 0x23, 0x49,
	0x72, 0x16, 0x29, 0x52, 0x22, 0x83, 0xa2, 0x54, 0xca, 0x56, 0xf7, 0x70, 0x7b, 0x1b, 0x33, 0x9a,
	0x9a, 0xdd, 0x19, 0x59, 0xde, 0x2d, 0x19, 0xbd, 0xeb, 0xf1, 0x60, 0x31, 0x36, 0x4c, 0x89, 0xec,
	0x16, 0xd1, 0x54, 0x49, 0x48, 0x4a, 0x6a, 0x8c, 0x00, 0xbb, 0x51, 0xaa, 0x4a, 0x51, 0xe5, 0x26,
	0xab, 0x6a, 0xab, 0x92, 0xd2, 0x68, 0x8f, 0xc6, 0x02, 0xbe, 0x18, 0x30, 0x6c, 0x1f, 0x7c, 0xf6,
	0x9f, 0xb0, 0x7d, 0xf1, 0xd5, 0x27, 0x5f, 0xed, 0x93, 0x31, 0x07, 0xff, 0x08, 0x1f, 0x6d, 0x23,
	0x22, 0xb3, 0x1e, 0x7c, 0x48, 0xea, 0xc6, 0xde, 0x32, 0xbe, 0x08, 0xe6, 0x23, 0x22, 0x32, 0x1e,
	0x59, 0x04, 0xf0, 0x83, 0xab, 0xd0, 0x8a, 0xe2, 0x50, 0x86, 0xcf, 0x3f, 0x1b, 0x86, 0xe1, 0x70,
	0x24, 0xf6, 0x88, 0xba, 0x9c, 0x5c, 0xed, 0x49, 0x7f, 0x2c, 0x12, 0xe9, 0x8c, 0x23, 0x25, 0x60,
	0xfe, 0x6d, 0x19, 0xb6, 0x3c, 0x11, 0xc5, 0xc2, 0x75, 0xa4, 0xf0, 0x8e, 0x84, 0x8c, 0x7d, 0xb7,
	0x27, 0xc5, 0x98, 0x19, 0xb0, 0xfc, 0x5e, 0xdc, 0xb5, 0x4a, 0xdb, 0xa5, 0x9d, 0x3a, 0xc7, 0x21,
	0xfb, 0x12, 0x2a, 0xf2, 0x2e, 0x12, 0xad, 0xf2, 0x76, 0x69, 0x67, 0xfd, 0x25, 0xb3, 0x3a, 0x22,
	0xca, 0xe5, 0x4f, 0xef, 0x22, 0xc1, 0x89, 0xcf, 0x3e, 0x85, 0xfa, 0x65, 0x18, 0x8e, 0xce, 0x9d,
	0xd1, 0x44, 0xb4, 0x96, 0xb7, 0x4b, 0x3b, 0xb5, 0xc3, 0x25, 0x9e, 0x43, 0xcc, 0x84, 0xc6, 0xc4,
	0x0f, 0xe4, 0x2f, 0x5e, 0x2a, 0x89, 0xca, 0x76, 0x69, 0xa7, 0x79, 0xb8, 0xc4, 0x8b, 0x60, 0x2a,
	0xf3, 0xf5, 0x2f, 0x95, 0x4c, 0x75, 0xbb, 0xb4, 0x53, 0x49, 0x65, 0x34, 0xc8, 0xb6, 0x01, 0xae,
	0x46, 0xa1, 0x23, 0x95, 0xc8, 0xca, 0x76, 0x69, 0xa7, 0x7c, 0xb8, 0xc4, 0x0b, 0x18, 0xce, 0x92,
	0xc8, 0xd8, 0x0f, 0x86, 0x4a, 0x64, 0x15, 0xcf, 0x82, 0xb3, 0x14, 0xc0, 0xfd, 0x4d, 0xd8, 0x18,
	0x67, 0xa7, 0x20, 0xc8, 0x3c, 0x83, 0xa7, 0x17, 0x63, 0x21, 0x7b, 0x27, 0xed, 0x24, 0xf1, 0x87,
	0xc1, 0x58, 0x04, 0xb2, 0x1b, 0xc8, 0xf8, 0x8e, 0x7d, 0x0a, 0x30, 0x76, 0xdc, 0xb6, 0xe7, 0xc5,
	0x22, 0x49, 0xb4, 0x6a, 0x0a, 0x08, 0x7b, 0x01, 0x75, 0x3f, 0x4a, 0xd9, 0xe5, 0xed, 0xe5, 0x9d,
	0x3a, 0xcf, 0x01, 0xf3, 0xcf, 0xa0, 0x81, 0xd3, 0x9e, 0xfb, 0x57, 0xbd, 0xe0, 0x2a, 0x64, 0x2d,
	0x58, 0xbd, 0xf1, 0xaf, 0x6c, 0x67, 0x2c, 0xf4, 0x4c, 0x29, 0x39, 0xb3, 0x4c, 0x79, 0x6e, 0x99,
	0x2d, 0xa8, 0x3a, 0x51, 0xd4, 0xeb, 0x90, 0x72, 0xeb, 0x5c, 0x11, 0xe6, 0x3f, 0x96, 0xa0, 0x7e,
	0xe1, 0x87, 0xfb, 0x93, 0xc0, 0x1b, 0x09, 0xf6, 0x42, 0x1b, 0xab, 0x44, 0xc6, 0xaa, 0x59, 0x17,
	0x7e, 0x58, 0x30, 0x11, 0x83, 0x4a, 0x80, 0x0b, 0xab, 0xb9, 0x69, 0x8c, 0xfb, 0x19, 0x8b, 0xf1,
	0xa5, 0x88, 0x93, 0xd6, 0x32, 0x6d, 0x3d, 0x25, 0xd9, 0x4f, 0xa0, 0x39, 0x49, 0x84, 0xb7, 0x7f,
	0xd7, 0x8e, 0xa2, 0xb3, 0xb3, 0x5e, 0x87, 0x4c, 0x56, 0xe7, 0xd3, 0x20, 0x33, 0x61, 0x4d, 0x01,
	0xfb, 0x4e, 0x22, 0x8e, 0x07, 0x64, 0xb3, 0x1a, 0x9f, 0xc2, 0xcc, 0x7f, 0x2e, 0xc3, 0xe6, 0x05,
	0x9e, 0xfe, 0xc8, 0x09, 0x26, 0x57, 0x8e, 0x2b, 0x27, 0xb1, 0x88, 0xf1, 0x97, 0xe3, 0x02, 0xad,
	0xd5, 0x31, 0x85, 0xb1, 0x6d, 0x68, 0x44, 0x71, 0xe8, 0x4d, 0x5c, 0x69, 0xe7, 0x1b, 0x2f, 0x42,
	0xa4, 0x4f, 0x11, 0x27, 0x7e, 0x18, 0x68, 0xbd, 0xa4, 0x24, 0xce, 0x9f, 0x88, 0xd8, 0x77, 0x46,
	0xf6, 0x04, 0x0f, 0xa4, 0xb7, 0x3f, 0x85, 0xa1, 0x46, 0xe8, 0x68, 0x55, 0xa5, 0x11, 0x3a, 0xd1,
	0xa7, 0x00, 0x6e, 0x38, 0x8e, 0x1c, 0xe9, 0x5f, 0x8e, 0x94, 0x83, 0xd5, 0x79, 0x01, 0x41, 0xfe,
	0xa5, 0x1f, 0x26, 0xe7, 0x22, 0xf0, 0xc2, 0x58, 0x79, 0x17, 0x2f, 0x20, 0xb8, 0x67, 0x45, 0xa9,
	0x5d, 0xd5, 0xd4, 0x9e, 0x0b, 0x10, 0xdb, 0x81, 0x0d, 0x24, 0xb9, 0x18, 0x09, 0x27, 0x11, 0x1d,
	0x47, 0x8a, 0x56, 0x9d, 0xa4, 0x66, 0x61, 0xf3, 0xbf, 0xca, 0xb0, 0x46, 0x9a, 0xb3, 0x85, 0xbc,
	0x0d, 0xe3, 0xf7, 0x64, 0x2e, 0xe5, 0x12, 0xe9, 0x71, 0x35, 0x89, 0x1c, 0x4f, 0xdc, 0x90, 0x9a,
	0xd4, 0x49, 0x53, 0x12, 0x39, 0xbd, 0x13, 0x94, 0x49, 0x5a, 0x55, 0x65, 0x62, 0x4d, 0xb2, 0x2f,
	0x61, 0xdd, 0x13, 0x57, 0xce, 0x64, 0x24, 0x79, 0x38, 0x91, 0xe8, 0x03, 0x2b, 0x24, 0x30, 0x83,
	0xb2, 0x1f, 0xc3, 0xb2, 0x17, 0x24, 0x74, 0xd6, 0xc6, 0xcb, 0xba, 0x45, 0x3b, 0xea, 0xd8, 0x03,
	0x8e, 0x28, 0x5b, 0x87, 0xf2, 0x24, 0xa2, 0x63, 0xd6, 0x78, 0x79, 0x12, 0xb1, 0x2f, 0xa0, 0x36,
	0x0a, 0x5d, 0x47, 0xe2, 0xe1, 0xeb, 0xf4, 0x8b, 0x55, 0xeb, 0xb5, 0x08, 0xfb, 0xa1, 0xcb, 0x33,
	0x06, 0x7b, 0x06, 0x2b, 0x93, 0x68, 0xe4, 0x07, 0xef, 0x5b, 0x40, 0x3f, 0xd4, 0x14, 0xdb, 0x05,
	0x08, 0xd4, 0x51, 0xbb, 0x71, 0xdc, 0x6a, 0xd0, 0xcf, 0xc1, 0xea, 0xc6, 0x71, 0x18, 0xe3, 0xa2,
	0xbc, 0xc0, 0xc5, 0x7b, 0x87, 0xf3, 0x8d, 0xe8, 0xcc, 0x6b, 0x74, 0xe6, 0x1c, 0x60, 0x26, 0x54,
	0xa3, 0x38, 0xfc, 0xfe, 0xae, 0xd5, 0xa4, 0x49, 0xd6, 0xac, 0x13, 0xa4, 0x06, 0xd2, 0x91, 0x93,
	0x84, 0x2b, 0x96, 0xf9, 0x6f, 0x25, 0x58, 0x51, 0x5b, 0x43, 0xab, 0x9e, 0x05, 0x9e, 0x88, 0x47,
	0xce, 0x5d, 0xef, 0x24, 0xbd, 0xe4, 0x39, 0xc2, 0x9e, 0x43, 0xed, 0x30, 0x4c, 0x64, 0xe1, 0xfe,
	0x64, 0x34, 0x7a, 0xd1, 0x81, 0x2f, 0xef, 0xb4, 0x45, 0x68, 0x8c, 0x07, 0xe4, 0x62, 0x88, 0x3a,
	0x50, 0xd6, 0xd0, 0x14, 0x1a, 0xe3, 0x20, 0x9c, 0x60, 0x5c, 0xd1, 0x4e, 0x97, 0x92, 0x18, 0x7a,
	0xfb, 0xa1, 0xab, 0x1d, 0x0e, 0x87, 0x88, 0x1c, 0xc7, 0x43, 0xed, 0x62, 0x38, 0xc4, 0x59, 0x4f,
	0xc2, 0x44, 0x3a, 0x23, 0xed, 0x56, 0x9a, 0x32, 0xaf, 0xa0, 0x96, 0x1a, 0x05, 0x4f, 0xd2, 0xb1,
	0x07, 0x89, 0x88, 0xf1, 0x22, 0xb4, 0x4a, 0x64, 0xd0, 0x02, 0x82, 0x6a, 0xeb, 0xd8, 0x03, 0x2f,
	0x1c, 0x3b, 0x7e, 0xa0, 0x8f, 0x92, 0x03, 0x9a, 0x9b, 0x08, 0x27, 0x76, 0xaf, 0x75, 0x44, 0xc8,
	0x01, 0xf3, 0x2f, 0x4b, 0xb0, 0x71, 0x81, 0x89, 0xe6, 0x44, 0xc4, 0x7e, 0x74, 0x2d, 0x62, 0x67,
	0xc4, 0xbe, 0x82, 0xea, 0x6f, 0x0a, 0x41, 0x67, 0xd3, 0xba, 0xc8, 0x99, 0x18, 0x7c, 0x12, 0xae,
	0xf8, 0x38, 0x75, 0x34, 0x9a, 0x0c, 0x87, 0x0e, 0xde, 0xab, 0x32, 0x99, 0x3d, 0x07, 0xd8, 0x0e,
	0x54, 0xc7, 0x38, 0x33, 0x69, 0xb1, 0xf1, 0x92, 0x59, 0x73, 0x11, 0x83, 0x2b, 0x01, 0xf3, 0x3f,
	0x4b, 0xb0, 0x4a, 0xcc, 0xc1, 0x5b, 0x9c, 0x33, 0xb9, 0x4d, 0xaf, 0x9a, 0x3e, 0x4c, 0x06, 0xa0,
	0xba, 0x92, 0xdb, 0x43, 0x27, 0xb9, 0xd6, 0xa6, 0xd1, 0x14, 0xfb, 0x0c, 0xaa, 0x89, 0xc4, 0x6b,
	0x57, 0xa1, 0x2d, 0xd7, 0xad, 0x8b, 0xc1, 0x2d, 0x7a, 0x86, 0xe0, 0x0a, 0xc7, 0x1f, 0x4a, 0x27,
	0x1e, 0x0a, 0xa9, 0xcd, 0xa1, 0x29, 0xb4, 0xf4, 0x8d, 0x27, 0x6e, 0xb4, 0x49, 0x68, 0xcc, 0x76,
	0xc1, 0xf0, 0xc2, 0xdb, 0x60, 0x14, 0x3a, 0xde, 0x49, 0x1c, 0x0e, 0x29, 0x7a, 0xa3, 0x75, 0x9a,
	0x7c, 0x0e, 0xa7, 0x54, 0x31, 0x76, 0x86, 0x82, 0x5c, 0x56, 0xdd, 0xf9, 0x1c, 0x30, 0x87, 0x50,
	0xcf, 0x3c, 0x1d, 0xc3, 0x88, 0x27, 0x12, 0x37, 0xf6, 0x23, 0xba, 0x49, 0xca, 0x23, 0x8b, 0x10,
	0xfb, 0x06, 0xea, 0x59, 0x5e, 0xa7, 0xb3, 0x37, 0x5e, 0x3e, 0xb7, 0x54, 0xe6, 0xb7, 0xd2, 0xcc,
	0x6f, 0x9d, 0xa6, 0x12, 0x3c, 0x17, 0x36, 0xff, 0x6a, 0x15, 0x1a, 0xca, 0x5f, 0xc4, 0x8d, 0xef,
	0x62, 0x4e, 0x6d, 0x8c, 0x1d, 0xf7, 0xda, 0x0f, 0x44, 0x1b, 0xcd, 0xae, 0x3c, 0xb6, 0x08, 0xa1,
	0xdb, 0xba, 0xd1, 0x84, 0xb8, 0xda, 0x6d, 0x35, 0x89, 0x17, 0x23, 0x1a, 0x39, 0xf2, 0x2a, 0x8c,
	0xc7, 0x5a, 0x59, 0x19, 0x4d, 0x09, 0xc7, 0x8d, 0x26, 0xa4, 0xae, 0x26, 0xa7, 0x31, 0xaa, 0x76,
	0x2c, 0xc6, 0x61, 0x7c, 0x47, 0x4a, 0xaa, 0x70, 0x4d, 0xe1, 0x0a, 0x89, 0x0c, 0x63, 0x67, 0xa8,
	0x14, 0x53, 0xe1, 0x29, 0x99, 0x7b, 0x46, 0xe3, 0x11, 0xcf, 0x60, 0x5f, 0xc1, 0xaa, 0x8e, 0x0f,
	0xad, 0xe6, 0xf6, 0xf2, 0x4e, 0xe3, 0x65, 0xd3, 0x2a, 0x46, 0x4f, 0x9e, 0x72, 0xd9, 0xaf, 0x80,
	0x39, 0x94, 0xe5, 0xd1, 0xf5, 0xda, 0x9e, 0x13, 0x51, 0xf0, 0xdb, 0xa0, 0xdf, 0x80, 0x95, 0xe5,
	0x53, 0xbe, 0x40, 0x2a, 0x0d, 0x86, 0xc6, 0xc2, 0x60, 0xb8, 0x87, 0xb5, 0x07, 0x6d, 0xbb, 0xef,
	0x27, 0xb2, 0xb5, 0x59, 0xdc, 0xc5, 0x40, 0x31, 0x78, 0x51, 0x82, 0x7d, 0x0d, 0xb5, 0xcb, 0x30,
	0x94, 0x68, 0xa6, 0x16, 0x7b, 0xd4, 0x86, 0x99, 0x2c, 0xfb, 0x02, 0x5d, 0x9b, 0xd6, 0x78, 0x42,
	0x6b, 0x34, 0xac, 0xd4, 0xa0, 0x83, 0xb7, 0x5c, 0xb3, 0xd2, 0xa0, 0x45, 0xde, 0xb6, 0x95, 0x07,
	0x2d, 0x8a, 0x8f, 0x7f, 0x04, 0x8d, 0xbc, 0x02, 0x4a, 0x5a, 0x4f, 0x69, 0x96, 0xa7, 0xd6, 0xa2,
	0xaa, 0x90, 0x17, 0x25, 0xd1, 0xdf, 0x47, 0x4e, 0x22, 0xb9, 0xc0, 0xbd, 0x70, 0xe1, 0x24, 0x61,
	0xd0, 0x7a, 0x46, 0x93, 0xcf, 0xe1, 0x6c, 0x1f, 0xd6, 0x73, 0x8c, 0xce, 0xf8, 0xc9, 0xa3, 0x67,
	0x9c, 0xf9, 0x05, 0xfb, 0x06, 0x9a, 0xc9, 0x5d, 0x22, 0xc5, 0x58, 0x5b, 0xa0, 0xd5, 0xd2, 0x6e,
	0x30, 0x28, 0xa2, 0x94, 0x1d, 0xa6, 0x05, 0x31, 0xbd, 0xc5, 0x38, 0x69, 0x2c, 0x29, 0xc6, 0x8a,
	0xb8, 0xf5, 0x23, 0x72, 0xc4, 0x19, 0x94, 0xfd, 0x21, 0xd4, 0x0f, 0x07, 0x47, 0x2a, 0x35, 0xb4,
	0x9e, 0x53, 0x48, 0xf8, 0xc4, 0x3a, 0xbc, 0x1d, 0x08, 0x77, 0x12, 0xfb, 0xf2, 0xee, 0x28, 0xf4,
	0x26, 0x23, 0xa1, 0x33, 0x47, 0x2e, 0x89, 0x1e, 0x7b, 0x38, 0x38, 0xc2, 0x85, 0x5b, 0x3f, 0x56,
	0x77, 0x42, 0x93, 0x98, 0xe0, 0xf3, 0x43, 0x0c, 0xa4, 0xe3, 0xbe, 0x6f, 0xbd, 0x50, 0x09, 0x7e,
	0x06, 0x36, 0x2f, 0x61, 0x73, 0xee, 0x18, 0x58, 0xb9, 0xb8, 0x93, 0x38, 0x16, 0x81, 0xec, 0x05,
	0x9e, 0xf8, 0x9e, 0xee, 0x7e, 0x93, 0x4f, 0x61, 0xec, 0xf7, 0x60, 0x25, 0x51, 0x1b, 0x2e, 0x93,
	0xe5, 0x36, 0x2d, 0x75, 0x97, 0x4f, 0xc2, 0x58, 0xea, 0xad, 0x6a, 0x01, 0xf3, 0x5f, 0xcb, 0x60,
	0xcc, 0x32, 0x8b, 0x75, 0x93, 0x9a, 0x3e, 0xab, 0x9b, 0x74, 0x0b, 0x50, 0xce, 0x5b, 0x80, 0x3f,
	0x81, 0x35, 0x8c, 0x1d, 0x27, 0xb1, 0x1f, 0xc6, 0x69, 0x9e, 0x7b, 0xd8, 0x86, 0x53, 0xf2, 0xec,
	0x57, 0x00, 0x78, 0xee, 0x57, 0x8e, 0x3f, 0x12, 0x1e, 0x45, 0x97, 0x87, 0x7f, 0x5d, 0x90, 0x66,
	0x7f, 0x0a, 0x4d, 0xa4, 0x06, 0x13, 0xd7, 0x15, 0xc2, 0x13, 0x1e, 0x85, 0x9f, 0x87, 0x7f, 0x3e,
	0xfd, 0x03, 0xf6, 0x39, 0x54, 0xa3, 0x30, 0x96, 0xaa, 0xb6, 0xc1, 0x8b, 0x92, 0xeb, 0x82, 0x2b,
	0x0e, 0x55, 0x12, 0x4e, 0x22, 0x29, 0xf8, 0xea, 0xd8, 0x9e, 0x03, 0xe6, 0xff, 0x96, 0x01, 0xf2,
	0xdf, 0x60, 0x00, 0xf3, 0xaf, 0x82, 0xbc, 0x80, 0xd7, 0xd4, 0xc2, 0xea, 0x1a, 0x65, 0x93, 0xa3,
	0xe1, 0x58, 0xaa, 0x8e, 0x88, 0x6b, 0x0a, 0x65, 0xaf, 0x62, 0xa1, 0xf2, 0x4f, 0x8d, 0xd3, 0x18,
	0x2f, 0xab, 0x77, 0xed, 0x46, 0x98, 0x32, 0x29, 0xd2, 0x35, 0x79, 0x46, 0x53, 0x22, 0x9b, 0x5c,
	0x06, 0x42, 0xea, 0x3a, 0x47, 0x53, 0x68, 0xc5, 0xa1, 0x23, 0xc5, 0xad, 0xa3, 0xca, 0x9c, 0x3a,
	0x4f, 0x49, 0xac, 0x02, 0x54, 0x46, 0xa7, 0x3d, 0xad, 0xab, 0x7a, 0x26, 0x47, 0xf0, 0xc8, 0x81,
	0x8c, 0x06, 0x54, 0x13, 0xb4, 0x36, 0xd4, 0x91, 0x33, 0x80, 0x7e, 0x1d, 0x24, 0x03, 0x5d, 0x43,
	0x18, 0xaa, 0x86, 0xc8, 0x11, 0xf4, 0x50, 0xdc, 0x1b, 0x77, 0x82, 0xa1, 0xe8, 0x87, 0xb7, 0xad,
	0x4d, 0x55, 0x5b, 0x17, 0x31, 0xec, 0x1f, 0x32, 0xfa, 0xd0, 0x1f, 0x5e, 0x53, 0x78, 0xab, 0xf3,
	0x69, 0x30, 0x2f, 0xd3, 0x9e, 0xde, 0x5f, 0xa6, 0xfd, 0x77, 0x09, 0x1a, 0x05, 0x98, 0xfd, 0x14,
	0x56, 0x91, 0xe1, 0x0b, 0x55, 0xde, 0xa0, 0x4d, 0x89, 0x4d, 0xed, 0x1a, 0x4f, 0x79, 0x78, 0x08,
	0xf1, 0xbd, 0x2b, 0x28, 0x59, 0x66, 0x0d, 0x55, 0x8e, 0xa0, 0xf2, 0x22, 0xc7, 0xbd, 0xf2, 0x47,
	0x22, 0xad, 0xa5, 0x35, 0xc9, 0x2c, 0x60, 0x3a, 0x53, 0xe8, 0x79, 0xa9, 0x64, 0x51, 0xc6, 0x5a,
	0xc0, 0xc1, 0xfb, 0x5e, 0x44, 0xcf, 0x78, 0x5f, 0x67, 0xc9, 0x59, 0x18, 0xd7, 0xbc, 0x8d, 0x1c,
	0x0f, 0x25, 0x54, 0xb2, 0x4c, 0x49, 0xb3, 0x0f, 0x90, 0x1f, 0x02, 0x1d, 0x24, 0xab, 0xa9, 0x9a,
	0xba, 0x7d, 0x43, 0x27, 0x50, 0xf6, 0x2a, 0x6b, 0x27, 0x50, 0xc6, 0x62, 0x50, 0x41, 0x37, 0xa6,
	0x43, 0x34, 0x39, 0x8d, 0xcd, 0xbf, 0xae, 0x00, 0xe4, 0x09, 0x01, 0xad, 0xed, 0xb8, 0xd2, 0xbf,
	0xc1, 0xb8, 0x9e, 0x96, 0x5e, 0x19, 0x80, 0x71, 0x32, 0x72, 0x62, 0xe9, 0xa3, 0x5a, 0xfa, 0xce,
	0xa5, 0x18, 0x69, 0x7d, 0xcc, 0xa0, 0x78, 0xcc, 0x0c, 0x51, 0x17, 0x42, 0x97, 0x0a, 0xb3, 0xf0,
	0xd4, 0x8c, 0x54, 0x58, 0x69, 0x7d, 0xcc, 0xa0, 0xec, 0xf3, 0x2c, 0x8a, 0xad, 0xcc, 0x56, 0x62,
	0x9a, 0x41, 0x6d, 0xdc, 0x75, 0x18, 0xcb, 0xb4, 0xc8, 0x5b, 0xd5, 0x6d, 0x5c, 0x01, 0xc3, 0xfa,
	0x65, 0x14, 0x06, 0xc3, 0x99, 0x96, 0xab, 0x00, 0xb1, 0x6d, 0xa8, 0x26, 0xb7, 0xd8, 0x52, 0xd4,
	0xe7, 0x5a, 0x0a, 0xc5, 0x58, 0x58, 0xc6, 0xc1, 0x3d, 0x65, 0xdc, 0xcf, 0x01, 0x26, 0x89, 0x88,
	0x75, 0xc6, 0x68, 0xd0, 0xd6, 0x9b, 0x16, 0x75, 0xbb, 0x89, 0x76, 0xdd, 0x82, 0x00, 0x1d, 0x61,
	0x72, 0xa9, 0x88, 0x81, 0x8c, 0xf5, 0x1d, 0x9e, 0xc2, 0x98, 0x05, 0xf5, 0x8c, 0xa6, 0xbb, 0xbc,
	0xfe, 0xd2, 0x48, 0x67, 0x4c, 0x71, 0x9e, 0x8b, 0xb0, 0x9f, 0xc1, 0x66, 0x46, 0x64, 0xfb, 0x5d,
	0xa7, 0xfd, 0xce, 0x33, 0xcc, 0xdf, 0x96, 0x74, 0x1f, 0xa9, 0x6b, 0x10, 0xf4, 0x25, 0x4f, 0x59,
	0x50, 0x07, 0x31, 0x45, 0xa1, 0xa3, 0x8c, 0x31, 0x2b, 0x9e, 0x38, 0xf2, 0x3a, 0xad, 0xa7, 0x33,
	0x80, 0x6d, 0x41, 0x55, 0x86, 0xd8, 0x7d, 0x2c, 0x53, 0x85, 0xa6, 0x08, 0x74, 0x8b, 0xb4, 0xa2,
	0x49, 0xfb, 0x3e, 0x75, 0x55, 0x66, 0x61, 0xf3, 0xb7, 0xcb, 0xba, 0x4f, 0x69, 0x47, 0x11, 0x4e,
	0xd6, 0xa6, 0xf7, 0x0c, 0xb5, 0x03, 0x45, 0xe0, 0xa5, 0x75, 0xa2, 0x68, 0xba, 0xa2, 0x2f, 0x20,
	0x54, 0xf0, 0xab, 0x84, 0x19, 0x45, 0xe4, 0x34, 0x35, 0x9e, 0x03, 0x78, 0xbd, 0xda, 0x51, 0x44,
	0xf5, 0x8e, 0xf2, 0x93, 0x94, 0x64, 0x3f, 0x83, 0xb5, 0x24, 0xbc, 0x92, 0xb7, 0x4e, 0xac, 0x2a,
	0xb3, 0x1a, 0x05, 0x8e, 0x9a, 0xae, 0xcc, 0xde, 0xf2, 0x29, 0xee, 0x54, 0x55, 0xb6, 0xf6, 0x11,
	0x55, 0xd9, 0xd7, 0x60, 0xa8, 0x8a, 0x51, 0x78, 0x59, 0x55, 0xd9, 0x9c, 0xab, 0x2a, 0xe7, 0x64,
	0x98, 0x09, 0x2b, 0x4e, 0x14, 0xa1, 0x7f, 0xae, 0x6b, 0xe9, 0xdc, 0x3f, 0x35, 0x27, 0x6f, 0x5a,
	0x36, 0xee, 0x69, 0x5a, 0x0a, 0xd5, 0xaf, 0xf1, 0x50, 0xf5, 0x6b, 0xfe, 0x39, 0x18, 0xc4, 0x38,
	0x8f, 0x82, 0xbe, 0x1f, 0xbc, 0xa7, 0x9a, 0x63, 0x0b, 0xaa, 0x49, 0xe4, 0xf7, 0xbc, 0xd4, 0x1a,
	0x44, 0xe8, 0xbc, 0x63, 0x0b, 0x99, 0x85, 0x1c, 0xa2, 0xd0, 0x0a, 0x9e, 0x1f, 0x0b, 0x57, 0xa6,
	0xef, 0x2e, 0x35, 0x9e, 0x03, 0xe6, 0xff, 0xa4, 0xde, 0xa6, 0x17, 0x60, 0xeb, 0x50, 0xf6, 0xd3,
	0x99, 0xcb, 0xbe, 0xb7, 0x30, 0x55, 0x6e, 0x41, 0x35, 0x16, 0xbf, 0xee, 0x79, 0xe9, 0xf3, 0x16,
	0x11, 0x98, 0x14, 0xfd, 0x20, 0x51, 0x86, 0xa8, 0x90, 0xd3, 0x65, 0x34, 0x1a, 0x5b, 0x24, 0x11,
	0xd5, 0x5f, 0xba, 0x27, 0xd1, 0x24, 0xfb, 0x49, 0xaa, 0x2a, 0x15, 0x55, 0xd6, 0xad, 0x74, 0x37,
	0x33, 0xfa, 0xaa, 0x8e, 0xe8, 0xd7, 0x40, 0x16, 0xde, 0xb4, 0x66, 0x95, 0xc2, 0x15, 0x1f, 0x05,
	0xc9, 0x14, 0xba, 0x01, 0x59, 0x24, 0x48, 0x7c, 0xd3, 0xce, 0x15, 0xdb, 0x0d, 0xbc, 0x93, 0xd0,
	0x0f, 0xe4, 0xdc, 0xd9, 0xb1, 0x24, 0xa0, 0xc7, 0xc1, 0x54, 0xa5, 0x8a, 0x5a, 0x18, 0xc5, 0xff,
	0xa1, 0x9c, 0x2b, 0xf2, 0x20, 0x0c, 0x82, 0x0f, 0x52, 0xe4, 0xfd, 0x2f, 0x62, 0xa4, 0xb0, 0xa2,
	0x2e, 0x53, 0x12, 0xe7, 0xf1, 0xdf, 0x8b, 0x24, 0x7d, 0x07, 0xc3, 0xf1, 0xc7, 0x2a, 0x71, 0x75,
	0x46, 0x37, 0xa9, 0x02, 0xe6, 0x94, 0x58, 0xbb, 0x57, 0x50, 0x55, 0xbf, 0x5f, 0x40, 0x75, 0xe4,
	0x07, 0xef, 0x31, 0xfa, 0x16, 0x9c, 0x58, 0x6b, 0x9b, 0x2b, 0x9e, 0xf9, 0xf7, 0x25, 0x1d, 0x49,
	0xce, 0x23, 0xfd, 0x98, 0x44, 0xc7, 0x2a, 0xa9, 0x96, 0x52, 0x51, 0xf4, 0x7a, 0x18, 0x8e, 0x7c,
	0x97, 0xde, 0x21, 0xd3, 0xbc, 0x57, 0x84, 0xa8, 0x97, 0xf1, 0x13, 0x29, 0x02, 0x3f, 0x18, 0xf6,
	0x22, 0xf5, 0x46, 0xa6, 0x1e, 0x3d, 0xe6, 0x70, 0xf6, 0x39, 0x54, 0xdc, 0x30, 0x08, 0xe6, 0xb6,
	0x85, 0x86, 0xe1, 0xc4, 0x32, 0xff, 0x18, 0xea, 0x7c, 0x14, 0xba, 0x2a, 0xb7, 0x31, 0xa8, 0x20,
	0xa1, 0xad, 0x45, 0x63, 0xbc, 0x37, 0x5c, 0x38, 0xee, 0x75, 0xf1, 0x09, 0x24, 0x03, 0xcc, 0x03,
	0x68, 0x1e, 0x39, 0xd1, 0x81, 0xe3, 0x5e, 0x8b, 0x6e, 0xfa, 0x24, 0xd4, 0xcd, 0x02, 0x24, 0x0e,
	0x31, 0x8f, 0xe1, 0x44, 0x69, 0xd5, 0x0f, 0x56, 0xb6, 0x1e, 0x57, 0x0c, 0xf3, 0x3b, 0x68, 0x74,
	0x1c, 0xe9, 0x5c, 0x3a, 0x89, 0x38, 0x72, 0x22, 0x9c, 0xa2, 0xa7, 0xa7, 0xa8, 0x70, 0x1c, 0xb2,
	0x6f, 0x60, 0xa3, 0xb8, 0x0a, 0x56, 0x51, 0x6a, 0xb2, 0x75, 0x6b, 0x6a, 0x75, 0x3e, 0x2b, 0x66,
	0xda, 0x50, 0xeb, 0x08, 0xd7, 0x89, 0xde, 0x88, 0xbb, 0x85, 0xa7, 0x63, 0x50, 0xc1, 0x0a, 0x99,
	0x0e, 0x56, 0xe1, 0x34, 0xc6, 0x0b, 0xfc, 0x46, 0xdc, 0x51, 0xa7, 0xa5, 0xb3, 0x46, 0x46, 0x9b,
	0xff, 0x5e, 0x82, 0x3a, 0x69, 0xb1, 0xef, 0x27, 0x11, 0xd6, 0x8b, 0x3d, 0x19, 0x1f, 0xc4, 0x77,
	0x91, 0x0c, 0x69, 0x1a, 0xb5, 0xe7, 0x69, 0x10, 0xf3, 0x43, 0x57, 0xc6, 0xb6, 0x23, 0x0b, 0x2b,
	0x15, 0x10, 0xe4, 0xf7, 0xb0, 0xa9, 0xbb, 0x72, 0x5c, 0x91, 0xda, 0xb2, 0x80, 0xb0, 0x3f, 0x80,
	0xb5, 0x82, 0x7a, 0x92, 0x56, 0x85, 0x8e, 0xbe, 0x66, 0x15, 0x40, 0x3e, 0x25, 0xc1, 0xbe, 0x82,
	0x7a, 0x7a, 0x6a, 0xf5, 0x80, 0x8a, 0x5d, 0x7f, 0x8a, 0xf0, 0x9c, 0x67, 0xfe, 0xc7, 0x72, 0x9a,
	0x64, 0x45, 0x9c, 0x26, 0xd3, 0x44, 0x0d, 0x33, 0x23, 0xe6, 0x00, 0x7a, 0xa7, 0x26, 0x8a, 0x6f,
	0xdb, 0x05, 0xa8, 0x20, 0x41, 0x4d, 0x81, 0x8a, 0x0c, 0x45, 0x68, 0x2e, 0xab, 0xa9, 0xde, 0xea,
	0xbe, 0xac, 0x36, 0x55, 0x05, 0x56, 0x67, 0xab, 0xc0, 0x6f, 0xa1, 0xa1, 0xee, 0xcd, 0x80, 0x1e,
	0x94, 0x56, 0x1e, 0x4d, 0x7b, 0x45, 0xf1, 0x85, 0x99, 0x6f, 0xf5, 0xc3, 0x32, 0x5f, 0x72, 0xe3,
	0x62, 0xe6, 0xab, 0xcd, 0x67, 0x3e, 0xc5, 0x29, 0x26, 0xb6, 0xfa, 0x83, 0xcf, 0x3a, 0x9f, 0x43,
	0xf5, 0x86, 0x5e, 0x8a, 0xb6, 0x8a, 0x8f, 0x33, 0xe7, 0x51, 0x70, 0xb8, 0xc4, 0x15, 0x07, 0xfb,
	0x8d, 0x11, 0x89, 0x3c, 0xd5, 0x85, 0x60, 0xe6, 0x80, 0x28, 0x43, 0xac, 0xfd, 0x26, 0x34, 0x10,
	0x3c, 0x08, 0x03, 0x29, 0x02, 0x69, 0xfe, 0x5d, 0x15, 0x58, 0x71, 0xbd, 0xe3, 0xcb, 0xbf, 0x10,
	0x2e, 0x69, 0x53, 0xaf, 0x9b, 0x5b, 0x37, 0x03, 0xd0, 0x76, 0x9a, 0x38, 0x4d, 0xbf, 0x9e, 0x35,
	0x79, 0x11, 0x9a, 0xea, 0xf7, 0x96, 0xef, 0xed, 0xf7, 0x2a, 0xf7, 0xf5, 0x7b, 0xd5, 0x87, 0xfa,
	0xbd, 0x95, 0x87, 0xfb, 0xbd, 0xd5, 0x87, 0xfb, 0xbd, 0xda, 0xa3, 0xfd, 0x5e, 0xfd, 0x43, 0xfa,
	0x3d, 0x58, 0xd4, 0xef, 0xbd, 0x80, 0xfa, 0x65, 0xec, 0x7b, 0x43, 0x61, 0x4f, 0xc6, 0x54, 0x5a,
	0x35, 0x79, 0x0e, 0xd0, 0xb7, 0x15, 0x45, 0xe0, 0x29, 0x9a, 0xfa, 0xdb, 0x4a, 0x86, 0xe0, 0x3e,
	0x14, 0xa5, 0xbe, 0x60, 0xe8, 0xbe, 0x76, 0x0a, 0x63, 0xdf, 0x42, 0xd3, 0x8f, 0xf2, 0x6f, 0x78,
	0xe9, 0xb3, 0xde, 0x33, 0x6b, 0xe1, 0xd7, 0x3d, 0x3e, 0x2d, 0x5c, 0x5c, 0x61, 0x20, 0x64, 0xda,
	0xfb, 0x4e, 0x61, 0x68, 0x39, 0xfd, 0xd1, 0x2e, 0xa1, 0x17, 0xbe, 0x3a, 0xcf, 0x68, 0xb4, 0x90,
	0x1f, 0xdd, 0xfc, 0xb2, 0xeb, 0x7b, 0xd4, 0xef, 0xd6, 0x78, 0x4a, 0xce, 0x7c, 0xda, 0x78, 0x32,
	0xe7, 0xed, 0xc5, 0x4f, 0x1b, 0xdb, 0x50, 0xb9, 0xf1, 0xaf, 0x92, 0xd6, 0x8f, 0x74, 0x74, 0x2a,
	0x7c, 0x41, 0xe4, 0xc4, 0x31, 0x7f, 0xa8, 0xc2, 0x56, 0xd1, 0x29, 0x7b, 0x41, 0x22, 0x9d, 0x40,
	0x05, 0x9d, 0xdc, 0x2d, 0xcb, 0xb3, 0x6e, 0xf9, 0x25, 0xac, 0x6b, 0xe2, 0x7c, 0xaa, 0x46, 0x98,
	0x41, 0xb3, 0xba, 0x0b, 0x9d, 0xb3, 0xaa, 0x9c, 0x33, 0xa5, 0xe9, 0x65, 0xda, 0x4f, 0xa2, 0x91,
	0x73, 0x57, 0xf0, 0xb5, 0x22, 0x34, 0x1d, 0x68, 0x56, 0x1f, 0x09, 0x34, 0xb5, 0x8f, 0x0b, 0x34,
	0xb3, 0x21, 0xaf, 0xfe, 0x58, 0xc8, 0xcb, 0xdd, 0x6d, 0xeb, 0x61, 0x77, 0x7b, 0xfa, 0xa8, 0xbb,
	0x3d, 0xfb, 0x10, 0x77, 0xfb, 0xe4, 0x77, 0x71, 0xb7, 0xd6, 0x02, 0x77, 0x7b, 0xd4, 0x19, 0x8a,
	0x4e, 0xf7, 0x7c, 0xda, 0xe9, 0x16, 0x85, 0xe5, 0x4f, 0x3f, 0x20, 0x2c, 0x67, 0x91, 0xf4, 0xb3,
	0xc7, 0x23, 0xe9, 0xf6, 0xbd, 0x91, 0x74, 0xc6, 0xe7, 0x77, 0x1e, 0xf2, 0xf9, 0xd9, 0xa8, 0xfb,
	0x43, 0x59, 0x57, 0x78, 0x47, 0xc9, 0x10, 0xb7, 0x53, 0xfc, 0xc6, 0xa4, 0x1f, 0xbb, 0xa7, 0xbe,
	0x2e, 0x6d, 0x41, 0xd5, 0x13, 0x37, 0x3d, 0x4f, 0xfb, 0xbc, 0x22, 0xb0, 0x88, 0xf5, 0x0a, 0x5f,
	0x95, 0xd6, 0xac, 0xc2, 0x67, 0x0f, 0xdc, 0x26, 0x31, 0x71, 0x7a, 0xc7, 0x4f, 0xfb, 0x88, 0xec,
	0xb4, 0xed, 0x88, 0x4e, 0x42, 0x1c, 0xf6, 0x53, 0xa8, 0x26, 0x7e, 0xde, 0x2c, 0xa4, 0x4f, 0xfa,
	0x2a, 0x17, 0xa3, 0x18, 0x71, 0xd9, 0xef, 0x43, 0x35, 0x28, 0x7c, 0xab, 0x78, 0x62, 0xcd, 0x27,
	0x0e, 0x14, 0x26, 0x19, 0xb6, 0x07, 0x2b, 0x81, 0x4f, 0xd2, 0xaa, 0xc7, 0x7c, 0x6a, 0x2d, 0xba,
	0xd1, 0x87, 0x4b, 0x5c, 0x8b, 0xe1, 0xcd, 0x71, 0xe4, 0x47, 0xa5, 0xe8, 0x82, 0xf8, 0x8c, 0x82,
	0x77, 0x27, 0xb0, 0x39, 0xf7, 0x5f, 0x0e, 0xf6, 0x0c, 0xd8, 0x14, 0x78, 0x2c, 0xaf, 0x45, 0x6c,
	0x2c, 0xcd, 0xe1, 0xaf, 0x9d, 0xc9, 0x50, 0x18, 0x25, 0xd6, 0x82, 0xad, 0x29, 0x5c, 0x3f, 0xa9,
	0x1b, 0xe5, 0xb9, 0x5f, 0x50, 0x91, 0x6a, 0x2c, 0xef, 0xbe, 0xd7, 0x0f, 0x53, 0x64, 0x3c, 0x56,
	0x87, 0xea, 0x85, 0x6f, 0x87, 0x91, 0xb1, 0xc4, 0xd6, 0xa0, 0x76, 0xe1, 0x2b, 0xcb, 0x18, 0x25,
	0xc5, 0x68, 0x47, 0x91, 0xb1, 0xcc, 0x9a, 0x50, 0xbf, 0xf0, 0xb5, 0xa6, 0x8d, 0x0a, 0x7b, 0x02,
	0x1b, 0x17, 0xfe, 0x94, 0x46, 0x8d, 0x2a, 0x7b, 0x0a, 0x9b, 0x19, 0x98, 0x2a, 0xce, 0x58, 0xd9,
	0x3d, 0x84, 0x55, 0xfd, 0x17, 0x08, 0x06, 0xb0, 0x72, 0xe1, 0x87, 0x6a, 0x29, 0x35, 0xee, 0xca,
	0x6b, 0xa3, 0xa4, 0xc7, 0x67, 0x83, 0x7d, 0xa3, 0xac, 0xc7, 0x07, 0xc7, 0x47, 0xb4, 0x6a, 0xed,
	0xc2, 0x0f, 0xd5, 0xf9, 0xff, 0xaf, 0xb4, 0xfb, 0x2d, 0x18, 0xb3, 0xdf, 0x35, 0x49, 0x3c, 0xb2,
	0xc3, 0x40, 0x18, 0x4b, 0xb4, 0xc9, 0x48, 0xbf, 0xae, 0x18, 0x25, 0x45, 0xea, 0xfd, 0x18, 0xe5,
	0xdd, 0x7f, 0xc1, 0x76, 0x45, 0xb7, 0xeb, 0xac, 0x01, 0xab, 0x3d, 0xfb, 0xbc, 0xdd, 0xef, 0x75,
	0x8c, 0x25, 0x45, 0xf4, 0x4e, 0x7b, 0xed, 0xbe, 0x51, 0x62, 0x5b, 0x60, 0x74, 0x8e, 0xdf, 0xda,
	0xfd, 0xe3, 0x76, 0xe7, 0xdd, 0xe0, 0xb4, 0xcd, 0x4f, 0xbb, 0x1d, 0xa3, 0xcc, 0xd6, 0x01, 0x52,
	0xb4, 0xdb, 0x51, 0xfa, 0xe8, 0x74, 0xfb, 0xbd, 0xf3, 0x2e, 0xef, 0x76, 0x8c, 0x0a, 0x92, 0x3d,
	0x7b, 0x70, 0xda, 0xee, 0xf7, 0xbb, 0x1d, 0xa3, 0x8a, 0x13, 0xee, 0x1f, 0x1f, 0x9f, 0xf6, 0xec,
	0xd7, 0xc6, 0x0a, 0x12, 0xfc, 0xcc, 0xb6, 0x91, 0x58, 0x45, 0xe2, 0xb0, 0xdd, 0x27, 0x4e, 0x0d,
	0xf7, 0x8e, 0x44, 0xb7, 0x63, 0xd4, 0x71, 0x01, 0xde, 0xa5, 0xf5, 0x90, 0x07, 0x28, 0x78, 0x72,
	0xc6, 0x5f, 0x23, 0xd1, 0xd8, 0xb5, 0xe1, 0xd9, 0xe2, 0x4f, 0x21, 0x28, 0x76, 0x66, 0xbf, 0xb1,
	0x8f, 0xdf, 0xda, 0xca, 0x7a, 0xf6, 0xf1, 0xe9, 0xab, 0xe3, 0x33, 0xbb, 0x63, 0x94, 0x90, 0xea,
	0xf4, 0x06, 0xed, 0xfd, 0x3e, 0x1d, 0xa0, 0x01, 0xab, 0x5d, 0x5b, 0x11, 0xcb, 0xbb, 0xbf, 0x86,
	0xb5, 0xe2, 0x43, 0x19, 0xab, 0x41, 0xc5, 0x3e, 0xb6, 0xbb, 0xc6, 0x12, 0xdb, 0x80, 0x46, 0x7a,
	0x4e, 0x5c, 0xba, 0xc4, 0x36, 0xa1, 0x99, 0xa9, 0xa3, 0x83, 0x32, 0x65, 0x9c, 0xf8, 0xec, 0xa4,
	0xd3, 0xa6, 0x8d, 0x2e, 0xd3, 0x0e, 0x90, 0x22, 0x3d, 0xac, 0x41, 0xed, 0x55, 0xbb, 0xdf, 0xdf,
	0x6f, 0x1f, 0xbc, 0x31, 0xaa, 0x78, 0xbe, 0x57, 0xed, 0x1e, 0x2e, 0xb9, 0xb2, 0xfb, 0x4f, 0x25,
	0xd8, 0x98, 0x79, 0x4a, 0x63, 0x0c, 0xd6, 0x71, 0xd9, 0x77, 0x83, 0xb3, 0xfd, 0xc1, 0x69, 0xfb,
	0xf4, 0x6c, 0x60, 0x2c, 0xb1, 0x4f, 0xe0, 0x49, 0xb6, 0x5e, 0xcf, 0x3e, 0xe1, 0xc7, 0xaf, 0x79,
	0x77, 0x30, 0x30, 0x4a, 0xe8, 0x5d, 0xe7, 0x5d, 0xde, 0x7b, 0xf5, 0x5d, 0x11, 0x2e, 0xa3, 0xbc,
	0x5a, 0xfe, 0x9d, 0x36, 0x61, 0xef, 0x42, 0xed, 0x6b, 0x0b, 0x0c, 0xcd, 0xe0, 0xdd, 0xd4, 0x18,
	0x15, 0x5c, 0x52, 0xa3, 0xa7, 0xdd, 0x01, 0x61, 0x55, 0xf6, 0x02, 0x5a, 0x1a, 0xb3, 0xbb, 0xdd,
	0x0e, 0x31, 0xde, 0x1d, 0x1c, 0xdb, 0xaf, 0x7a, 0xfc, 0xc8, 0x58, 0xd9, 0xfd, 0x9b, 0x12, 0x34,
	0xa7, 0xba, 0x6e, 0xd4, 0xd1, 0xf9, 0x89, 0xfd, 0x2e, 0xf7, 0x9f, 0x0c, 0x48, 0x7d, 0x88, 0xc1,
	0x3a, 0x02, 0x07, 0xc7, 0xb6, 0xdd, 0x3d, 0xa0, 0x55, 0xca, 0x78, 0x65, 0x10, 0x43, 0x1b, 0xef,
	0xf7, 0x7b, 0x83, 0x43, 0x72, 0xa3, 0x4d, 0x68, 0xaa, 0x5f, 0xa6, 0xbe, 0x53, 0x49, 0x27, 0xe3,
	0xdd, 0x37, 0xdd, 0xef, 0xc8, 0x99, 0x34, 0xd0, 0xe9, 0xf6, 0xbb, 0xa8, 0x64, 0xd8, 0xef, 0xc2,
	0x67, 0x6e, 0x38, 0xb6, 0x7e, 0x23, 0x3c, 0xe1, 0x39, 0x96, 0x3b, 0x0a, 0x27, 0x9e, 0x35, 0xd1,
	0x1d, 0x89, 0x0a, 0x40, 0x17, 0xe6, 0xd0, 0x97, 0xd7, 0x93, 0x4b, 0xcb, 0x0d, 0xc7, 0x7b, 0xa3,
	0xab, 0x9f, 0x0b, 0x6f, 0x28, 0xf6, 0xc4, 0x8d, 0xd8, 0x73, 0x22, 0x7f, 0x6f, 0x18, 0xee, 0x61,
	0x20, 0xbb, 0x5c, 0x21, 0xd1, 0x5f, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf9, 0xec, 0x7d,
	0xbb, 0xb5, 0x26, 0x00, 0x00,
}
