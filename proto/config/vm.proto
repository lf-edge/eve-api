// Copyright(c) 2017-2018 Zededa, Inc.
// All rights reserved.


syntax = "proto3";

package org.lfedge.eve.config;
option go_package = "github.com/lf-edge/eve-api/go/config";
option java_package = "org.lfedge.eve.config";

// For now we need to tell the device which virtualization mode
// to use. Later we might use a single one for all VMs (on any particular
// ISA). If we end up keeping this we should make the names be less
// tied to a particular hypervisor.
enum VmMode {
  PV = 0;
  HVM = 1;
  Filler = 2; // PVH = 2;
  FML = 3; // Experimental machine learning mode
  NOHYPER = 4; // Do not use a hypervisor
  LEGACY = 5; // HVM, but with fully emulated legacy I/O (IDE disks and e1000 net)
}

// Boot mechanisms supported by the BIOS of the Virtual Machine
enum VmBootMode {
  VM_BOOT_MODE_UNSPECIFIED = 0; // Boot mode not specified, use default
  VM_BOOT_MODE_LEGACY = 1; // Legacy BIOS, MBR support only
  VM_BOOT_MODE_UEFI = 2; // UEFI BIOS
}

message VmConfig {
  string kernel = 1;
  string ramdisk = 2;
  // in kbytes; rounded up to Mbytes for xen
  uint32 memory = 3;
  // in kbytes; xen only, default equal to 'memory', so no ballooning
  uint32 maxmem = 4;
  // The amount of the VCPUs in the VM.
  uint32 vcpus = 5;
  // In the case of the Xen hypervisor - the maximal amount of the VCPUs
  // available to the VM. Can be greater than `vcpus` (the VCPUs online on the
  // VM start). If the field is not set, it is initialized by EVE to the value
  // in the `vcpus` field.
  uint32 maxcpus = 6;
  string rootdev = 7;
  string extraargs = 8;
  string bootloader = 9;
  // Currently is not handled by EVE.
  // CPU mask of the CPUs assigned to the VM. Represented in the form
  // "d[[,-]d]*". E.g. "0-2" or "0-2,5,6". CPUs start with 0. For example, the
  // mask "0,3" would mean that only physical CPUs 0 and 3 are available for
  // the VM.
  string cpus = 10;
  string devicetree = 11;
  repeated string dtdev = 12;
  repeated uint32 irqs = 13;
  repeated string iomem = 14;
  VmMode virtualizationMode = 15;
  // Enable VNC access to the edge application
  bool enable_vnc = 16;
  uint32 vncDisplay = 17;
  string vncPasswd = 18;
  // Change of the 'disable logs' field can be handled without VM reboot
  bool disableLogs = 19;
  // Set if the VM should run in a mode with pinned CPUs.
  // In this case any VCPU thread created by QEMU runs on a dedicated physical
  // CPU. All the other QEMU threads will be limited to run on the physical
  // CPUs defined by CPU mask. The CPU mask is provided with the 'cpus' field,
  // defined above. If the CPU mask is not set, the physical CPUs to be used
  // for running QEMU threads are picked automatically by Pillar: it just takes
  // that amount of available physical CPUs that is defined with the 'vcpus'
  // parameter defined above.
  bool pin_cpu = 20;
  // Maximum amount of memory in kbytes allowed for VM monitor to occupy,
  // aka "overhead". E.g. for the qemu-kvm hypervisor the memory limit
  // for one VM instance (guest RAM + VM monitor) is set according to the
  // following equation: `memory` + `vmm_maxmem`
  uint32 vmm_maxmem = 21;
  // Enable VNC access to the shim VM harboring the edge application (for containers only)
  bool enable_vnc_shim_vm = 22;
  // Boot mode: Legacy or UEFI
  VmBootMode boot_mode = 23;
  // Enables enforcement of user-defined ordering for network interfaces.
  // This applies to both virtual interfaces (specified in the "AppInstanceConfig.interfaces" list)
  // and directly assigned network adapters (specified in the "AppInstanceConfig.adapters" list
  // as items of type "PhyIoNetEth", "PhyIoNetWLAN", "PhyIoNetWWAN", and "PhyIoNetEthVF").
  // Note: Older versions of EVE may not support enforcing the user-defined order
  // of application network interfaces. The controller can check
  // "ZInfoDevice.api_capability" to verify if the configured device supports the
  // API capability "API_CAPABILITY_ENFORCED_NET_INTERFACE_ORDER".
  // Please beware that EVE's ability to influence the order of VM application interfaces
  // is limited. Depending on the application's operating system, achieving the desired network
  // interface order might not be possible.
  bool enforce_network_interface_order = 24;
  // The app should receive the Windows license embedded in ACPI tables
  bool enable_oem_win_license_key = 25;
  // Disable vTPM for the VM, this defaults to false according to the
  // proto3 specification.
  bool disable_vtpm = 26;
}
