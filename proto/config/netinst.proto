// Copyright(c) 2017-2018 Zededa, Inc.
// All rights reserved.

syntax = "proto3";

package org.lfedge.eve.config;
option go_package = "github.com/lf-edge/eve-api/go/config";
option java_package = "org.lfedge.eve.config";

import "config/devcommon.proto";
import "config/netcmn.proto";

enum ZNetworkInstType {
  ZNetInstFirst    = 0;
  ZnetInstSwitch   = 1;
  ZnetInstLocal    = 2;
  ZnetInstCloud    = 3;
  ZnetInstMesh     = 4;
  ZnetInstHoneyPot = 5;
  ZnetInstTransparent = 6;
  ZNetInstLast     = 255;
}

enum AddressType {
  First    = 0;
  IPV4    = 1;
  IPV6    = 2;
  CryptoIPV4    = 3;
  CryptoIPV6    = 4;
  Last    = 255;
}

enum ZNetworkOpaqueConfigType {
  ZNetOConfigVPN   = 0;
  ZNetOConfigLisp  = 1;
}

// Network Instance Opaque config. In future we might add more fields here
// but idea is here. This is service specific configuration.
message NetworkInstanceOpaqueConfig {
  string oconfig = 1;
  NetworkInstanceLispConfig lispConfig = 2;
  ZNetworkOpaqueConfigType  type = 3;
}

enum ZcServiceType {
  zcloudInvalidSrv = 0;
  // mapping service for zededa overlay service
  mapServer = 1;

  // if device has support feature enabled, this is cloud service from
  // device can be reached
  supportServer = 2;
}

// This is way to tell the device if there is service in cloud somewhere,
// what type it is how to access it
message ZcServicePoint {
  ZcServiceType zsType = 3;
  string NameOrIp   = 1;
  string Credential = 2;
}

// Lisp NetworkInstance config
message NetworkInstanceLispConfig {
  repeated ZcServicePoint LispMSs = 1;
  uint32 LispInstanceId = 2;

  bool allocate = 3;
  bool exportprivate = 4;
  bytes allocationprefix = 5;
  uint32 allocationprefixlen = 6;

  // various configuration to dataPlane, lispers.net vs Zededa
  bool experimental = 20;
}

message IPRoute {
  // Destination network address in the CIDR format: <IP-address>/<prefix-length>
  // It is allowed to submit default route with all-zeroes destination network address
  // 0.0.0.0/0 or ::/0.
  string destination_network = 1;
  // Gateway IP address.
  // This must be a valid IP address and can not be all-zeroes.
  string gateway = 2;
}

message NetworkInstanceConfig {
  UUIDandVersion uuidandversion = 1;
  string displayname = 2;

  // instType - Type of network instance ( local, bridge etc )
  ZNetworkInstType instType = 4;
  // activate
  //  - True by default. If set to false ( deactivate), the network instance
  //    configuration is downloaded to the device, but the network instance
  //    itself is not created on the device.
  bool activate = 5;

  // port - Only a single port is supported.
  //    This is used as the external connection for the network instance.
  //    This can be a physical (eth0 ) or logical port (vlan 0).
  //    The port name comes from DeviceConfig ( When it is supported in future).
  //    If the user needs multiple physical ports, Device config should be
  //    used to create a label for multiple physical ports.
  Adapter port = 20;

  // cfg - Used to pass some feature-specific configuration to the
  //       network instance. For Ex: Lisp, StriongSwan etc
  NetworkInstanceOpaqueConfig cfg = 30;

  // type of ipSpec
  AddressType ipType = 39;

  // network ip specification
  // Note that ip.gateway must be a valid IP address and can not be all-zeroes.
  // To suppress automatic propagation of the default route into apps, configure network
  // instance as air-gapped (without uplink) or mark the uplink as app-shared
  // (not for management) and ensure that it will not get a default route
  // (e.g. set ip.gateway of the attached NetworkConfig to all-zeroes IP).
  ipspec ip = 40;

  // static DNS entry, if we are running DNS/DHCP service
  repeated ZnetStaticDNSEntry dns = 41;
  // Enable to use DHCP to automatically propagate routes for uplink subnets
  // into applications connected to them indirectly through local network instances.
  // This option is only valid for local network instances. For other types
  // of network instances, it will be ignored.
  bool propagate_connected_routes = 42;
  // List of IP routes statically added to the network instance routing table.
  // Statically routed subnets are also propagated to connected applications
  // using DHCP, with gateway set to the network instance bridge IP if it is
  // outside of the network instance subnet.
  //
  // IP route gateway may point to an external endpoint (provided that network
  // instance is not air-gapped), or to an IP address of one of the applications
  // connected to the network instance.
  //
  // Static routes are handled independently from connected routes. While connected
  // routes are propagated to applications only if enabled by propagate_connected_routes,
  // static routes are always propagated. Both connected and statically configured
  // routes can be propagated at the same time, there are no restrictions for using both.
  //
  // Note that the default route (with the bridge IP as the gateway) is automatically
  // propagated to connected applications, unless network instance is air-gapped
  // (without uplink) or the uplink is app-shared (not management) and does not have
  // a default route of its own. In both cases, it is possible to enforce default
  // route propagation by configuring a static default route for the network instance.
  //
  // For more info on static and connected routes please refer to:
  // https://wiki.lfedge.org/display/EVE/Connected+and+Static+IP+Route
  //
  // This option is only valid for local network instances. For other types
  // of network instances, it will be ignored.
  repeated IPRoute static_routes = 43;

  // Maximum transmission unit (MTU) to set for the network instance and all application
  // interfaces connected to it.
  // This is the largest IP packet that the network instance is allowed to carry.
  // This does not include the L2 header size (e.g. Ethernet header or a VLAN tag size).
  // The value is a 16-byte unsigned integer, representing the MTU size in bytes.
  // The minimum accepted value for the MTU is 1280 (RFC 8200, "IPv6 minimum link MTU").
  // If not defined (zero value), EVE will set the MTU to the default value of 1500 bytes.
  // On the host side, MTU is set to interfaces by EVE. On the guest (app) side,
  // the responsibility to set the MTU lies either with EVE or with the user/app, depending on
  // the network instance, app type and the type of interfaces used (local or switch,
  // VM or container, virtio or emulated).
  // For container applications running inside an EVE-created shim-VM, EVE initializes
  // the MTU of interfaces during shim-VM boot. Furthermore, interfaces connected
  // to local network instances will have their MTUs automatically updated if there is
  // a change in MTU configuration. To update the MTU of interfaces connected to switch
  // network instances, the user may run an external DHCP server in the network and publish
  // MTU changes via DHCP option 26 (the DHCP client run by EVE inside shim-VM will pick it up
  // and apply it).
  // In the case of VM applications, it is mostly the responsibility of the app/user to set
  // and keep the MTUs up-to-date.
  // If device provides HW-assisted virtualization capabilities, EVE will connect VM with
  // network instances using para-virtualized virtio interfaces, which allow to propagate MTU
  // value from the host to the guest. If the virtio driver used by the app supports the MTU
  // propagation (VIRTIO_NET_F_MTU feature flag is set), the initial MTU values will be set
  // using virtio (regardless of the network instance type).
  // To support MTU update for interfaces connected to local network instances, the app can
  // run a DHCP client and receive the latest MTU via DHCP option 26. For switch network
  // instances, the user can run his own external DHCP server in the network with the MTU
  // option configured.
  // Please note that application traffic leaving or entering the device via a network
  // adapter associated with the network instance is additionally limited by the MTU
  // value of the adapter, configured within the NetworkConfig object (refer to netconfig.proto).
  // If the configured network instance MTU differs from the network adapter MTU, EVE will
  // flag the network instance with an error and use the adapter's MTU for the network
  // instance instead (to prevent traffic from being dropped or fragmented inside EVE).
  uint32 mtu = 44;
}
